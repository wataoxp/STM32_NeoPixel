
neocon_g03.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000044f4  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000013c  080045b0  080045b0  000145b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080046ec  080046ec  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  080046ec  080046ec  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  080046ec  080046ec  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080046ec  080046ec  000146ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080046f0  080046f0  000146f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080046f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ca8  20000010  08004704  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000cb8  08004704  00020cb8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b214  00000000  00000000  0002007b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001f47  00000000  00000000  0002b28f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000be0  00000000  00000000  0002d1d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000933  00000000  00000000  0002ddb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00015563  00000000  00000000  0002e6eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000dc17  00000000  00000000  00043c4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00089dd9  00000000  00000000  00051865  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002a58  00000000  00000000  000db640  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  000de098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000010 	.word	0x20000010
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08004598 	.word	0x08004598

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000014 	.word	0x20000014
 8000100:	08004598 	.word	0x08004598

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	; 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	; 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			; (mov r8, r8)

080003f0 <HAL_TIM_PWM_PulseFinishedCallback>:
uint8_t point = 0;
uint8_t type = 0;
uint16_t HueSeed[MAX_LED];

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	b082      	sub	sp, #8
 80003f4:	af00      	add	r7, sp, #0
 80003f6:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
 80003f8:	4b05      	ldr	r3, [pc, #20]	; (8000410 <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 80003fa:	2100      	movs	r1, #0
 80003fc:	0018      	movs	r0, r3
 80003fe:	f003 f817 	bl	8003430 <HAL_TIM_PWM_Stop_DMA>
	datasentflag=1;
 8000402:	4b04      	ldr	r3, [pc, #16]	; (8000414 <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 8000404:	2201      	movs	r2, #1
 8000406:	701a      	strb	r2, [r3, #0]
}
 8000408:	46c0      	nop			; (mov r8, r8)
 800040a:	46bd      	mov	sp, r7
 800040c:	b002      	add	sp, #8
 800040e:	bd80      	pop	{r7, pc}
 8000410:	2000002c 	.word	0x2000002c
 8000414:	200000d4 	.word	0x200000d4

08000418 <HAL_GPIO_EXTI_Falling_Callback>:
void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	b082      	sub	sp, #8
 800041c:	af00      	add	r7, sp, #0
 800041e:	0002      	movs	r2, r0
 8000420:	1dbb      	adds	r3, r7, #6
 8000422:	801a      	strh	r2, [r3, #0]
	if(GPIO_Pin == RedSw_Pin)
 8000424:	1dbb      	adds	r3, r7, #6
 8000426:	881b      	ldrh	r3, [r3, #0]
 8000428:	2b04      	cmp	r3, #4
 800042a:	d104      	bne.n	8000436 <HAL_GPIO_EXTI_Falling_Callback+0x1e>
	{
		current_tick_1 = HAL_GetTick();
 800042c:	f001 f996 	bl	800175c <HAL_GetTick>
 8000430:	0002      	movs	r2, r0
 8000432:	4b3b      	ldr	r3, [pc, #236]	; (8000520 <HAL_GPIO_EXTI_Falling_Callback+0x108>)
 8000434:	601a      	str	r2, [r3, #0]
	}
	if(GPIO_Pin == GreenSw_Pin)
 8000436:	1dbb      	adds	r3, r7, #6
 8000438:	881b      	ldrh	r3, [r3, #0]
 800043a:	2b80      	cmp	r3, #128	; 0x80
 800043c:	d104      	bne.n	8000448 <HAL_GPIO_EXTI_Falling_Callback+0x30>
	{
		current_tick_2 = HAL_GetTick();
 800043e:	f001 f98d 	bl	800175c <HAL_GetTick>
 8000442:	0002      	movs	r2, r0
 8000444:	4b37      	ldr	r3, [pc, #220]	; (8000524 <HAL_GPIO_EXTI_Falling_Callback+0x10c>)
 8000446:	601a      	str	r2, [r3, #0]
	}
	if(GPIO_Pin == BlueSw_Pin)
 8000448:	1dbb      	adds	r3, r7, #6
 800044a:	881a      	ldrh	r2, [r3, #0]
 800044c:	2380      	movs	r3, #128	; 0x80
 800044e:	015b      	lsls	r3, r3, #5
 8000450:	429a      	cmp	r2, r3
 8000452:	d104      	bne.n	800045e <HAL_GPIO_EXTI_Falling_Callback+0x46>
	{
		current_tick_3 = HAL_GetTick();
 8000454:	f001 f982 	bl	800175c <HAL_GetTick>
 8000458:	0002      	movs	r2, r0
 800045a:	4b33      	ldr	r3, [pc, #204]	; (8000528 <HAL_GPIO_EXTI_Falling_Callback+0x110>)
 800045c:	601a      	str	r2, [r3, #0]
	}
	if(GPIO_Pin == (RedSw_Pin) && (current_tick_1 - old_tick_1 > 300))
 800045e:	1dbb      	adds	r3, r7, #6
 8000460:	881b      	ldrh	r3, [r3, #0]
 8000462:	2b04      	cmp	r3, #4
 8000464:	d119      	bne.n	800049a <HAL_GPIO_EXTI_Falling_Callback+0x82>
 8000466:	4b2e      	ldr	r3, [pc, #184]	; (8000520 <HAL_GPIO_EXTI_Falling_Callback+0x108>)
 8000468:	681a      	ldr	r2, [r3, #0]
 800046a:	4b30      	ldr	r3, [pc, #192]	; (800052c <HAL_GPIO_EXTI_Falling_Callback+0x114>)
 800046c:	681b      	ldr	r3, [r3, #0]
 800046e:	1ad2      	subs	r2, r2, r3
 8000470:	2396      	movs	r3, #150	; 0x96
 8000472:	005b      	lsls	r3, r3, #1
 8000474:	429a      	cmp	r2, r3
 8000476:	d910      	bls.n	800049a <HAL_GPIO_EXTI_Falling_Callback+0x82>
	{
		lux += 2;
 8000478:	4b2d      	ldr	r3, [pc, #180]	; (8000530 <HAL_GPIO_EXTI_Falling_Callback+0x118>)
 800047a:	781b      	ldrb	r3, [r3, #0]
 800047c:	3302      	adds	r3, #2
 800047e:	b2da      	uxtb	r2, r3
 8000480:	4b2b      	ldr	r3, [pc, #172]	; (8000530 <HAL_GPIO_EXTI_Falling_Callback+0x118>)
 8000482:	701a      	strb	r2, [r3, #0]
		if(lux >= 7)
 8000484:	4b2a      	ldr	r3, [pc, #168]	; (8000530 <HAL_GPIO_EXTI_Falling_Callback+0x118>)
 8000486:	781b      	ldrb	r3, [r3, #0]
 8000488:	2b06      	cmp	r3, #6
 800048a:	d902      	bls.n	8000492 <HAL_GPIO_EXTI_Falling_Callback+0x7a>
		{
			lux = 0;
 800048c:	4b28      	ldr	r3, [pc, #160]	; (8000530 <HAL_GPIO_EXTI_Falling_Callback+0x118>)
 800048e:	2200      	movs	r2, #0
 8000490:	701a      	strb	r2, [r3, #0]
		}
		old_tick_1 = current_tick_1;
 8000492:	4b23      	ldr	r3, [pc, #140]	; (8000520 <HAL_GPIO_EXTI_Falling_Callback+0x108>)
 8000494:	681a      	ldr	r2, [r3, #0]
 8000496:	4b25      	ldr	r3, [pc, #148]	; (800052c <HAL_GPIO_EXTI_Falling_Callback+0x114>)
 8000498:	601a      	str	r2, [r3, #0]
	}
	if(GPIO_Pin == (GreenSw_Pin) && (current_tick_2 - old_tick_2 > 300))
 800049a:	1dbb      	adds	r3, r7, #6
 800049c:	881b      	ldrh	r3, [r3, #0]
 800049e:	2b80      	cmp	r3, #128	; 0x80
 80004a0:	d119      	bne.n	80004d6 <HAL_GPIO_EXTI_Falling_Callback+0xbe>
 80004a2:	4b20      	ldr	r3, [pc, #128]	; (8000524 <HAL_GPIO_EXTI_Falling_Callback+0x10c>)
 80004a4:	681a      	ldr	r2, [r3, #0]
 80004a6:	4b23      	ldr	r3, [pc, #140]	; (8000534 <HAL_GPIO_EXTI_Falling_Callback+0x11c>)
 80004a8:	681b      	ldr	r3, [r3, #0]
 80004aa:	1ad2      	subs	r2, r2, r3
 80004ac:	2396      	movs	r3, #150	; 0x96
 80004ae:	005b      	lsls	r3, r3, #1
 80004b0:	429a      	cmp	r2, r3
 80004b2:	d910      	bls.n	80004d6 <HAL_GPIO_EXTI_Falling_Callback+0xbe>
	{
		point++;
 80004b4:	4b20      	ldr	r3, [pc, #128]	; (8000538 <HAL_GPIO_EXTI_Falling_Callback+0x120>)
 80004b6:	781b      	ldrb	r3, [r3, #0]
 80004b8:	3301      	adds	r3, #1
 80004ba:	b2da      	uxtb	r2, r3
 80004bc:	4b1e      	ldr	r3, [pc, #120]	; (8000538 <HAL_GPIO_EXTI_Falling_Callback+0x120>)
 80004be:	701a      	strb	r2, [r3, #0]
		if(point >= 3)
 80004c0:	4b1d      	ldr	r3, [pc, #116]	; (8000538 <HAL_GPIO_EXTI_Falling_Callback+0x120>)
 80004c2:	781b      	ldrb	r3, [r3, #0]
 80004c4:	2b02      	cmp	r3, #2
 80004c6:	d902      	bls.n	80004ce <HAL_GPIO_EXTI_Falling_Callback+0xb6>
		{
			point = 0;
 80004c8:	4b1b      	ldr	r3, [pc, #108]	; (8000538 <HAL_GPIO_EXTI_Falling_Callback+0x120>)
 80004ca:	2200      	movs	r2, #0
 80004cc:	701a      	strb	r2, [r3, #0]
		}
		old_tick_2 = current_tick_2;
 80004ce:	4b15      	ldr	r3, [pc, #84]	; (8000524 <HAL_GPIO_EXTI_Falling_Callback+0x10c>)
 80004d0:	681a      	ldr	r2, [r3, #0]
 80004d2:	4b18      	ldr	r3, [pc, #96]	; (8000534 <HAL_GPIO_EXTI_Falling_Callback+0x11c>)
 80004d4:	601a      	str	r2, [r3, #0]
	}
	if(GPIO_Pin == (BlueSw_Pin) && (current_tick_3 - old_tick_3 > 300))
 80004d6:	1dbb      	adds	r3, r7, #6
 80004d8:	881a      	ldrh	r2, [r3, #0]
 80004da:	2380      	movs	r3, #128	; 0x80
 80004dc:	015b      	lsls	r3, r3, #5
 80004de:	429a      	cmp	r2, r3
 80004e0:	d119      	bne.n	8000516 <HAL_GPIO_EXTI_Falling_Callback+0xfe>
 80004e2:	4b11      	ldr	r3, [pc, #68]	; (8000528 <HAL_GPIO_EXTI_Falling_Callback+0x110>)
 80004e4:	681a      	ldr	r2, [r3, #0]
 80004e6:	4b15      	ldr	r3, [pc, #84]	; (800053c <HAL_GPIO_EXTI_Falling_Callback+0x124>)
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	1ad2      	subs	r2, r2, r3
 80004ec:	2396      	movs	r3, #150	; 0x96
 80004ee:	005b      	lsls	r3, r3, #1
 80004f0:	429a      	cmp	r2, r3
 80004f2:	d910      	bls.n	8000516 <HAL_GPIO_EXTI_Falling_Callback+0xfe>
	{
		type++;
 80004f4:	4b12      	ldr	r3, [pc, #72]	; (8000540 <HAL_GPIO_EXTI_Falling_Callback+0x128>)
 80004f6:	781b      	ldrb	r3, [r3, #0]
 80004f8:	3301      	adds	r3, #1
 80004fa:	b2da      	uxtb	r2, r3
 80004fc:	4b10      	ldr	r3, [pc, #64]	; (8000540 <HAL_GPIO_EXTI_Falling_Callback+0x128>)
 80004fe:	701a      	strb	r2, [r3, #0]
		if(type >= 6)
 8000500:	4b0f      	ldr	r3, [pc, #60]	; (8000540 <HAL_GPIO_EXTI_Falling_Callback+0x128>)
 8000502:	781b      	ldrb	r3, [r3, #0]
 8000504:	2b05      	cmp	r3, #5
 8000506:	d902      	bls.n	800050e <HAL_GPIO_EXTI_Falling_Callback+0xf6>
		{
			type = 0;
 8000508:	4b0d      	ldr	r3, [pc, #52]	; (8000540 <HAL_GPIO_EXTI_Falling_Callback+0x128>)
 800050a:	2200      	movs	r2, #0
 800050c:	701a      	strb	r2, [r3, #0]
		}
		old_tick_3 = current_tick_3;
 800050e:	4b06      	ldr	r3, [pc, #24]	; (8000528 <HAL_GPIO_EXTI_Falling_Callback+0x110>)
 8000510:	681a      	ldr	r2, [r3, #0]
 8000512:	4b0a      	ldr	r3, [pc, #40]	; (800053c <HAL_GPIO_EXTI_Falling_Callback+0x124>)
 8000514:	601a      	str	r2, [r3, #0]
	}
}
 8000516:	46c0      	nop			; (mov r8, r8)
 8000518:	46bd      	mov	sp, r7
 800051a:	b002      	add	sp, #8
 800051c:	bd80      	pop	{r7, pc}
 800051e:	46c0      	nop			; (mov r8, r8)
 8000520:	200000d8 	.word	0x200000d8
 8000524:	200000dc 	.word	0x200000dc
 8000528:	200000e0 	.word	0x200000e0
 800052c:	200000e4 	.word	0x200000e4
 8000530:	200000f0 	.word	0x200000f0
 8000534:	200000e8 	.word	0x200000e8
 8000538:	200000f1 	.word	0x200000f1
 800053c:	200000ec 	.word	0x200000ec
 8000540:	200000f2 	.word	0x200000f2

08000544 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000544:	b5b0      	push	{r4, r5, r7, lr}
 8000546:	b0c4      	sub	sp, #272	; 0x110
 8000548:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800054a:	f001 f88b 	bl	8001664 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800054e:	f000 f855 	bl	80005fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000552:	f000 f99b 	bl	800088c <MX_GPIO_Init>
  MX_DMA_Init();
 8000556:	f000 f97b 	bl	8000850 <MX_DMA_Init>
  MX_TIM1_Init();
 800055a:	f000 f8af 	bl	80006bc <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
	RGB_Generate();
 800055e:	f000 fedd 	bl	800131c <RGB_Generate>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	uint32_t(*colmod[6])(uint16_t) =
 8000562:	4b22      	ldr	r3, [pc, #136]	; (80005ec <main+0xa8>)
 8000564:	2288      	movs	r2, #136	; 0x88
 8000566:	0052      	lsls	r2, r2, #1
 8000568:	189b      	adds	r3, r3, r2
 800056a:	19db      	adds	r3, r3, r7
 800056c:	4a20      	ldr	r2, [pc, #128]	; (80005f0 <main+0xac>)
 800056e:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000570:	c313      	stmia	r3!, {r0, r1, r4}
 8000572:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000574:	c313      	stmia	r3!, {r0, r1, r4}
	{HSV_Rainbow,Neon,Cranberry,Blueberry,Muscat,HSV_Pastel};
	for(i = 0; i < MAX_LED; i++)
 8000576:	2310      	movs	r3, #16
 8000578:	33ff      	adds	r3, #255	; 0xff
 800057a:	18fb      	adds	r3, r7, r3
 800057c:	2200      	movs	r2, #0
 800057e:	701a      	strb	r2, [r3, #0]
 8000580:	e027      	b.n	80005d2 <main+0x8e>
	{
		Rainbow_Circle(i);
 8000582:	2410      	movs	r4, #16
 8000584:	34ff      	adds	r4, #255	; 0xff
 8000586:	193b      	adds	r3, r7, r4
 8000588:	781b      	ldrb	r3, [r3, #0]
 800058a:	0018      	movs	r0, r3
 800058c:	f000 ff02 	bl	8001394 <Rainbow_Circle>
		color[i] = (*colmod[type])(HueSeed[i]);
 8000590:	4b18      	ldr	r3, [pc, #96]	; (80005f4 <main+0xb0>)
 8000592:	781b      	ldrb	r3, [r3, #0]
 8000594:	001a      	movs	r2, r3
 8000596:	4b15      	ldr	r3, [pc, #84]	; (80005ec <main+0xa8>)
 8000598:	2188      	movs	r1, #136	; 0x88
 800059a:	0049      	lsls	r1, r1, #1
 800059c:	185b      	adds	r3, r3, r1
 800059e:	19db      	adds	r3, r3, r7
 80005a0:	0092      	lsls	r2, r2, #2
 80005a2:	58d3      	ldr	r3, [r2, r3]
 80005a4:	193a      	adds	r2, r7, r4
 80005a6:	7811      	ldrb	r1, [r2, #0]
 80005a8:	4a13      	ldr	r2, [pc, #76]	; (80005f8 <main+0xb4>)
 80005aa:	0049      	lsls	r1, r1, #1
 80005ac:	5a89      	ldrh	r1, [r1, r2]
 80005ae:	0025      	movs	r5, r4
 80005b0:	193a      	adds	r2, r7, r4
 80005b2:	7814      	ldrb	r4, [r2, #0]
 80005b4:	0008      	movs	r0, r1
 80005b6:	4798      	blx	r3
 80005b8:	0001      	movs	r1, r0
 80005ba:	231c      	movs	r3, #28
 80005bc:	18fb      	adds	r3, r7, r3
 80005be:	00a2      	lsls	r2, r4, #2
 80005c0:	50d1      	str	r1, [r2, r3]
		HAL_Delay(1);
 80005c2:	2001      	movs	r0, #1
 80005c4:	f001 f8d4 	bl	8001770 <HAL_Delay>
	for(i = 0; i < MAX_LED; i++)
 80005c8:	197b      	adds	r3, r7, r5
 80005ca:	781a      	ldrb	r2, [r3, #0]
 80005cc:	197b      	adds	r3, r7, r5
 80005ce:	3201      	adds	r2, #1
 80005d0:	701a      	strb	r2, [r3, #0]
 80005d2:	2310      	movs	r3, #16
 80005d4:	33ff      	adds	r3, #255	; 0xff
 80005d6:	18fb      	adds	r3, r7, r3
 80005d8:	781b      	ldrb	r3, [r3, #0]
 80005da:	2b3b      	cmp	r3, #59	; 0x3b
 80005dc:	d9d1      	bls.n	8000582 <main+0x3e>
	}
	WS2812_Send(color);
 80005de:	231c      	movs	r3, #28
 80005e0:	18fb      	adds	r3, r7, r3
 80005e2:	0018      	movs	r0, r3
 80005e4:	f000 f9d6 	bl	8000994 <WS2812_Send>
  {
 80005e8:	e7bb      	b.n	8000562 <main+0x1e>
 80005ea:	46c0      	nop			; (mov r8, r8)
 80005ec:	fffffef4 	.word	0xfffffef4
 80005f0:	080045b0 	.word	0x080045b0
 80005f4:	200000f2 	.word	0x200000f2
 80005f8:	200000f4 	.word	0x200000f4

080005fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005fc:	b590      	push	{r4, r7, lr}
 80005fe:	b093      	sub	sp, #76	; 0x4c
 8000600:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000602:	2410      	movs	r4, #16
 8000604:	193b      	adds	r3, r7, r4
 8000606:	0018      	movs	r0, r3
 8000608:	2338      	movs	r3, #56	; 0x38
 800060a:	001a      	movs	r2, r3
 800060c:	2100      	movs	r1, #0
 800060e:	f003 ff97 	bl	8004540 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000612:	003b      	movs	r3, r7
 8000614:	0018      	movs	r0, r3
 8000616:	2310      	movs	r3, #16
 8000618:	001a      	movs	r2, r3
 800061a:	2100      	movs	r1, #0
 800061c:	f003 ff90 	bl	8004540 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000620:	2380      	movs	r3, #128	; 0x80
 8000622:	009b      	lsls	r3, r3, #2
 8000624:	0018      	movs	r0, r3
 8000626:	f001 fdf9 	bl	800221c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800062a:	193b      	adds	r3, r7, r4
 800062c:	2202      	movs	r2, #2
 800062e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000630:	193b      	adds	r3, r7, r4
 8000632:	2280      	movs	r2, #128	; 0x80
 8000634:	0052      	lsls	r2, r2, #1
 8000636:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000638:	0021      	movs	r1, r4
 800063a:	187b      	adds	r3, r7, r1
 800063c:	2200      	movs	r2, #0
 800063e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000640:	187b      	adds	r3, r7, r1
 8000642:	2240      	movs	r2, #64	; 0x40
 8000644:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000646:	187b      	adds	r3, r7, r1
 8000648:	2202      	movs	r2, #2
 800064a:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800064c:	187b      	adds	r3, r7, r1
 800064e:	2202      	movs	r2, #2
 8000650:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000652:	187b      	adds	r3, r7, r1
 8000654:	2200      	movs	r2, #0
 8000656:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 9;
 8000658:	187b      	adds	r3, r7, r1
 800065a:	2209      	movs	r2, #9
 800065c:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800065e:	187b      	adds	r3, r7, r1
 8000660:	2280      	movs	r2, #128	; 0x80
 8000662:	0292      	lsls	r2, r2, #10
 8000664:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000666:	187b      	adds	r3, r7, r1
 8000668:	2280      	movs	r2, #128	; 0x80
 800066a:	0492      	lsls	r2, r2, #18
 800066c:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV3;
 800066e:	187b      	adds	r3, r7, r1
 8000670:	2280      	movs	r2, #128	; 0x80
 8000672:	05d2      	lsls	r2, r2, #23
 8000674:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000676:	187b      	adds	r3, r7, r1
 8000678:	0018      	movs	r0, r3
 800067a:	f001 fe0f 	bl	800229c <HAL_RCC_OscConfig>
 800067e:	1e03      	subs	r3, r0, #0
 8000680:	d001      	beq.n	8000686 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000682:	f000 f981 	bl	8000988 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000686:	003b      	movs	r3, r7
 8000688:	2207      	movs	r2, #7
 800068a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800068c:	003b      	movs	r3, r7
 800068e:	2202      	movs	r2, #2
 8000690:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000692:	003b      	movs	r3, r7
 8000694:	2280      	movs	r2, #128	; 0x80
 8000696:	0112      	lsls	r2, r2, #4
 8000698:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800069a:	003b      	movs	r3, r7
 800069c:	2200      	movs	r2, #0
 800069e:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006a0:	003b      	movs	r3, r7
 80006a2:	2100      	movs	r1, #0
 80006a4:	0018      	movs	r0, r3
 80006a6:	f002 f913 	bl	80028d0 <HAL_RCC_ClockConfig>
 80006aa:	1e03      	subs	r3, r0, #0
 80006ac:	d001      	beq.n	80006b2 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80006ae:	f000 f96b 	bl	8000988 <Error_Handler>
  }
}
 80006b2:	46c0      	nop			; (mov r8, r8)
 80006b4:	46bd      	mov	sp, r7
 80006b6:	b013      	add	sp, #76	; 0x4c
 80006b8:	bd90      	pop	{r4, r7, pc}
	...

080006bc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b09c      	sub	sp, #112	; 0x70
 80006c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006c2:	2360      	movs	r3, #96	; 0x60
 80006c4:	18fb      	adds	r3, r7, r3
 80006c6:	0018      	movs	r0, r3
 80006c8:	2310      	movs	r3, #16
 80006ca:	001a      	movs	r2, r3
 80006cc:	2100      	movs	r1, #0
 80006ce:	f003 ff37 	bl	8004540 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006d2:	2354      	movs	r3, #84	; 0x54
 80006d4:	18fb      	adds	r3, r7, r3
 80006d6:	0018      	movs	r0, r3
 80006d8:	230c      	movs	r3, #12
 80006da:	001a      	movs	r2, r3
 80006dc:	2100      	movs	r1, #0
 80006de:	f003 ff2f 	bl	8004540 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006e2:	2338      	movs	r3, #56	; 0x38
 80006e4:	18fb      	adds	r3, r7, r3
 80006e6:	0018      	movs	r0, r3
 80006e8:	231c      	movs	r3, #28
 80006ea:	001a      	movs	r2, r3
 80006ec:	2100      	movs	r1, #0
 80006ee:	f003 ff27 	bl	8004540 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80006f2:	1d3b      	adds	r3, r7, #4
 80006f4:	0018      	movs	r0, r3
 80006f6:	2334      	movs	r3, #52	; 0x34
 80006f8:	001a      	movs	r2, r3
 80006fa:	2100      	movs	r1, #0
 80006fc:	f003 ff20 	bl	8004540 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000700:	4b51      	ldr	r3, [pc, #324]	; (8000848 <MX_TIM1_Init+0x18c>)
 8000702:	4a52      	ldr	r2, [pc, #328]	; (800084c <MX_TIM1_Init+0x190>)
 8000704:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000706:	4b50      	ldr	r3, [pc, #320]	; (8000848 <MX_TIM1_Init+0x18c>)
 8000708:	2200      	movs	r2, #0
 800070a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800070c:	4b4e      	ldr	r3, [pc, #312]	; (8000848 <MX_TIM1_Init+0x18c>)
 800070e:	2200      	movs	r2, #0
 8000710:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 30-1;
 8000712:	4b4d      	ldr	r3, [pc, #308]	; (8000848 <MX_TIM1_Init+0x18c>)
 8000714:	221d      	movs	r2, #29
 8000716:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000718:	4b4b      	ldr	r3, [pc, #300]	; (8000848 <MX_TIM1_Init+0x18c>)
 800071a:	2200      	movs	r2, #0
 800071c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800071e:	4b4a      	ldr	r3, [pc, #296]	; (8000848 <MX_TIM1_Init+0x18c>)
 8000720:	2200      	movs	r2, #0
 8000722:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000724:	4b48      	ldr	r3, [pc, #288]	; (8000848 <MX_TIM1_Init+0x18c>)
 8000726:	2200      	movs	r2, #0
 8000728:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800072a:	4b47      	ldr	r3, [pc, #284]	; (8000848 <MX_TIM1_Init+0x18c>)
 800072c:	0018      	movs	r0, r3
 800072e:	f002 fbd3 	bl	8002ed8 <HAL_TIM_Base_Init>
 8000732:	1e03      	subs	r3, r0, #0
 8000734:	d001      	beq.n	800073a <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 8000736:	f000 f927 	bl	8000988 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800073a:	2160      	movs	r1, #96	; 0x60
 800073c:	187b      	adds	r3, r7, r1
 800073e:	2280      	movs	r2, #128	; 0x80
 8000740:	0152      	lsls	r2, r2, #5
 8000742:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000744:	187a      	adds	r2, r7, r1
 8000746:	4b40      	ldr	r3, [pc, #256]	; (8000848 <MX_TIM1_Init+0x18c>)
 8000748:	0011      	movs	r1, r2
 800074a:	0018      	movs	r0, r3
 800074c:	f003 f85a 	bl	8003804 <HAL_TIM_ConfigClockSource>
 8000750:	1e03      	subs	r3, r0, #0
 8000752:	d001      	beq.n	8000758 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8000754:	f000 f918 	bl	8000988 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000758:	4b3b      	ldr	r3, [pc, #236]	; (8000848 <MX_TIM1_Init+0x18c>)
 800075a:	0018      	movs	r0, r3
 800075c:	f002 fc14 	bl	8002f88 <HAL_TIM_PWM_Init>
 8000760:	1e03      	subs	r3, r0, #0
 8000762:	d001      	beq.n	8000768 <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 8000764:	f000 f910 	bl	8000988 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000768:	2154      	movs	r1, #84	; 0x54
 800076a:	187b      	adds	r3, r7, r1
 800076c:	2200      	movs	r2, #0
 800076e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000770:	187b      	adds	r3, r7, r1
 8000772:	2200      	movs	r2, #0
 8000774:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000776:	187b      	adds	r3, r7, r1
 8000778:	2200      	movs	r2, #0
 800077a:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800077c:	187a      	adds	r2, r7, r1
 800077e:	4b32      	ldr	r3, [pc, #200]	; (8000848 <MX_TIM1_Init+0x18c>)
 8000780:	0011      	movs	r1, r2
 8000782:	0018      	movs	r0, r3
 8000784:	f003 fdd8 	bl	8004338 <HAL_TIMEx_MasterConfigSynchronization>
 8000788:	1e03      	subs	r3, r0, #0
 800078a:	d001      	beq.n	8000790 <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 800078c:	f000 f8fc 	bl	8000988 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000790:	2138      	movs	r1, #56	; 0x38
 8000792:	187b      	adds	r3, r7, r1
 8000794:	2260      	movs	r2, #96	; 0x60
 8000796:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000798:	187b      	adds	r3, r7, r1
 800079a:	2200      	movs	r2, #0
 800079c:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800079e:	187b      	adds	r3, r7, r1
 80007a0:	2200      	movs	r2, #0
 80007a2:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80007a4:	187b      	adds	r3, r7, r1
 80007a6:	2200      	movs	r2, #0
 80007a8:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007aa:	187b      	adds	r3, r7, r1
 80007ac:	2200      	movs	r2, #0
 80007ae:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80007b0:	187b      	adds	r3, r7, r1
 80007b2:	2200      	movs	r2, #0
 80007b4:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80007b6:	187b      	adds	r3, r7, r1
 80007b8:	2200      	movs	r2, #0
 80007ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80007bc:	1879      	adds	r1, r7, r1
 80007be:	4b22      	ldr	r3, [pc, #136]	; (8000848 <MX_TIM1_Init+0x18c>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	0018      	movs	r0, r3
 80007c4:	f002 ff1e 	bl	8003604 <HAL_TIM_PWM_ConfigChannel>
 80007c8:	1e03      	subs	r3, r0, #0
 80007ca:	d001      	beq.n	80007d0 <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 80007cc:	f000 f8dc 	bl	8000988 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80007d0:	1d3b      	adds	r3, r7, #4
 80007d2:	2200      	movs	r2, #0
 80007d4:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80007d6:	1d3b      	adds	r3, r7, #4
 80007d8:	2200      	movs	r2, #0
 80007da:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80007dc:	1d3b      	adds	r3, r7, #4
 80007de:	2200      	movs	r2, #0
 80007e0:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80007e2:	1d3b      	adds	r3, r7, #4
 80007e4:	2200      	movs	r2, #0
 80007e6:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80007e8:	1d3b      	adds	r3, r7, #4
 80007ea:	2200      	movs	r2, #0
 80007ec:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80007ee:	1d3b      	adds	r3, r7, #4
 80007f0:	2280      	movs	r2, #128	; 0x80
 80007f2:	0192      	lsls	r2, r2, #6
 80007f4:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80007f6:	1d3b      	adds	r3, r7, #4
 80007f8:	2200      	movs	r2, #0
 80007fa:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80007fc:	1d3b      	adds	r3, r7, #4
 80007fe:	2200      	movs	r2, #0
 8000800:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000802:	1d3b      	adds	r3, r7, #4
 8000804:	2200      	movs	r2, #0
 8000806:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000808:	1d3b      	adds	r3, r7, #4
 800080a:	2280      	movs	r2, #128	; 0x80
 800080c:	0492      	lsls	r2, r2, #18
 800080e:	625a      	str	r2, [r3, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000810:	1d3b      	adds	r3, r7, #4
 8000812:	2200      	movs	r2, #0
 8000814:	629a      	str	r2, [r3, #40]	; 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000816:	1d3b      	adds	r3, r7, #4
 8000818:	2200      	movs	r2, #0
 800081a:	62da      	str	r2, [r3, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800081c:	1d3b      	adds	r3, r7, #4
 800081e:	2200      	movs	r2, #0
 8000820:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000822:	1d3a      	adds	r2, r7, #4
 8000824:	4b08      	ldr	r3, [pc, #32]	; (8000848 <MX_TIM1_Init+0x18c>)
 8000826:	0011      	movs	r1, r2
 8000828:	0018      	movs	r0, r3
 800082a:	f003 fded 	bl	8004408 <HAL_TIMEx_ConfigBreakDeadTime>
 800082e:	1e03      	subs	r3, r0, #0
 8000830:	d001      	beq.n	8000836 <MX_TIM1_Init+0x17a>
  {
    Error_Handler();
 8000832:	f000 f8a9 	bl	8000988 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000836:	4b04      	ldr	r3, [pc, #16]	; (8000848 <MX_TIM1_Init+0x18c>)
 8000838:	0018      	movs	r0, r3
 800083a:	f000 fe6d 	bl	8001518 <HAL_TIM_MspPostInit>

}
 800083e:	46c0      	nop			; (mov r8, r8)
 8000840:	46bd      	mov	sp, r7
 8000842:	b01c      	add	sp, #112	; 0x70
 8000844:	bd80      	pop	{r7, pc}
 8000846:	46c0      	nop			; (mov r8, r8)
 8000848:	2000002c 	.word	0x2000002c
 800084c:	40012c00 	.word	0x40012c00

08000850 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b082      	sub	sp, #8
 8000854:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000856:	4b0c      	ldr	r3, [pc, #48]	; (8000888 <MX_DMA_Init+0x38>)
 8000858:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800085a:	4b0b      	ldr	r3, [pc, #44]	; (8000888 <MX_DMA_Init+0x38>)
 800085c:	2101      	movs	r1, #1
 800085e:	430a      	orrs	r2, r1
 8000860:	639a      	str	r2, [r3, #56]	; 0x38
 8000862:	4b09      	ldr	r3, [pc, #36]	; (8000888 <MX_DMA_Init+0x38>)
 8000864:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000866:	2201      	movs	r2, #1
 8000868:	4013      	ands	r3, r2
 800086a:	607b      	str	r3, [r7, #4]
 800086c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800086e:	2200      	movs	r2, #0
 8000870:	2100      	movs	r1, #0
 8000872:	2009      	movs	r0, #9
 8000874:	f001 f84c 	bl	8001910 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000878:	2009      	movs	r0, #9
 800087a:	f001 f85e 	bl	800193a <HAL_NVIC_EnableIRQ>

}
 800087e:	46c0      	nop			; (mov r8, r8)
 8000880:	46bd      	mov	sp, r7
 8000882:	b002      	add	sp, #8
 8000884:	bd80      	pop	{r7, pc}
 8000886:	46c0      	nop			; (mov r8, r8)
 8000888:	40021000 	.word	0x40021000

0800088c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800088c:	b590      	push	{r4, r7, lr}
 800088e:	b089      	sub	sp, #36	; 0x24
 8000890:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000892:	240c      	movs	r4, #12
 8000894:	193b      	adds	r3, r7, r4
 8000896:	0018      	movs	r0, r3
 8000898:	2314      	movs	r3, #20
 800089a:	001a      	movs	r2, r3
 800089c:	2100      	movs	r1, #0
 800089e:	f003 fe4f 	bl	8004540 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008a2:	4b36      	ldr	r3, [pc, #216]	; (800097c <MX_GPIO_Init+0xf0>)
 80008a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80008a6:	4b35      	ldr	r3, [pc, #212]	; (800097c <MX_GPIO_Init+0xf0>)
 80008a8:	2102      	movs	r1, #2
 80008aa:	430a      	orrs	r2, r1
 80008ac:	635a      	str	r2, [r3, #52]	; 0x34
 80008ae:	4b33      	ldr	r3, [pc, #204]	; (800097c <MX_GPIO_Init+0xf0>)
 80008b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80008b2:	2202      	movs	r2, #2
 80008b4:	4013      	ands	r3, r2
 80008b6:	60bb      	str	r3, [r7, #8]
 80008b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80008ba:	4b30      	ldr	r3, [pc, #192]	; (800097c <MX_GPIO_Init+0xf0>)
 80008bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80008be:	4b2f      	ldr	r3, [pc, #188]	; (800097c <MX_GPIO_Init+0xf0>)
 80008c0:	2120      	movs	r1, #32
 80008c2:	430a      	orrs	r2, r1
 80008c4:	635a      	str	r2, [r3, #52]	; 0x34
 80008c6:	4b2d      	ldr	r3, [pc, #180]	; (800097c <MX_GPIO_Init+0xf0>)
 80008c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80008ca:	2220      	movs	r2, #32
 80008cc:	4013      	ands	r3, r2
 80008ce:	607b      	str	r3, [r7, #4]
 80008d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008d2:	4b2a      	ldr	r3, [pc, #168]	; (800097c <MX_GPIO_Init+0xf0>)
 80008d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80008d6:	4b29      	ldr	r3, [pc, #164]	; (800097c <MX_GPIO_Init+0xf0>)
 80008d8:	2101      	movs	r1, #1
 80008da:	430a      	orrs	r2, r1
 80008dc:	635a      	str	r2, [r3, #52]	; 0x34
 80008de:	4b27      	ldr	r3, [pc, #156]	; (800097c <MX_GPIO_Init+0xf0>)
 80008e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80008e2:	2201      	movs	r2, #1
 80008e4:	4013      	ands	r3, r2
 80008e6:	603b      	str	r3, [r7, #0]
 80008e8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : GreenSw_Pin */
  GPIO_InitStruct.Pin = GreenSw_Pin;
 80008ea:	193b      	adds	r3, r7, r4
 80008ec:	2280      	movs	r2, #128	; 0x80
 80008ee:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008f0:	193b      	adds	r3, r7, r4
 80008f2:	2284      	movs	r2, #132	; 0x84
 80008f4:	0392      	lsls	r2, r2, #14
 80008f6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008f8:	193b      	adds	r3, r7, r4
 80008fa:	2201      	movs	r2, #1
 80008fc:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GreenSw_GPIO_Port, &GPIO_InitStruct);
 80008fe:	193b      	adds	r3, r7, r4
 8000900:	4a1f      	ldr	r2, [pc, #124]	; (8000980 <MX_GPIO_Init+0xf4>)
 8000902:	0019      	movs	r1, r3
 8000904:	0010      	movs	r0, r2
 8000906:	f001 faf1 	bl	8001eec <HAL_GPIO_Init>

  /*Configure GPIO pin : RedSw_Pin */
  GPIO_InitStruct.Pin = RedSw_Pin;
 800090a:	0021      	movs	r1, r4
 800090c:	187b      	adds	r3, r7, r1
 800090e:	2204      	movs	r2, #4
 8000910:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000912:	187b      	adds	r3, r7, r1
 8000914:	2284      	movs	r2, #132	; 0x84
 8000916:	0392      	lsls	r2, r2, #14
 8000918:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800091a:	187b      	adds	r3, r7, r1
 800091c:	2201      	movs	r2, #1
 800091e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(RedSw_GPIO_Port, &GPIO_InitStruct);
 8000920:	000c      	movs	r4, r1
 8000922:	187b      	adds	r3, r7, r1
 8000924:	4a17      	ldr	r2, [pc, #92]	; (8000984 <MX_GPIO_Init+0xf8>)
 8000926:	0019      	movs	r1, r3
 8000928:	0010      	movs	r0, r2
 800092a:	f001 fadf 	bl	8001eec <HAL_GPIO_Init>

  /*Configure GPIO pin : BlueSw_Pin */
  GPIO_InitStruct.Pin = BlueSw_Pin;
 800092e:	0021      	movs	r1, r4
 8000930:	187b      	adds	r3, r7, r1
 8000932:	2280      	movs	r2, #128	; 0x80
 8000934:	0152      	lsls	r2, r2, #5
 8000936:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000938:	187b      	adds	r3, r7, r1
 800093a:	2284      	movs	r2, #132	; 0x84
 800093c:	0392      	lsls	r2, r2, #14
 800093e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000940:	187b      	adds	r3, r7, r1
 8000942:	2201      	movs	r2, #1
 8000944:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BlueSw_GPIO_Port, &GPIO_InitStruct);
 8000946:	187a      	adds	r2, r7, r1
 8000948:	23a0      	movs	r3, #160	; 0xa0
 800094a:	05db      	lsls	r3, r3, #23
 800094c:	0011      	movs	r1, r2
 800094e:	0018      	movs	r0, r3
 8000950:	f001 facc 	bl	8001eec <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 1, 0);
 8000954:	2200      	movs	r2, #0
 8000956:	2101      	movs	r1, #1
 8000958:	2006      	movs	r0, #6
 800095a:	f000 ffd9 	bl	8001910 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 800095e:	2006      	movs	r0, #6
 8000960:	f000 ffeb 	bl	800193a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 1, 0);
 8000964:	2200      	movs	r2, #0
 8000966:	2101      	movs	r1, #1
 8000968:	2007      	movs	r0, #7
 800096a:	f000 ffd1 	bl	8001910 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 800096e:	2007      	movs	r0, #7
 8000970:	f000 ffe3 	bl	800193a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000974:	46c0      	nop			; (mov r8, r8)
 8000976:	46bd      	mov	sp, r7
 8000978:	b009      	add	sp, #36	; 0x24
 800097a:	bd90      	pop	{r4, r7, pc}
 800097c:	40021000 	.word	0x40021000
 8000980:	50000400 	.word	0x50000400
 8000984:	50001400 	.word	0x50001400

08000988 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800098c:	b672      	cpsid	i
}
 800098e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000990:	e7fe      	b.n	8000990 <Error_Handler+0x8>
	...

08000994 <WS2812_Send>:
uint8_t angle[] = {80,64,32};
uint16_t pwmData[DMA_BUFF_SIZE];
uint16_t *pbuff;

void WS2812_Send (uint32_t *color)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b084      	sub	sp, #16
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
	pbuff = pwmData;
 800099c:	4b22      	ldr	r3, [pc, #136]	; (8000a28 <WS2812_Send+0x94>)
 800099e:	4a23      	ldr	r2, [pc, #140]	; (8000a2c <WS2812_Send+0x98>)
 80009a0:	601a      	str	r2, [r3, #0]

	for (int i= 0; i<MAX_LED; i++)
 80009a2:	2300      	movs	r3, #0
 80009a4:	60fb      	str	r3, [r7, #12]
 80009a6:	e020      	b.n	80009ea <WS2812_Send+0x56>
	{
		for (int j=23; j>=0; j--)
 80009a8:	2317      	movs	r3, #23
 80009aa:	60bb      	str	r3, [r7, #8]
 80009ac:	e017      	b.n	80009de <WS2812_Send+0x4a>
		{
			*pbuff = PWM_LO << ( (color[i] >> j) & 0x01 );
 80009ae:	68fb      	ldr	r3, [r7, #12]
 80009b0:	009b      	lsls	r3, r3, #2
 80009b2:	687a      	ldr	r2, [r7, #4]
 80009b4:	18d3      	adds	r3, r2, r3
 80009b6:	681a      	ldr	r2, [r3, #0]
 80009b8:	68bb      	ldr	r3, [r7, #8]
 80009ba:	40da      	lsrs	r2, r3
 80009bc:	0013      	movs	r3, r2
 80009be:	2201      	movs	r2, #1
 80009c0:	4013      	ands	r3, r2
 80009c2:	220a      	movs	r2, #10
 80009c4:	409a      	lsls	r2, r3
 80009c6:	4b18      	ldr	r3, [pc, #96]	; (8000a28 <WS2812_Send+0x94>)
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	b292      	uxth	r2, r2
 80009cc:	801a      	strh	r2, [r3, #0]
			pbuff++;
 80009ce:	4b16      	ldr	r3, [pc, #88]	; (8000a28 <WS2812_Send+0x94>)
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	1c9a      	adds	r2, r3, #2
 80009d4:	4b14      	ldr	r3, [pc, #80]	; (8000a28 <WS2812_Send+0x94>)
 80009d6:	601a      	str	r2, [r3, #0]
		for (int j=23; j>=0; j--)
 80009d8:	68bb      	ldr	r3, [r7, #8]
 80009da:	3b01      	subs	r3, #1
 80009dc:	60bb      	str	r3, [r7, #8]
 80009de:	68bb      	ldr	r3, [r7, #8]
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	dae4      	bge.n	80009ae <WS2812_Send+0x1a>
	for (int i= 0; i<MAX_LED; i++)
 80009e4:	68fb      	ldr	r3, [r7, #12]
 80009e6:	3301      	adds	r3, #1
 80009e8:	60fb      	str	r3, [r7, #12]
 80009ea:	68fb      	ldr	r3, [r7, #12]
 80009ec:	2b3b      	cmp	r3, #59	; 0x3b
 80009ee:	dddb      	ble.n	80009a8 <WS2812_Send+0x14>
		}
	}
	pwmData[DMA_BUFF_SIZE -1] = 0;
 80009f0:	4a0e      	ldr	r2, [pc, #56]	; (8000a2c <WS2812_Send+0x98>)
 80009f2:	23b4      	movs	r3, #180	; 0xb4
 80009f4:	011b      	lsls	r3, r3, #4
 80009f6:	2100      	movs	r1, #0
 80009f8:	52d1      	strh	r1, [r2, r3]
	HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, (uint32_t *)pwmData, DMA_BUFF_SIZE);
 80009fa:	4b0d      	ldr	r3, [pc, #52]	; (8000a30 <WS2812_Send+0x9c>)
 80009fc:	4a0b      	ldr	r2, [pc, #44]	; (8000a2c <WS2812_Send+0x98>)
 80009fe:	480d      	ldr	r0, [pc, #52]	; (8000a34 <WS2812_Send+0xa0>)
 8000a00:	2100      	movs	r1, #0
 8000a02:	f002 fb21 	bl	8003048 <HAL_TIM_PWM_Start_DMA>
	HAL_Delay(1);
 8000a06:	2001      	movs	r0, #1
 8000a08:	f000 feb2 	bl	8001770 <HAL_Delay>
	while (!datasentflag){}
 8000a0c:	46c0      	nop			; (mov r8, r8)
 8000a0e:	4b0a      	ldr	r3, [pc, #40]	; (8000a38 <WS2812_Send+0xa4>)
 8000a10:	781b      	ldrb	r3, [r3, #0]
 8000a12:	b2db      	uxtb	r3, r3
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d0fa      	beq.n	8000a0e <WS2812_Send+0x7a>
	datasentflag = 0;
 8000a18:	4b07      	ldr	r3, [pc, #28]	; (8000a38 <WS2812_Send+0xa4>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	701a      	strb	r2, [r3, #0]
}
 8000a1e:	46c0      	nop			; (mov r8, r8)
 8000a20:	46bd      	mov	sp, r7
 8000a22:	b004      	add	sp, #16
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	46c0      	nop			; (mov r8, r8)
 8000a28:	20000cb0 	.word	0x20000cb0
 8000a2c:	2000016c 	.word	0x2000016c
 8000a30:	000005a1 	.word	0x000005a1
 8000a34:	2000002c 	.word	0x2000002c
 8000a38:	200000d4 	.word	0x200000d4

08000a3c <HSV_Rainbow>:
uint32_t HSV_Rainbow(uint16_t hue)
{
 8000a3c:	b5b0      	push	{r4, r5, r7, lr}
 8000a3e:	b084      	sub	sp, #16
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	0002      	movs	r2, r0
 8000a44:	1dbb      	adds	r3, r7, #6
 8000a46:	801a      	strh	r2, [r3, #0]
	uint8_t r,g,b;
	r=g=b=0;
 8000a48:	210d      	movs	r1, #13
 8000a4a:	187b      	adds	r3, r7, r1
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	701a      	strb	r2, [r3, #0]
 8000a50:	200e      	movs	r0, #14
 8000a52:	183b      	adds	r3, r7, r0
 8000a54:	187a      	adds	r2, r7, r1
 8000a56:	7812      	ldrb	r2, [r2, #0]
 8000a58:	701a      	strb	r2, [r3, #0]
 8000a5a:	230f      	movs	r3, #15
 8000a5c:	18fb      	adds	r3, r7, r3
 8000a5e:	183a      	adds	r2, r7, r0
 8000a60:	7812      	ldrb	r2, [r2, #0]
 8000a62:	701a      	strb	r2, [r3, #0]
	uint16_t i;
	i = hue / 60;
 8000a64:	250a      	movs	r5, #10
 8000a66:	197c      	adds	r4, r7, r5
 8000a68:	1dbb      	adds	r3, r7, #6
 8000a6a:	881b      	ldrh	r3, [r3, #0]
 8000a6c:	213c      	movs	r1, #60	; 0x3c
 8000a6e:	0018      	movs	r0, r3
 8000a70:	f7ff fb48 	bl	8000104 <__udivsi3>
 8000a74:	0003      	movs	r3, r0
 8000a76:	8023      	strh	r3, [r4, #0]
	switch(i)
 8000a78:	197b      	adds	r3, r7, r5
 8000a7a:	881b      	ldrh	r3, [r3, #0]
 8000a7c:	2b05      	cmp	r3, #5
 8000a7e:	d900      	bls.n	8000a82 <HSV_Rainbow+0x46>
 8000a80:	e099      	b.n	8000bb6 <HSV_Rainbow+0x17a>
 8000a82:	009a      	lsls	r2, r3, #2
 8000a84:	4b60      	ldr	r3, [pc, #384]	; (8000c08 <HSV_Rainbow+0x1cc>)
 8000a86:	18d3      	adds	r3, r2, r3
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	469f      	mov	pc, r3
	{
	case 0:
    	r = 255;
 8000a8c:	230f      	movs	r3, #15
 8000a8e:	18fb      	adds	r3, r7, r3
 8000a90:	22ff      	movs	r2, #255	; 0xff
 8000a92:	701a      	strb	r2, [r3, #0]
    	g = hue * 255/60;
 8000a94:	1dbb      	adds	r3, r7, #6
 8000a96:	881a      	ldrh	r2, [r3, #0]
 8000a98:	0013      	movs	r3, r2
 8000a9a:	021b      	lsls	r3, r3, #8
 8000a9c:	1a9b      	subs	r3, r3, r2
 8000a9e:	213c      	movs	r1, #60	; 0x3c
 8000aa0:	0018      	movs	r0, r3
 8000aa2:	f7ff fbb9 	bl	8000218 <__divsi3>
 8000aa6:	0003      	movs	r3, r0
 8000aa8:	001a      	movs	r2, r3
 8000aaa:	230e      	movs	r3, #14
 8000aac:	18fb      	adds	r3, r7, r3
 8000aae:	701a      	strb	r2, [r3, #0]
    	b = 0;
 8000ab0:	230d      	movs	r3, #13
 8000ab2:	18fb      	adds	r3, r7, r3
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	701a      	strb	r2, [r3, #0]
    	break;
 8000ab8:	e07d      	b.n	8000bb6 <HSV_Rainbow+0x17a>
    case 1:
    	r = (120 - hue) * 255 / 60;
 8000aba:	1dbb      	adds	r3, r7, #6
 8000abc:	881b      	ldrh	r3, [r3, #0]
 8000abe:	2278      	movs	r2, #120	; 0x78
 8000ac0:	1ad2      	subs	r2, r2, r3
 8000ac2:	0013      	movs	r3, r2
 8000ac4:	021b      	lsls	r3, r3, #8
 8000ac6:	1a9b      	subs	r3, r3, r2
 8000ac8:	213c      	movs	r1, #60	; 0x3c
 8000aca:	0018      	movs	r0, r3
 8000acc:	f7ff fba4 	bl	8000218 <__divsi3>
 8000ad0:	0003      	movs	r3, r0
 8000ad2:	001a      	movs	r2, r3
 8000ad4:	230f      	movs	r3, #15
 8000ad6:	18fb      	adds	r3, r7, r3
 8000ad8:	701a      	strb	r2, [r3, #0]
    	g = 255;
 8000ada:	230e      	movs	r3, #14
 8000adc:	18fb      	adds	r3, r7, r3
 8000ade:	22ff      	movs	r2, #255	; 0xff
 8000ae0:	701a      	strb	r2, [r3, #0]
    	b = 0;
 8000ae2:	230d      	movs	r3, #13
 8000ae4:	18fb      	adds	r3, r7, r3
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	701a      	strb	r2, [r3, #0]
    	break;
 8000aea:	e064      	b.n	8000bb6 <HSV_Rainbow+0x17a>
    case 2:
    	r = 0;
 8000aec:	230f      	movs	r3, #15
 8000aee:	18fb      	adds	r3, r7, r3
 8000af0:	2200      	movs	r2, #0
 8000af2:	701a      	strb	r2, [r3, #0]
    	g = 255;
 8000af4:	230e      	movs	r3, #14
 8000af6:	18fb      	adds	r3, r7, r3
 8000af8:	22ff      	movs	r2, #255	; 0xff
 8000afa:	701a      	strb	r2, [r3, #0]
    	b = (hue - 120) * 255 / 60;
 8000afc:	1dbb      	adds	r3, r7, #6
 8000afe:	881b      	ldrh	r3, [r3, #0]
 8000b00:	3b78      	subs	r3, #120	; 0x78
 8000b02:	001a      	movs	r2, r3
 8000b04:	0013      	movs	r3, r2
 8000b06:	021b      	lsls	r3, r3, #8
 8000b08:	1a9b      	subs	r3, r3, r2
 8000b0a:	213c      	movs	r1, #60	; 0x3c
 8000b0c:	0018      	movs	r0, r3
 8000b0e:	f7ff fb83 	bl	8000218 <__divsi3>
 8000b12:	0003      	movs	r3, r0
 8000b14:	001a      	movs	r2, r3
 8000b16:	230d      	movs	r3, #13
 8000b18:	18fb      	adds	r3, r7, r3
 8000b1a:	701a      	strb	r2, [r3, #0]
    	break;
 8000b1c:	e04b      	b.n	8000bb6 <HSV_Rainbow+0x17a>
    case 3:
    	r = 0;
 8000b1e:	230f      	movs	r3, #15
 8000b20:	18fb      	adds	r3, r7, r3
 8000b22:	2200      	movs	r2, #0
 8000b24:	701a      	strb	r2, [r3, #0]
    	g = (240 - hue) * 255 / 60;
 8000b26:	1dbb      	adds	r3, r7, #6
 8000b28:	881b      	ldrh	r3, [r3, #0]
 8000b2a:	22f0      	movs	r2, #240	; 0xf0
 8000b2c:	1ad2      	subs	r2, r2, r3
 8000b2e:	0013      	movs	r3, r2
 8000b30:	021b      	lsls	r3, r3, #8
 8000b32:	1a9b      	subs	r3, r3, r2
 8000b34:	213c      	movs	r1, #60	; 0x3c
 8000b36:	0018      	movs	r0, r3
 8000b38:	f7ff fb6e 	bl	8000218 <__divsi3>
 8000b3c:	0003      	movs	r3, r0
 8000b3e:	001a      	movs	r2, r3
 8000b40:	230e      	movs	r3, #14
 8000b42:	18fb      	adds	r3, r7, r3
 8000b44:	701a      	strb	r2, [r3, #0]
    	b = 255;
 8000b46:	230d      	movs	r3, #13
 8000b48:	18fb      	adds	r3, r7, r3
 8000b4a:	22ff      	movs	r2, #255	; 0xff
 8000b4c:	701a      	strb	r2, [r3, #0]
    	break;
 8000b4e:	e032      	b.n	8000bb6 <HSV_Rainbow+0x17a>
    case 4:
    	r = (hue - 240) * 255 / 60;
 8000b50:	1dbb      	adds	r3, r7, #6
 8000b52:	881b      	ldrh	r3, [r3, #0]
 8000b54:	3bf0      	subs	r3, #240	; 0xf0
 8000b56:	001a      	movs	r2, r3
 8000b58:	0013      	movs	r3, r2
 8000b5a:	021b      	lsls	r3, r3, #8
 8000b5c:	1a9b      	subs	r3, r3, r2
 8000b5e:	213c      	movs	r1, #60	; 0x3c
 8000b60:	0018      	movs	r0, r3
 8000b62:	f7ff fb59 	bl	8000218 <__divsi3>
 8000b66:	0003      	movs	r3, r0
 8000b68:	001a      	movs	r2, r3
 8000b6a:	230f      	movs	r3, #15
 8000b6c:	18fb      	adds	r3, r7, r3
 8000b6e:	701a      	strb	r2, [r3, #0]
    	g = 0;
 8000b70:	230e      	movs	r3, #14
 8000b72:	18fb      	adds	r3, r7, r3
 8000b74:	2200      	movs	r2, #0
 8000b76:	701a      	strb	r2, [r3, #0]
    	b = 255;
 8000b78:	230d      	movs	r3, #13
 8000b7a:	18fb      	adds	r3, r7, r3
 8000b7c:	22ff      	movs	r2, #255	; 0xff
 8000b7e:	701a      	strb	r2, [r3, #0]
    	break;
 8000b80:	e019      	b.n	8000bb6 <HSV_Rainbow+0x17a>
    case 5:
    	r = 255;
 8000b82:	230f      	movs	r3, #15
 8000b84:	18fb      	adds	r3, r7, r3
 8000b86:	22ff      	movs	r2, #255	; 0xff
 8000b88:	701a      	strb	r2, [r3, #0]
    	g = 0;
 8000b8a:	230e      	movs	r3, #14
 8000b8c:	18fb      	adds	r3, r7, r3
 8000b8e:	2200      	movs	r2, #0
 8000b90:	701a      	strb	r2, [r3, #0]
    	b = (360 - hue) * 255 / 60;
 8000b92:	1dbb      	adds	r3, r7, #6
 8000b94:	881b      	ldrh	r3, [r3, #0]
 8000b96:	22b4      	movs	r2, #180	; 0xb4
 8000b98:	0052      	lsls	r2, r2, #1
 8000b9a:	1ad2      	subs	r2, r2, r3
 8000b9c:	0013      	movs	r3, r2
 8000b9e:	021b      	lsls	r3, r3, #8
 8000ba0:	1a9b      	subs	r3, r3, r2
 8000ba2:	213c      	movs	r1, #60	; 0x3c
 8000ba4:	0018      	movs	r0, r3
 8000ba6:	f7ff fb37 	bl	8000218 <__divsi3>
 8000baa:	0003      	movs	r3, r0
 8000bac:	001a      	movs	r2, r3
 8000bae:	230d      	movs	r3, #13
 8000bb0:	18fb      	adds	r3, r7, r3
 8000bb2:	701a      	strb	r2, [r3, #0]
    	break;
 8000bb4:	46c0      	nop			; (mov r8, r8)
	}
	r >>= lux;
 8000bb6:	210f      	movs	r1, #15
 8000bb8:	187b      	adds	r3, r7, r1
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	4a13      	ldr	r2, [pc, #76]	; (8000c0c <HSV_Rainbow+0x1d0>)
 8000bbe:	7812      	ldrb	r2, [r2, #0]
 8000bc0:	4113      	asrs	r3, r2
 8000bc2:	001a      	movs	r2, r3
 8000bc4:	187b      	adds	r3, r7, r1
 8000bc6:	701a      	strb	r2, [r3, #0]
	g >>= lux;
 8000bc8:	200e      	movs	r0, #14
 8000bca:	183b      	adds	r3, r7, r0
 8000bcc:	781b      	ldrb	r3, [r3, #0]
 8000bce:	4a0f      	ldr	r2, [pc, #60]	; (8000c0c <HSV_Rainbow+0x1d0>)
 8000bd0:	7812      	ldrb	r2, [r2, #0]
 8000bd2:	4113      	asrs	r3, r2
 8000bd4:	001a      	movs	r2, r3
 8000bd6:	183b      	adds	r3, r7, r0
 8000bd8:	701a      	strb	r2, [r3, #0]
	b >>= lux;
 8000bda:	240d      	movs	r4, #13
 8000bdc:	193b      	adds	r3, r7, r4
 8000bde:	781b      	ldrb	r3, [r3, #0]
 8000be0:	4a0a      	ldr	r2, [pc, #40]	; (8000c0c <HSV_Rainbow+0x1d0>)
 8000be2:	7812      	ldrb	r2, [r2, #0]
 8000be4:	4113      	asrs	r3, r2
 8000be6:	001a      	movs	r2, r3
 8000be8:	193b      	adds	r3, r7, r4
 8000bea:	701a      	strb	r2, [r3, #0]
	return ( (g << 16) | (r << 8) | (b) );
 8000bec:	183b      	adds	r3, r7, r0
 8000bee:	781b      	ldrb	r3, [r3, #0]
 8000bf0:	041a      	lsls	r2, r3, #16
 8000bf2:	187b      	adds	r3, r7, r1
 8000bf4:	781b      	ldrb	r3, [r3, #0]
 8000bf6:	021b      	lsls	r3, r3, #8
 8000bf8:	431a      	orrs	r2, r3
 8000bfa:	193b      	adds	r3, r7, r4
 8000bfc:	781b      	ldrb	r3, [r3, #0]
 8000bfe:	4313      	orrs	r3, r2
}
 8000c00:	0018      	movs	r0, r3
 8000c02:	46bd      	mov	sp, r7
 8000c04:	b004      	add	sp, #16
 8000c06:	bdb0      	pop	{r4, r5, r7, pc}
 8000c08:	080045c8 	.word	0x080045c8
 8000c0c:	200000f0 	.word	0x200000f0

08000c10 <Neon>:
uint32_t Neon(uint16_t hue)
{
 8000c10:	b5b0      	push	{r4, r5, r7, lr}
 8000c12:	b084      	sub	sp, #16
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	0002      	movs	r2, r0
 8000c18:	1dbb      	adds	r3, r7, #6
 8000c1a:	801a      	strh	r2, [r3, #0]
	uint8_t r,g,b;
	r=g=b=0;
 8000c1c:	210d      	movs	r1, #13
 8000c1e:	187b      	adds	r3, r7, r1
 8000c20:	2200      	movs	r2, #0
 8000c22:	701a      	strb	r2, [r3, #0]
 8000c24:	200e      	movs	r0, #14
 8000c26:	183b      	adds	r3, r7, r0
 8000c28:	187a      	adds	r2, r7, r1
 8000c2a:	7812      	ldrb	r2, [r2, #0]
 8000c2c:	701a      	strb	r2, [r3, #0]
 8000c2e:	230f      	movs	r3, #15
 8000c30:	18fb      	adds	r3, r7, r3
 8000c32:	183a      	adds	r2, r7, r0
 8000c34:	7812      	ldrb	r2, [r2, #0]
 8000c36:	701a      	strb	r2, [r3, #0]
	uint16_t i;
	i = hue / 60;
 8000c38:	250a      	movs	r5, #10
 8000c3a:	197c      	adds	r4, r7, r5
 8000c3c:	1dbb      	adds	r3, r7, #6
 8000c3e:	881b      	ldrh	r3, [r3, #0]
 8000c40:	213c      	movs	r1, #60	; 0x3c
 8000c42:	0018      	movs	r0, r3
 8000c44:	f7ff fa5e 	bl	8000104 <__udivsi3>
 8000c48:	0003      	movs	r3, r0
 8000c4a:	8023      	strh	r3, [r4, #0]
	switch(i)
 8000c4c:	197b      	adds	r3, r7, r5
 8000c4e:	881b      	ldrh	r3, [r3, #0]
 8000c50:	2b05      	cmp	r3, #5
 8000c52:	d852      	bhi.n	8000cfa <Neon+0xea>
 8000c54:	009a      	lsls	r2, r3, #2
 8000c56:	4b3d      	ldr	r3, [pc, #244]	; (8000d4c <Neon+0x13c>)
 8000c58:	18d3      	adds	r3, r2, r3
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	469f      	mov	pc, r3
	{
	case 0:
		r = 255;
 8000c5e:	230f      	movs	r3, #15
 8000c60:	18fb      	adds	r3, r7, r3
 8000c62:	22ff      	movs	r2, #255	; 0xff
 8000c64:	701a      	strb	r2, [r3, #0]
		g = 0;
 8000c66:	230e      	movs	r3, #14
 8000c68:	18fb      	adds	r3, r7, r3
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	701a      	strb	r2, [r3, #0]
		b = 0;
 8000c6e:	230d      	movs	r3, #13
 8000c70:	18fb      	adds	r3, r7, r3
 8000c72:	2200      	movs	r2, #0
 8000c74:	701a      	strb	r2, [r3, #0]
	  break;
 8000c76:	e040      	b.n	8000cfa <Neon+0xea>
	case 1:
		r = 255;
 8000c78:	230f      	movs	r3, #15
 8000c7a:	18fb      	adds	r3, r7, r3
 8000c7c:	22ff      	movs	r2, #255	; 0xff
 8000c7e:	701a      	strb	r2, [r3, #0]
		g = 255;
 8000c80:	230e      	movs	r3, #14
 8000c82:	18fb      	adds	r3, r7, r3
 8000c84:	22ff      	movs	r2, #255	; 0xff
 8000c86:	701a      	strb	r2, [r3, #0]
		b = 0;
 8000c88:	230d      	movs	r3, #13
 8000c8a:	18fb      	adds	r3, r7, r3
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	701a      	strb	r2, [r3, #0]
	  break;
 8000c90:	e033      	b.n	8000cfa <Neon+0xea>
	case 2:
		r = 0;
 8000c92:	230f      	movs	r3, #15
 8000c94:	18fb      	adds	r3, r7, r3
 8000c96:	2200      	movs	r2, #0
 8000c98:	701a      	strb	r2, [r3, #0]
		g = 0;
 8000c9a:	230e      	movs	r3, #14
 8000c9c:	18fb      	adds	r3, r7, r3
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	701a      	strb	r2, [r3, #0]
		b = 255;
 8000ca2:	230d      	movs	r3, #13
 8000ca4:	18fb      	adds	r3, r7, r3
 8000ca6:	22ff      	movs	r2, #255	; 0xff
 8000ca8:	701a      	strb	r2, [r3, #0]
	  break;
 8000caa:	e026      	b.n	8000cfa <Neon+0xea>
	case 3:
		r = 128;
 8000cac:	230f      	movs	r3, #15
 8000cae:	18fb      	adds	r3, r7, r3
 8000cb0:	2280      	movs	r2, #128	; 0x80
 8000cb2:	701a      	strb	r2, [r3, #0]
		g = 0;
 8000cb4:	230e      	movs	r3, #14
 8000cb6:	18fb      	adds	r3, r7, r3
 8000cb8:	2200      	movs	r2, #0
 8000cba:	701a      	strb	r2, [r3, #0]
		b = 255;
 8000cbc:	230d      	movs	r3, #13
 8000cbe:	18fb      	adds	r3, r7, r3
 8000cc0:	22ff      	movs	r2, #255	; 0xff
 8000cc2:	701a      	strb	r2, [r3, #0]
	  break;
 8000cc4:	e019      	b.n	8000cfa <Neon+0xea>
	case 4:
		r = 255;
 8000cc6:	230f      	movs	r3, #15
 8000cc8:	18fb      	adds	r3, r7, r3
 8000cca:	22ff      	movs	r2, #255	; 0xff
 8000ccc:	701a      	strb	r2, [r3, #0]
		g = 0;
 8000cce:	230e      	movs	r3, #14
 8000cd0:	18fb      	adds	r3, r7, r3
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	701a      	strb	r2, [r3, #0]
		b = 255;
 8000cd6:	230d      	movs	r3, #13
 8000cd8:	18fb      	adds	r3, r7, r3
 8000cda:	22ff      	movs	r2, #255	; 0xff
 8000cdc:	701a      	strb	r2, [r3, #0]
	  break;
 8000cde:	e00c      	b.n	8000cfa <Neon+0xea>
	case 5:
		r = 255;
 8000ce0:	230f      	movs	r3, #15
 8000ce2:	18fb      	adds	r3, r7, r3
 8000ce4:	22ff      	movs	r2, #255	; 0xff
 8000ce6:	701a      	strb	r2, [r3, #0]
		g = 0;
 8000ce8:	230e      	movs	r3, #14
 8000cea:	18fb      	adds	r3, r7, r3
 8000cec:	2200      	movs	r2, #0
 8000cee:	701a      	strb	r2, [r3, #0]
		b = 128;
 8000cf0:	230d      	movs	r3, #13
 8000cf2:	18fb      	adds	r3, r7, r3
 8000cf4:	2280      	movs	r2, #128	; 0x80
 8000cf6:	701a      	strb	r2, [r3, #0]
	  break;
 8000cf8:	46c0      	nop			; (mov r8, r8)
	}
	r >>= lux;
 8000cfa:	210f      	movs	r1, #15
 8000cfc:	187b      	adds	r3, r7, r1
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	4a13      	ldr	r2, [pc, #76]	; (8000d50 <Neon+0x140>)
 8000d02:	7812      	ldrb	r2, [r2, #0]
 8000d04:	4113      	asrs	r3, r2
 8000d06:	001a      	movs	r2, r3
 8000d08:	187b      	adds	r3, r7, r1
 8000d0a:	701a      	strb	r2, [r3, #0]
	g >>= lux;
 8000d0c:	200e      	movs	r0, #14
 8000d0e:	183b      	adds	r3, r7, r0
 8000d10:	781b      	ldrb	r3, [r3, #0]
 8000d12:	4a0f      	ldr	r2, [pc, #60]	; (8000d50 <Neon+0x140>)
 8000d14:	7812      	ldrb	r2, [r2, #0]
 8000d16:	4113      	asrs	r3, r2
 8000d18:	001a      	movs	r2, r3
 8000d1a:	183b      	adds	r3, r7, r0
 8000d1c:	701a      	strb	r2, [r3, #0]
	b >>= lux;
 8000d1e:	240d      	movs	r4, #13
 8000d20:	193b      	adds	r3, r7, r4
 8000d22:	781b      	ldrb	r3, [r3, #0]
 8000d24:	4a0a      	ldr	r2, [pc, #40]	; (8000d50 <Neon+0x140>)
 8000d26:	7812      	ldrb	r2, [r2, #0]
 8000d28:	4113      	asrs	r3, r2
 8000d2a:	001a      	movs	r2, r3
 8000d2c:	193b      	adds	r3, r7, r4
 8000d2e:	701a      	strb	r2, [r3, #0]
	return ( (g << 16) | (r << 8) | (b) );
 8000d30:	183b      	adds	r3, r7, r0
 8000d32:	781b      	ldrb	r3, [r3, #0]
 8000d34:	041a      	lsls	r2, r3, #16
 8000d36:	187b      	adds	r3, r7, r1
 8000d38:	781b      	ldrb	r3, [r3, #0]
 8000d3a:	021b      	lsls	r3, r3, #8
 8000d3c:	431a      	orrs	r2, r3
 8000d3e:	193b      	adds	r3, r7, r4
 8000d40:	781b      	ldrb	r3, [r3, #0]
 8000d42:	4313      	orrs	r3, r2
}
 8000d44:	0018      	movs	r0, r3
 8000d46:	46bd      	mov	sp, r7
 8000d48:	b004      	add	sp, #16
 8000d4a:	bdb0      	pop	{r4, r5, r7, pc}
 8000d4c:	080045e0 	.word	0x080045e0
 8000d50:	200000f0 	.word	0x200000f0

08000d54 <Cranberry>:
uint32_t Cranberry(uint16_t hue)
{
 8000d54:	b5b0      	push	{r4, r5, r7, lr}
 8000d56:	b084      	sub	sp, #16
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	0002      	movs	r2, r0
 8000d5c:	1dbb      	adds	r3, r7, #6
 8000d5e:	801a      	strh	r2, [r3, #0]
	uint8_t r,g,b;
	r=g=b=0;
 8000d60:	210d      	movs	r1, #13
 8000d62:	187b      	adds	r3, r7, r1
 8000d64:	2200      	movs	r2, #0
 8000d66:	701a      	strb	r2, [r3, #0]
 8000d68:	200e      	movs	r0, #14
 8000d6a:	183b      	adds	r3, r7, r0
 8000d6c:	187a      	adds	r2, r7, r1
 8000d6e:	7812      	ldrb	r2, [r2, #0]
 8000d70:	701a      	strb	r2, [r3, #0]
 8000d72:	230f      	movs	r3, #15
 8000d74:	18fb      	adds	r3, r7, r3
 8000d76:	183a      	adds	r2, r7, r0
 8000d78:	7812      	ldrb	r2, [r2, #0]
 8000d7a:	701a      	strb	r2, [r3, #0]
	uint16_t i;
	i = hue / 60;
 8000d7c:	250a      	movs	r5, #10
 8000d7e:	197c      	adds	r4, r7, r5
 8000d80:	1dbb      	adds	r3, r7, #6
 8000d82:	881b      	ldrh	r3, [r3, #0]
 8000d84:	213c      	movs	r1, #60	; 0x3c
 8000d86:	0018      	movs	r0, r3
 8000d88:	f7ff f9bc 	bl	8000104 <__udivsi3>
 8000d8c:	0003      	movs	r3, r0
 8000d8e:	8023      	strh	r3, [r4, #0]
	switch(i)
 8000d90:	197b      	adds	r3, r7, r5
 8000d92:	881b      	ldrh	r3, [r3, #0]
 8000d94:	2b05      	cmp	r3, #5
 8000d96:	d852      	bhi.n	8000e3e <Cranberry+0xea>
 8000d98:	009a      	lsls	r2, r3, #2
 8000d9a:	4b3d      	ldr	r3, [pc, #244]	; (8000e90 <Cranberry+0x13c>)
 8000d9c:	18d3      	adds	r3, r2, r3
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	469f      	mov	pc, r3
	{
	case 0:
    	r = 255;
 8000da2:	230f      	movs	r3, #15
 8000da4:	18fb      	adds	r3, r7, r3
 8000da6:	22ff      	movs	r2, #255	; 0xff
 8000da8:	701a      	strb	r2, [r3, #0]
    	g = 0;
 8000daa:	230e      	movs	r3, #14
 8000dac:	18fb      	adds	r3, r7, r3
 8000dae:	2200      	movs	r2, #0
 8000db0:	701a      	strb	r2, [r3, #0]
    	b = 0;
 8000db2:	230d      	movs	r3, #13
 8000db4:	18fb      	adds	r3, r7, r3
 8000db6:	2200      	movs	r2, #0
 8000db8:	701a      	strb	r2, [r3, #0]
    	break;
 8000dba:	e040      	b.n	8000e3e <Cranberry+0xea>
    case 1:
    	r = 255;
 8000dbc:	230f      	movs	r3, #15
 8000dbe:	18fb      	adds	r3, r7, r3
 8000dc0:	22ff      	movs	r2, #255	; 0xff
 8000dc2:	701a      	strb	r2, [r3, #0]
    	g = 64;
 8000dc4:	230e      	movs	r3, #14
 8000dc6:	18fb      	adds	r3, r7, r3
 8000dc8:	2240      	movs	r2, #64	; 0x40
 8000dca:	701a      	strb	r2, [r3, #0]
    	b = 0;
 8000dcc:	230d      	movs	r3, #13
 8000dce:	18fb      	adds	r3, r7, r3
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	701a      	strb	r2, [r3, #0]
    	break;
 8000dd4:	e033      	b.n	8000e3e <Cranberry+0xea>
    case 2:
    	r = 255;
 8000dd6:	230f      	movs	r3, #15
 8000dd8:	18fb      	adds	r3, r7, r3
 8000dda:	22ff      	movs	r2, #255	; 0xff
 8000ddc:	701a      	strb	r2, [r3, #0]
    	g = 128;
 8000dde:	230e      	movs	r3, #14
 8000de0:	18fb      	adds	r3, r7, r3
 8000de2:	2280      	movs	r2, #128	; 0x80
 8000de4:	701a      	strb	r2, [r3, #0]
    	b = 0;
 8000de6:	230d      	movs	r3, #13
 8000de8:	18fb      	adds	r3, r7, r3
 8000dea:	2200      	movs	r2, #0
 8000dec:	701a      	strb	r2, [r3, #0]
    	break;
 8000dee:	e026      	b.n	8000e3e <Cranberry+0xea>
    case 3:
    	r = 255;
 8000df0:	230f      	movs	r3, #15
 8000df2:	18fb      	adds	r3, r7, r3
 8000df4:	22ff      	movs	r2, #255	; 0xff
 8000df6:	701a      	strb	r2, [r3, #0]
    	g = 64;
 8000df8:	230e      	movs	r3, #14
 8000dfa:	18fb      	adds	r3, r7, r3
 8000dfc:	2240      	movs	r2, #64	; 0x40
 8000dfe:	701a      	strb	r2, [r3, #0]
    	b = 0;
 8000e00:	230d      	movs	r3, #13
 8000e02:	18fb      	adds	r3, r7, r3
 8000e04:	2200      	movs	r2, #0
 8000e06:	701a      	strb	r2, [r3, #0]
    	break;
 8000e08:	e019      	b.n	8000e3e <Cranberry+0xea>
    case 4:
    	r = 255;
 8000e0a:	230f      	movs	r3, #15
 8000e0c:	18fb      	adds	r3, r7, r3
 8000e0e:	22ff      	movs	r2, #255	; 0xff
 8000e10:	701a      	strb	r2, [r3, #0]
    	g = 0;
 8000e12:	230e      	movs	r3, #14
 8000e14:	18fb      	adds	r3, r7, r3
 8000e16:	2200      	movs	r2, #0
 8000e18:	701a      	strb	r2, [r3, #0]
    	b = 64;
 8000e1a:	230d      	movs	r3, #13
 8000e1c:	18fb      	adds	r3, r7, r3
 8000e1e:	2240      	movs	r2, #64	; 0x40
 8000e20:	701a      	strb	r2, [r3, #0]
    	break;
 8000e22:	e00c      	b.n	8000e3e <Cranberry+0xea>
    case 5:
    	r = 255;
 8000e24:	230f      	movs	r3, #15
 8000e26:	18fb      	adds	r3, r7, r3
 8000e28:	22ff      	movs	r2, #255	; 0xff
 8000e2a:	701a      	strb	r2, [r3, #0]
    	g = 0;
 8000e2c:	230e      	movs	r3, #14
 8000e2e:	18fb      	adds	r3, r7, r3
 8000e30:	2200      	movs	r2, #0
 8000e32:	701a      	strb	r2, [r3, #0]
    	b = 100;
 8000e34:	230d      	movs	r3, #13
 8000e36:	18fb      	adds	r3, r7, r3
 8000e38:	2264      	movs	r2, #100	; 0x64
 8000e3a:	701a      	strb	r2, [r3, #0]
    	break;
 8000e3c:	46c0      	nop			; (mov r8, r8)
	}
	r >>= lux;
 8000e3e:	210f      	movs	r1, #15
 8000e40:	187b      	adds	r3, r7, r1
 8000e42:	781b      	ldrb	r3, [r3, #0]
 8000e44:	4a13      	ldr	r2, [pc, #76]	; (8000e94 <Cranberry+0x140>)
 8000e46:	7812      	ldrb	r2, [r2, #0]
 8000e48:	4113      	asrs	r3, r2
 8000e4a:	001a      	movs	r2, r3
 8000e4c:	187b      	adds	r3, r7, r1
 8000e4e:	701a      	strb	r2, [r3, #0]
	g >>= lux;
 8000e50:	200e      	movs	r0, #14
 8000e52:	183b      	adds	r3, r7, r0
 8000e54:	781b      	ldrb	r3, [r3, #0]
 8000e56:	4a0f      	ldr	r2, [pc, #60]	; (8000e94 <Cranberry+0x140>)
 8000e58:	7812      	ldrb	r2, [r2, #0]
 8000e5a:	4113      	asrs	r3, r2
 8000e5c:	001a      	movs	r2, r3
 8000e5e:	183b      	adds	r3, r7, r0
 8000e60:	701a      	strb	r2, [r3, #0]
	b >>= lux;
 8000e62:	240d      	movs	r4, #13
 8000e64:	193b      	adds	r3, r7, r4
 8000e66:	781b      	ldrb	r3, [r3, #0]
 8000e68:	4a0a      	ldr	r2, [pc, #40]	; (8000e94 <Cranberry+0x140>)
 8000e6a:	7812      	ldrb	r2, [r2, #0]
 8000e6c:	4113      	asrs	r3, r2
 8000e6e:	001a      	movs	r2, r3
 8000e70:	193b      	adds	r3, r7, r4
 8000e72:	701a      	strb	r2, [r3, #0]
	return ( (g << 16) | (r << 8) | (b) );
 8000e74:	183b      	adds	r3, r7, r0
 8000e76:	781b      	ldrb	r3, [r3, #0]
 8000e78:	041a      	lsls	r2, r3, #16
 8000e7a:	187b      	adds	r3, r7, r1
 8000e7c:	781b      	ldrb	r3, [r3, #0]
 8000e7e:	021b      	lsls	r3, r3, #8
 8000e80:	431a      	orrs	r2, r3
 8000e82:	193b      	adds	r3, r7, r4
 8000e84:	781b      	ldrb	r3, [r3, #0]
 8000e86:	4313      	orrs	r3, r2
}
 8000e88:	0018      	movs	r0, r3
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	b004      	add	sp, #16
 8000e8e:	bdb0      	pop	{r4, r5, r7, pc}
 8000e90:	080045f8 	.word	0x080045f8
 8000e94:	200000f0 	.word	0x200000f0

08000e98 <Blueberry>:
uint32_t Blueberry(uint16_t hue)
{
 8000e98:	b5b0      	push	{r4, r5, r7, lr}
 8000e9a:	b084      	sub	sp, #16
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	0002      	movs	r2, r0
 8000ea0:	1dbb      	adds	r3, r7, #6
 8000ea2:	801a      	strh	r2, [r3, #0]
	uint8_t r,g,b;
	r=g=b=0;
 8000ea4:	210d      	movs	r1, #13
 8000ea6:	187b      	adds	r3, r7, r1
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	701a      	strb	r2, [r3, #0]
 8000eac:	200e      	movs	r0, #14
 8000eae:	183b      	adds	r3, r7, r0
 8000eb0:	187a      	adds	r2, r7, r1
 8000eb2:	7812      	ldrb	r2, [r2, #0]
 8000eb4:	701a      	strb	r2, [r3, #0]
 8000eb6:	230f      	movs	r3, #15
 8000eb8:	18fb      	adds	r3, r7, r3
 8000eba:	183a      	adds	r2, r7, r0
 8000ebc:	7812      	ldrb	r2, [r2, #0]
 8000ebe:	701a      	strb	r2, [r3, #0]
	uint16_t i;
	i = hue / 60;
 8000ec0:	250a      	movs	r5, #10
 8000ec2:	197c      	adds	r4, r7, r5
 8000ec4:	1dbb      	adds	r3, r7, #6
 8000ec6:	881b      	ldrh	r3, [r3, #0]
 8000ec8:	213c      	movs	r1, #60	; 0x3c
 8000eca:	0018      	movs	r0, r3
 8000ecc:	f7ff f91a 	bl	8000104 <__udivsi3>
 8000ed0:	0003      	movs	r3, r0
 8000ed2:	8023      	strh	r3, [r4, #0]
	switch(i)
 8000ed4:	197b      	adds	r3, r7, r5
 8000ed6:	881b      	ldrh	r3, [r3, #0]
 8000ed8:	2b05      	cmp	r3, #5
 8000eda:	d852      	bhi.n	8000f82 <Blueberry+0xea>
 8000edc:	009a      	lsls	r2, r3, #2
 8000ede:	4b3d      	ldr	r3, [pc, #244]	; (8000fd4 <Blueberry+0x13c>)
 8000ee0:	18d3      	adds	r3, r2, r3
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	469f      	mov	pc, r3
	{
	case 0:
    	r = 0;
 8000ee6:	230f      	movs	r3, #15
 8000ee8:	18fb      	adds	r3, r7, r3
 8000eea:	2200      	movs	r2, #0
 8000eec:	701a      	strb	r2, [r3, #0]
    	g = 0;
 8000eee:	230e      	movs	r3, #14
 8000ef0:	18fb      	adds	r3, r7, r3
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	701a      	strb	r2, [r3, #0]
    	b = 255;
 8000ef6:	230d      	movs	r3, #13
 8000ef8:	18fb      	adds	r3, r7, r3
 8000efa:	22ff      	movs	r2, #255	; 0xff
 8000efc:	701a      	strb	r2, [r3, #0]
    	break;
 8000efe:	e040      	b.n	8000f82 <Blueberry+0xea>
    case 1:
    	r = 128;
 8000f00:	230f      	movs	r3, #15
 8000f02:	18fb      	adds	r3, r7, r3
 8000f04:	2280      	movs	r2, #128	; 0x80
 8000f06:	701a      	strb	r2, [r3, #0]
    	g = 0;
 8000f08:	230e      	movs	r3, #14
 8000f0a:	18fb      	adds	r3, r7, r3
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	701a      	strb	r2, [r3, #0]
    	b = 255;
 8000f10:	230d      	movs	r3, #13
 8000f12:	18fb      	adds	r3, r7, r3
 8000f14:	22ff      	movs	r2, #255	; 0xff
 8000f16:	701a      	strb	r2, [r3, #0]
      break;
 8000f18:	e033      	b.n	8000f82 <Blueberry+0xea>
    case 2:
    	r = 192;
 8000f1a:	230f      	movs	r3, #15
 8000f1c:	18fb      	adds	r3, r7, r3
 8000f1e:	22c0      	movs	r2, #192	; 0xc0
 8000f20:	701a      	strb	r2, [r3, #0]
    	g = 0;
 8000f22:	230e      	movs	r3, #14
 8000f24:	18fb      	adds	r3, r7, r3
 8000f26:	2200      	movs	r2, #0
 8000f28:	701a      	strb	r2, [r3, #0]
    	b = 255;
 8000f2a:	230d      	movs	r3, #13
 8000f2c:	18fb      	adds	r3, r7, r3
 8000f2e:	22ff      	movs	r2, #255	; 0xff
 8000f30:	701a      	strb	r2, [r3, #0]
    	break;
 8000f32:	e026      	b.n	8000f82 <Blueberry+0xea>
    case 3:
    	r = 0;
 8000f34:	230f      	movs	r3, #15
 8000f36:	18fb      	adds	r3, r7, r3
 8000f38:	2200      	movs	r2, #0
 8000f3a:	701a      	strb	r2, [r3, #0]
    	g = 128;
 8000f3c:	230e      	movs	r3, #14
 8000f3e:	18fb      	adds	r3, r7, r3
 8000f40:	2280      	movs	r2, #128	; 0x80
 8000f42:	701a      	strb	r2, [r3, #0]
    	b = 255;
 8000f44:	230d      	movs	r3, #13
 8000f46:	18fb      	adds	r3, r7, r3
 8000f48:	22ff      	movs	r2, #255	; 0xff
 8000f4a:	701a      	strb	r2, [r3, #0]
    	break;
 8000f4c:	e019      	b.n	8000f82 <Blueberry+0xea>
    case 4:
    	r = 0;
 8000f4e:	230f      	movs	r3, #15
 8000f50:	18fb      	adds	r3, r7, r3
 8000f52:	2200      	movs	r2, #0
 8000f54:	701a      	strb	r2, [r3, #0]
    	g = 192;
 8000f56:	230e      	movs	r3, #14
 8000f58:	18fb      	adds	r3, r7, r3
 8000f5a:	22c0      	movs	r2, #192	; 0xc0
 8000f5c:	701a      	strb	r2, [r3, #0]
    	b = 255;
 8000f5e:	230d      	movs	r3, #13
 8000f60:	18fb      	adds	r3, r7, r3
 8000f62:	22ff      	movs	r2, #255	; 0xff
 8000f64:	701a      	strb	r2, [r3, #0]
    	break;
 8000f66:	e00c      	b.n	8000f82 <Blueberry+0xea>
    case 5:
    	r = 0;
 8000f68:	230f      	movs	r3, #15
 8000f6a:	18fb      	adds	r3, r7, r3
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	701a      	strb	r2, [r3, #0]
    	g = 32;
 8000f70:	230e      	movs	r3, #14
 8000f72:	18fb      	adds	r3, r7, r3
 8000f74:	2220      	movs	r2, #32
 8000f76:	701a      	strb	r2, [r3, #0]
    	b = 255;
 8000f78:	230d      	movs	r3, #13
 8000f7a:	18fb      	adds	r3, r7, r3
 8000f7c:	22ff      	movs	r2, #255	; 0xff
 8000f7e:	701a      	strb	r2, [r3, #0]
    	break;
 8000f80:	46c0      	nop			; (mov r8, r8)
	}
	r >>= lux;
 8000f82:	210f      	movs	r1, #15
 8000f84:	187b      	adds	r3, r7, r1
 8000f86:	781b      	ldrb	r3, [r3, #0]
 8000f88:	4a13      	ldr	r2, [pc, #76]	; (8000fd8 <Blueberry+0x140>)
 8000f8a:	7812      	ldrb	r2, [r2, #0]
 8000f8c:	4113      	asrs	r3, r2
 8000f8e:	001a      	movs	r2, r3
 8000f90:	187b      	adds	r3, r7, r1
 8000f92:	701a      	strb	r2, [r3, #0]
	g >>= lux;
 8000f94:	200e      	movs	r0, #14
 8000f96:	183b      	adds	r3, r7, r0
 8000f98:	781b      	ldrb	r3, [r3, #0]
 8000f9a:	4a0f      	ldr	r2, [pc, #60]	; (8000fd8 <Blueberry+0x140>)
 8000f9c:	7812      	ldrb	r2, [r2, #0]
 8000f9e:	4113      	asrs	r3, r2
 8000fa0:	001a      	movs	r2, r3
 8000fa2:	183b      	adds	r3, r7, r0
 8000fa4:	701a      	strb	r2, [r3, #0]
	b >>= lux;
 8000fa6:	240d      	movs	r4, #13
 8000fa8:	193b      	adds	r3, r7, r4
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	4a0a      	ldr	r2, [pc, #40]	; (8000fd8 <Blueberry+0x140>)
 8000fae:	7812      	ldrb	r2, [r2, #0]
 8000fb0:	4113      	asrs	r3, r2
 8000fb2:	001a      	movs	r2, r3
 8000fb4:	193b      	adds	r3, r7, r4
 8000fb6:	701a      	strb	r2, [r3, #0]
	return ( (g << 16) | (r << 8) | (b) );
 8000fb8:	183b      	adds	r3, r7, r0
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	041a      	lsls	r2, r3, #16
 8000fbe:	187b      	adds	r3, r7, r1
 8000fc0:	781b      	ldrb	r3, [r3, #0]
 8000fc2:	021b      	lsls	r3, r3, #8
 8000fc4:	431a      	orrs	r2, r3
 8000fc6:	193b      	adds	r3, r7, r4
 8000fc8:	781b      	ldrb	r3, [r3, #0]
 8000fca:	4313      	orrs	r3, r2
}
 8000fcc:	0018      	movs	r0, r3
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	b004      	add	sp, #16
 8000fd2:	bdb0      	pop	{r4, r5, r7, pc}
 8000fd4:	08004610 	.word	0x08004610
 8000fd8:	200000f0 	.word	0x200000f0

08000fdc <Muscat>:
uint32_t Muscat(uint16_t hue)
{
 8000fdc:	b5b0      	push	{r4, r5, r7, lr}
 8000fde:	b084      	sub	sp, #16
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	0002      	movs	r2, r0
 8000fe4:	1dbb      	adds	r3, r7, #6
 8000fe6:	801a      	strh	r2, [r3, #0]
	uint8_t r,g,b;
	r=g=b=0;
 8000fe8:	210d      	movs	r1, #13
 8000fea:	187b      	adds	r3, r7, r1
 8000fec:	2200      	movs	r2, #0
 8000fee:	701a      	strb	r2, [r3, #0]
 8000ff0:	200e      	movs	r0, #14
 8000ff2:	183b      	adds	r3, r7, r0
 8000ff4:	187a      	adds	r2, r7, r1
 8000ff6:	7812      	ldrb	r2, [r2, #0]
 8000ff8:	701a      	strb	r2, [r3, #0]
 8000ffa:	230f      	movs	r3, #15
 8000ffc:	18fb      	adds	r3, r7, r3
 8000ffe:	183a      	adds	r2, r7, r0
 8001000:	7812      	ldrb	r2, [r2, #0]
 8001002:	701a      	strb	r2, [r3, #0]
	uint16_t i;
	i = hue / 60;
 8001004:	250a      	movs	r5, #10
 8001006:	197c      	adds	r4, r7, r5
 8001008:	1dbb      	adds	r3, r7, #6
 800100a:	881b      	ldrh	r3, [r3, #0]
 800100c:	213c      	movs	r1, #60	; 0x3c
 800100e:	0018      	movs	r0, r3
 8001010:	f7ff f878 	bl	8000104 <__udivsi3>
 8001014:	0003      	movs	r3, r0
 8001016:	8023      	strh	r3, [r4, #0]
	switch(i)
 8001018:	197b      	adds	r3, r7, r5
 800101a:	881b      	ldrh	r3, [r3, #0]
 800101c:	2b05      	cmp	r3, #5
 800101e:	d852      	bhi.n	80010c6 <Muscat+0xea>
 8001020:	009a      	lsls	r2, r3, #2
 8001022:	4b3d      	ldr	r3, [pc, #244]	; (8001118 <Muscat+0x13c>)
 8001024:	18d3      	adds	r3, r2, r3
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	469f      	mov	pc, r3
	{
	case 0:
    	r = 0;
 800102a:	230f      	movs	r3, #15
 800102c:	18fb      	adds	r3, r7, r3
 800102e:	2200      	movs	r2, #0
 8001030:	701a      	strb	r2, [r3, #0]
    	g = 255;
 8001032:	230e      	movs	r3, #14
 8001034:	18fb      	adds	r3, r7, r3
 8001036:	22ff      	movs	r2, #255	; 0xff
 8001038:	701a      	strb	r2, [r3, #0]
    	b = 0;
 800103a:	230d      	movs	r3, #13
 800103c:	18fb      	adds	r3, r7, r3
 800103e:	2200      	movs	r2, #0
 8001040:	701a      	strb	r2, [r3, #0]
    	break;
 8001042:	e040      	b.n	80010c6 <Muscat+0xea>
    case 1:
    	r = 0;
 8001044:	230f      	movs	r3, #15
 8001046:	18fb      	adds	r3, r7, r3
 8001048:	2200      	movs	r2, #0
 800104a:	701a      	strb	r2, [r3, #0]
    	g = 255;
 800104c:	230e      	movs	r3, #14
 800104e:	18fb      	adds	r3, r7, r3
 8001050:	22ff      	movs	r2, #255	; 0xff
 8001052:	701a      	strb	r2, [r3, #0]
    	b = 64;
 8001054:	230d      	movs	r3, #13
 8001056:	18fb      	adds	r3, r7, r3
 8001058:	2240      	movs	r2, #64	; 0x40
 800105a:	701a      	strb	r2, [r3, #0]
    	break;
 800105c:	e033      	b.n	80010c6 <Muscat+0xea>
    case 2:
    	r = 0;
 800105e:	230f      	movs	r3, #15
 8001060:	18fb      	adds	r3, r7, r3
 8001062:	2200      	movs	r2, #0
 8001064:	701a      	strb	r2, [r3, #0]
    	g = 255;
 8001066:	230e      	movs	r3, #14
 8001068:	18fb      	adds	r3, r7, r3
 800106a:	22ff      	movs	r2, #255	; 0xff
 800106c:	701a      	strb	r2, [r3, #0]
    	b = 128;
 800106e:	230d      	movs	r3, #13
 8001070:	18fb      	adds	r3, r7, r3
 8001072:	2280      	movs	r2, #128	; 0x80
 8001074:	701a      	strb	r2, [r3, #0]
      break;
 8001076:	e026      	b.n	80010c6 <Muscat+0xea>
    case 3:
    	r = 64;
 8001078:	230f      	movs	r3, #15
 800107a:	18fb      	adds	r3, r7, r3
 800107c:	2240      	movs	r2, #64	; 0x40
 800107e:	701a      	strb	r2, [r3, #0]
    	g = 255;
 8001080:	230e      	movs	r3, #14
 8001082:	18fb      	adds	r3, r7, r3
 8001084:	22ff      	movs	r2, #255	; 0xff
 8001086:	701a      	strb	r2, [r3, #0]
    	b = 0;
 8001088:	230d      	movs	r3, #13
 800108a:	18fb      	adds	r3, r7, r3
 800108c:	2200      	movs	r2, #0
 800108e:	701a      	strb	r2, [r3, #0]
    	break;
 8001090:	e019      	b.n	80010c6 <Muscat+0xea>
    case 4:
    	r = 128;
 8001092:	230f      	movs	r3, #15
 8001094:	18fb      	adds	r3, r7, r3
 8001096:	2280      	movs	r2, #128	; 0x80
 8001098:	701a      	strb	r2, [r3, #0]
    	g = 255;
 800109a:	230e      	movs	r3, #14
 800109c:	18fb      	adds	r3, r7, r3
 800109e:	22ff      	movs	r2, #255	; 0xff
 80010a0:	701a      	strb	r2, [r3, #0]
    	b = 0;
 80010a2:	230d      	movs	r3, #13
 80010a4:	18fb      	adds	r3, r7, r3
 80010a6:	2200      	movs	r2, #0
 80010a8:	701a      	strb	r2, [r3, #0]
    	break;
 80010aa:	e00c      	b.n	80010c6 <Muscat+0xea>
    case 5:
    	r = 0;
 80010ac:	230f      	movs	r3, #15
 80010ae:	18fb      	adds	r3, r7, r3
 80010b0:	2200      	movs	r2, #0
 80010b2:	701a      	strb	r2, [r3, #0]
    	g = 255;
 80010b4:	230e      	movs	r3, #14
 80010b6:	18fb      	adds	r3, r7, r3
 80010b8:	22ff      	movs	r2, #255	; 0xff
 80010ba:	701a      	strb	r2, [r3, #0]
    	b = 0;
 80010bc:	230d      	movs	r3, #13
 80010be:	18fb      	adds	r3, r7, r3
 80010c0:	2200      	movs	r2, #0
 80010c2:	701a      	strb	r2, [r3, #0]
    	break;
 80010c4:	46c0      	nop			; (mov r8, r8)
	}
	r >>= lux;
 80010c6:	210f      	movs	r1, #15
 80010c8:	187b      	adds	r3, r7, r1
 80010ca:	781b      	ldrb	r3, [r3, #0]
 80010cc:	4a13      	ldr	r2, [pc, #76]	; (800111c <Muscat+0x140>)
 80010ce:	7812      	ldrb	r2, [r2, #0]
 80010d0:	4113      	asrs	r3, r2
 80010d2:	001a      	movs	r2, r3
 80010d4:	187b      	adds	r3, r7, r1
 80010d6:	701a      	strb	r2, [r3, #0]
	g >>= lux;
 80010d8:	200e      	movs	r0, #14
 80010da:	183b      	adds	r3, r7, r0
 80010dc:	781b      	ldrb	r3, [r3, #0]
 80010de:	4a0f      	ldr	r2, [pc, #60]	; (800111c <Muscat+0x140>)
 80010e0:	7812      	ldrb	r2, [r2, #0]
 80010e2:	4113      	asrs	r3, r2
 80010e4:	001a      	movs	r2, r3
 80010e6:	183b      	adds	r3, r7, r0
 80010e8:	701a      	strb	r2, [r3, #0]
	b >>= lux;
 80010ea:	240d      	movs	r4, #13
 80010ec:	193b      	adds	r3, r7, r4
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	4a0a      	ldr	r2, [pc, #40]	; (800111c <Muscat+0x140>)
 80010f2:	7812      	ldrb	r2, [r2, #0]
 80010f4:	4113      	asrs	r3, r2
 80010f6:	001a      	movs	r2, r3
 80010f8:	193b      	adds	r3, r7, r4
 80010fa:	701a      	strb	r2, [r3, #0]
	return ( (g << 16) | (r << 8) | (b) );
 80010fc:	183b      	adds	r3, r7, r0
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	041a      	lsls	r2, r3, #16
 8001102:	187b      	adds	r3, r7, r1
 8001104:	781b      	ldrb	r3, [r3, #0]
 8001106:	021b      	lsls	r3, r3, #8
 8001108:	431a      	orrs	r2, r3
 800110a:	193b      	adds	r3, r7, r4
 800110c:	781b      	ldrb	r3, [r3, #0]
 800110e:	4313      	orrs	r3, r2
}
 8001110:	0018      	movs	r0, r3
 8001112:	46bd      	mov	sp, r7
 8001114:	b004      	add	sp, #16
 8001116:	bdb0      	pop	{r4, r5, r7, pc}
 8001118:	08004628 	.word	0x08004628
 800111c:	200000f0 	.word	0x200000f0

08001120 <HSV_Pastel>:
uint32_t HSV_Pastel(uint16_t hue)
{
 8001120:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001122:	b085      	sub	sp, #20
 8001124:	af00      	add	r7, sp, #0
 8001126:	0002      	movs	r2, r0
 8001128:	1dbb      	adds	r3, r7, #6
 800112a:	801a      	strh	r2, [r3, #0]
	uint8_t r,g,b;
	r=g=b=0;
 800112c:	210d      	movs	r1, #13
 800112e:	187b      	adds	r3, r7, r1
 8001130:	2200      	movs	r2, #0
 8001132:	701a      	strb	r2, [r3, #0]
 8001134:	200e      	movs	r0, #14
 8001136:	183b      	adds	r3, r7, r0
 8001138:	187a      	adds	r2, r7, r1
 800113a:	7812      	ldrb	r2, [r2, #0]
 800113c:	701a      	strb	r2, [r3, #0]
 800113e:	230f      	movs	r3, #15
 8001140:	18fb      	adds	r3, r7, r3
 8001142:	183a      	adds	r2, r7, r0
 8001144:	7812      	ldrb	r2, [r2, #0]
 8001146:	701a      	strb	r2, [r3, #0]

	hue *= 2;
 8001148:	1dba      	adds	r2, r7, #6
 800114a:	1dbb      	adds	r3, r7, #6
 800114c:	881b      	ldrh	r3, [r3, #0]
 800114e:	18db      	adds	r3, r3, r3
 8001150:	8013      	strh	r3, [r2, #0]
	if(hue >= 360) hue -= 360;
 8001152:	1dbb      	adds	r3, r7, #6
 8001154:	881a      	ldrh	r2, [r3, #0]
 8001156:	23b4      	movs	r3, #180	; 0xb4
 8001158:	005b      	lsls	r3, r3, #1
 800115a:	429a      	cmp	r2, r3
 800115c:	d305      	bcc.n	800116a <HSV_Pastel+0x4a>
 800115e:	1dbb      	adds	r3, r7, #6
 8001160:	1dba      	adds	r2, r7, #6
 8001162:	8812      	ldrh	r2, [r2, #0]
 8001164:	3a69      	subs	r2, #105	; 0x69
 8001166:	3aff      	subs	r2, #255	; 0xff
 8001168:	801a      	strh	r2, [r3, #0]
	uint16_t i;
	i = hue / 60;
 800116a:	250a      	movs	r5, #10
 800116c:	197c      	adds	r4, r7, r5
 800116e:	1dbb      	adds	r3, r7, #6
 8001170:	881b      	ldrh	r3, [r3, #0]
 8001172:	213c      	movs	r1, #60	; 0x3c
 8001174:	0018      	movs	r0, r3
 8001176:	f7fe ffc5 	bl	8000104 <__udivsi3>
 800117a:	0003      	movs	r3, r0
 800117c:	8023      	strh	r3, [r4, #0]
	switch(i)
 800117e:	197b      	adds	r3, r7, r5
 8001180:	881b      	ldrh	r3, [r3, #0]
 8001182:	2b05      	cmp	r3, #5
 8001184:	d900      	bls.n	8001188 <HSV_Pastel+0x68>
 8001186:	e099      	b.n	80012bc <HSV_Pastel+0x19c>
 8001188:	009a      	lsls	r2, r3, #2
 800118a:	4b62      	ldr	r3, [pc, #392]	; (8001314 <HSV_Pastel+0x1f4>)
 800118c:	18d3      	adds	r3, r2, r3
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	469f      	mov	pc, r3
	{
	case 0:
    	r = 255;
 8001192:	230f      	movs	r3, #15
 8001194:	18fb      	adds	r3, r7, r3
 8001196:	22ff      	movs	r2, #255	; 0xff
 8001198:	701a      	strb	r2, [r3, #0]
    	g = hue * 255/60;
 800119a:	1dbb      	adds	r3, r7, #6
 800119c:	881a      	ldrh	r2, [r3, #0]
 800119e:	0013      	movs	r3, r2
 80011a0:	021b      	lsls	r3, r3, #8
 80011a2:	1a9b      	subs	r3, r3, r2
 80011a4:	213c      	movs	r1, #60	; 0x3c
 80011a6:	0018      	movs	r0, r3
 80011a8:	f7ff f836 	bl	8000218 <__divsi3>
 80011ac:	0003      	movs	r3, r0
 80011ae:	001a      	movs	r2, r3
 80011b0:	230e      	movs	r3, #14
 80011b2:	18fb      	adds	r3, r7, r3
 80011b4:	701a      	strb	r2, [r3, #0]
    	b = 0;
 80011b6:	230d      	movs	r3, #13
 80011b8:	18fb      	adds	r3, r7, r3
 80011ba:	2200      	movs	r2, #0
 80011bc:	701a      	strb	r2, [r3, #0]
    	break;
 80011be:	e07d      	b.n	80012bc <HSV_Pastel+0x19c>
    case 1:
    	r = (120 - hue) * 255 / 60;
 80011c0:	1dbb      	adds	r3, r7, #6
 80011c2:	881b      	ldrh	r3, [r3, #0]
 80011c4:	2278      	movs	r2, #120	; 0x78
 80011c6:	1ad2      	subs	r2, r2, r3
 80011c8:	0013      	movs	r3, r2
 80011ca:	021b      	lsls	r3, r3, #8
 80011cc:	1a9b      	subs	r3, r3, r2
 80011ce:	213c      	movs	r1, #60	; 0x3c
 80011d0:	0018      	movs	r0, r3
 80011d2:	f7ff f821 	bl	8000218 <__divsi3>
 80011d6:	0003      	movs	r3, r0
 80011d8:	001a      	movs	r2, r3
 80011da:	230f      	movs	r3, #15
 80011dc:	18fb      	adds	r3, r7, r3
 80011de:	701a      	strb	r2, [r3, #0]
    	g = 255;
 80011e0:	230e      	movs	r3, #14
 80011e2:	18fb      	adds	r3, r7, r3
 80011e4:	22ff      	movs	r2, #255	; 0xff
 80011e6:	701a      	strb	r2, [r3, #0]
    	b = 0;
 80011e8:	230d      	movs	r3, #13
 80011ea:	18fb      	adds	r3, r7, r3
 80011ec:	2200      	movs	r2, #0
 80011ee:	701a      	strb	r2, [r3, #0]
    	break;
 80011f0:	e064      	b.n	80012bc <HSV_Pastel+0x19c>
    case 2:
    	r = 0;
 80011f2:	230f      	movs	r3, #15
 80011f4:	18fb      	adds	r3, r7, r3
 80011f6:	2200      	movs	r2, #0
 80011f8:	701a      	strb	r2, [r3, #0]
    	g = 255;
 80011fa:	230e      	movs	r3, #14
 80011fc:	18fb      	adds	r3, r7, r3
 80011fe:	22ff      	movs	r2, #255	; 0xff
 8001200:	701a      	strb	r2, [r3, #0]
    	b = (hue - 120) * 255 / 60;
 8001202:	1dbb      	adds	r3, r7, #6
 8001204:	881b      	ldrh	r3, [r3, #0]
 8001206:	3b78      	subs	r3, #120	; 0x78
 8001208:	001a      	movs	r2, r3
 800120a:	0013      	movs	r3, r2
 800120c:	021b      	lsls	r3, r3, #8
 800120e:	1a9b      	subs	r3, r3, r2
 8001210:	213c      	movs	r1, #60	; 0x3c
 8001212:	0018      	movs	r0, r3
 8001214:	f7ff f800 	bl	8000218 <__divsi3>
 8001218:	0003      	movs	r3, r0
 800121a:	001a      	movs	r2, r3
 800121c:	230d      	movs	r3, #13
 800121e:	18fb      	adds	r3, r7, r3
 8001220:	701a      	strb	r2, [r3, #0]
    	break;
 8001222:	e04b      	b.n	80012bc <HSV_Pastel+0x19c>
    case 3:
    	r = 0;
 8001224:	230f      	movs	r3, #15
 8001226:	18fb      	adds	r3, r7, r3
 8001228:	2200      	movs	r2, #0
 800122a:	701a      	strb	r2, [r3, #0]
    	g = (240 - hue) * 255 / 60;
 800122c:	1dbb      	adds	r3, r7, #6
 800122e:	881b      	ldrh	r3, [r3, #0]
 8001230:	22f0      	movs	r2, #240	; 0xf0
 8001232:	1ad2      	subs	r2, r2, r3
 8001234:	0013      	movs	r3, r2
 8001236:	021b      	lsls	r3, r3, #8
 8001238:	1a9b      	subs	r3, r3, r2
 800123a:	213c      	movs	r1, #60	; 0x3c
 800123c:	0018      	movs	r0, r3
 800123e:	f7fe ffeb 	bl	8000218 <__divsi3>
 8001242:	0003      	movs	r3, r0
 8001244:	001a      	movs	r2, r3
 8001246:	230e      	movs	r3, #14
 8001248:	18fb      	adds	r3, r7, r3
 800124a:	701a      	strb	r2, [r3, #0]
    	b = 255;
 800124c:	230d      	movs	r3, #13
 800124e:	18fb      	adds	r3, r7, r3
 8001250:	22ff      	movs	r2, #255	; 0xff
 8001252:	701a      	strb	r2, [r3, #0]
    	break;
 8001254:	e032      	b.n	80012bc <HSV_Pastel+0x19c>
    case 4:
    	r = (hue - 240) * 255 / 60;
 8001256:	1dbb      	adds	r3, r7, #6
 8001258:	881b      	ldrh	r3, [r3, #0]
 800125a:	3bf0      	subs	r3, #240	; 0xf0
 800125c:	001a      	movs	r2, r3
 800125e:	0013      	movs	r3, r2
 8001260:	021b      	lsls	r3, r3, #8
 8001262:	1a9b      	subs	r3, r3, r2
 8001264:	213c      	movs	r1, #60	; 0x3c
 8001266:	0018      	movs	r0, r3
 8001268:	f7fe ffd6 	bl	8000218 <__divsi3>
 800126c:	0003      	movs	r3, r0
 800126e:	001a      	movs	r2, r3
 8001270:	230f      	movs	r3, #15
 8001272:	18fb      	adds	r3, r7, r3
 8001274:	701a      	strb	r2, [r3, #0]
    	g = 0;
 8001276:	230e      	movs	r3, #14
 8001278:	18fb      	adds	r3, r7, r3
 800127a:	2200      	movs	r2, #0
 800127c:	701a      	strb	r2, [r3, #0]
    	b = 255;
 800127e:	230d      	movs	r3, #13
 8001280:	18fb      	adds	r3, r7, r3
 8001282:	22ff      	movs	r2, #255	; 0xff
 8001284:	701a      	strb	r2, [r3, #0]
    	break;
 8001286:	e019      	b.n	80012bc <HSV_Pastel+0x19c>
    case 5:
    	r = 255;
 8001288:	230f      	movs	r3, #15
 800128a:	18fb      	adds	r3, r7, r3
 800128c:	22ff      	movs	r2, #255	; 0xff
 800128e:	701a      	strb	r2, [r3, #0]
    	g = 0;
 8001290:	230e      	movs	r3, #14
 8001292:	18fb      	adds	r3, r7, r3
 8001294:	2200      	movs	r2, #0
 8001296:	701a      	strb	r2, [r3, #0]
    	b = (360 - hue) * 255 / 60;
 8001298:	1dbb      	adds	r3, r7, #6
 800129a:	881b      	ldrh	r3, [r3, #0]
 800129c:	22b4      	movs	r2, #180	; 0xb4
 800129e:	0052      	lsls	r2, r2, #1
 80012a0:	1ad2      	subs	r2, r2, r3
 80012a2:	0013      	movs	r3, r2
 80012a4:	021b      	lsls	r3, r3, #8
 80012a6:	1a9b      	subs	r3, r3, r2
 80012a8:	213c      	movs	r1, #60	; 0x3c
 80012aa:	0018      	movs	r0, r3
 80012ac:	f7fe ffb4 	bl	8000218 <__divsi3>
 80012b0:	0003      	movs	r3, r0
 80012b2:	001a      	movs	r2, r3
 80012b4:	230d      	movs	r3, #13
 80012b6:	18fb      	adds	r3, r7, r3
 80012b8:	701a      	strb	r2, [r3, #0]
    	break;
 80012ba:	46c0      	nop			; (mov r8, r8)
	}
	r >>= lux;
 80012bc:	240f      	movs	r4, #15
 80012be:	193b      	adds	r3, r7, r4
 80012c0:	781b      	ldrb	r3, [r3, #0]
 80012c2:	4a15      	ldr	r2, [pc, #84]	; (8001318 <HSV_Pastel+0x1f8>)
 80012c4:	7812      	ldrb	r2, [r2, #0]
 80012c6:	4113      	asrs	r3, r2
 80012c8:	001a      	movs	r2, r3
 80012ca:	193b      	adds	r3, r7, r4
 80012cc:	701a      	strb	r2, [r3, #0]
	g >>= lux;
 80012ce:	250e      	movs	r5, #14
 80012d0:	197b      	adds	r3, r7, r5
 80012d2:	781b      	ldrb	r3, [r3, #0]
 80012d4:	4a10      	ldr	r2, [pc, #64]	; (8001318 <HSV_Pastel+0x1f8>)
 80012d6:	7812      	ldrb	r2, [r2, #0]
 80012d8:	4113      	asrs	r3, r2
 80012da:	001a      	movs	r2, r3
 80012dc:	197b      	adds	r3, r7, r5
 80012de:	701a      	strb	r2, [r3, #0]
	b >>= lux;
 80012e0:	260d      	movs	r6, #13
 80012e2:	19bb      	adds	r3, r7, r6
 80012e4:	781b      	ldrb	r3, [r3, #0]
 80012e6:	4a0c      	ldr	r2, [pc, #48]	; (8001318 <HSV_Pastel+0x1f8>)
 80012e8:	7812      	ldrb	r2, [r2, #0]
 80012ea:	4113      	asrs	r3, r2
 80012ec:	001a      	movs	r2, r3
 80012ee:	19bb      	adds	r3, r7, r6
 80012f0:	701a      	strb	r2, [r3, #0]

	HAL_Delay(1);
 80012f2:	2001      	movs	r0, #1
 80012f4:	f000 fa3c 	bl	8001770 <HAL_Delay>

	return ( (g << 16) | (r << 8) | (b) );
 80012f8:	197b      	adds	r3, r7, r5
 80012fa:	781b      	ldrb	r3, [r3, #0]
 80012fc:	041a      	lsls	r2, r3, #16
 80012fe:	193b      	adds	r3, r7, r4
 8001300:	781b      	ldrb	r3, [r3, #0]
 8001302:	021b      	lsls	r3, r3, #8
 8001304:	431a      	orrs	r2, r3
 8001306:	19bb      	adds	r3, r7, r6
 8001308:	781b      	ldrb	r3, [r3, #0]
 800130a:	4313      	orrs	r3, r2
}
 800130c:	0018      	movs	r0, r3
 800130e:	46bd      	mov	sp, r7
 8001310:	b005      	add	sp, #20
 8001312:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001314:	08004640 	.word	0x08004640
 8001318:	200000f0 	.word	0x200000f0

0800131c <RGB_Generate>:
void RGB_Generate(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b082      	sub	sp, #8
 8001320:	af00      	add	r7, sp, #0
	uint8_t i;
	for(i = 0; i < MAX_LED; i++)
 8001322:	1dfb      	adds	r3, r7, #7
 8001324:	2200      	movs	r2, #0
 8001326:	701a      	strb	r2, [r3, #0]
 8001328:	e029      	b.n	800137e <RGB_Generate+0x62>
	{
		HueSeed[i] = i * 360/LED_NUM;
 800132a:	1dfb      	adds	r3, r7, #7
 800132c:	781b      	ldrb	r3, [r3, #0]
 800132e:	b299      	uxth	r1, r3
 8001330:	1dfb      	adds	r3, r7, #7
 8001332:	781a      	ldrb	r2, [r3, #0]
 8001334:	1c0b      	adds	r3, r1, #0
 8001336:	18db      	adds	r3, r3, r3
 8001338:	185b      	adds	r3, r3, r1
 800133a:	1c19      	adds	r1, r3, #0
 800133c:	0109      	lsls	r1, r1, #4
 800133e:	1acb      	subs	r3, r1, r3
 8001340:	b299      	uxth	r1, r3
 8001342:	4b13      	ldr	r3, [pc, #76]	; (8001390 <RGB_Generate+0x74>)
 8001344:	0052      	lsls	r2, r2, #1
 8001346:	52d1      	strh	r1, [r2, r3]
		if(HueSeed[i] >= 360)
 8001348:	1dfb      	adds	r3, r7, #7
 800134a:	781a      	ldrb	r2, [r3, #0]
 800134c:	4b10      	ldr	r3, [pc, #64]	; (8001390 <RGB_Generate+0x74>)
 800134e:	0052      	lsls	r2, r2, #1
 8001350:	5ad2      	ldrh	r2, [r2, r3]
 8001352:	23b4      	movs	r3, #180	; 0xb4
 8001354:	005b      	lsls	r3, r3, #1
 8001356:	429a      	cmp	r2, r3
 8001358:	d30c      	bcc.n	8001374 <RGB_Generate+0x58>
		{
			HueSeed[i] -= 360;
 800135a:	1dfb      	adds	r3, r7, #7
 800135c:	781a      	ldrb	r2, [r3, #0]
 800135e:	4b0c      	ldr	r3, [pc, #48]	; (8001390 <RGB_Generate+0x74>)
 8001360:	0052      	lsls	r2, r2, #1
 8001362:	5ad3      	ldrh	r3, [r2, r3]
 8001364:	1dfa      	adds	r2, r7, #7
 8001366:	7812      	ldrb	r2, [r2, #0]
 8001368:	3b69      	subs	r3, #105	; 0x69
 800136a:	3bff      	subs	r3, #255	; 0xff
 800136c:	b299      	uxth	r1, r3
 800136e:	4b08      	ldr	r3, [pc, #32]	; (8001390 <RGB_Generate+0x74>)
 8001370:	0052      	lsls	r2, r2, #1
 8001372:	52d1      	strh	r1, [r2, r3]
	for(i = 0; i < MAX_LED; i++)
 8001374:	1dfb      	adds	r3, r7, #7
 8001376:	781a      	ldrb	r2, [r3, #0]
 8001378:	1dfb      	adds	r3, r7, #7
 800137a:	3201      	adds	r2, #1
 800137c:	701a      	strb	r2, [r3, #0]
 800137e:	1dfb      	adds	r3, r7, #7
 8001380:	781b      	ldrb	r3, [r3, #0]
 8001382:	2b3b      	cmp	r3, #59	; 0x3b
 8001384:	d9d1      	bls.n	800132a <RGB_Generate+0xe>
		}
	}
}
 8001386:	46c0      	nop			; (mov r8, r8)
 8001388:	46c0      	nop			; (mov r8, r8)
 800138a:	46bd      	mov	sp, r7
 800138c:	b002      	add	sp, #8
 800138e:	bd80      	pop	{r7, pc}
 8001390:	200000f4 	.word	0x200000f4

08001394 <Rainbow_Circle>:
void Rainbow_Circle(uint8_t loop)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b082      	sub	sp, #8
 8001398:	af00      	add	r7, sp, #0
 800139a:	0002      	movs	r2, r0
 800139c:	1dfb      	adds	r3, r7, #7
 800139e:	701a      	strb	r2, [r3, #0]
	HueSeed[loop] += angle[point];
 80013a0:	1dfb      	adds	r3, r7, #7
 80013a2:	781a      	ldrb	r2, [r3, #0]
 80013a4:	4b14      	ldr	r3, [pc, #80]	; (80013f8 <Rainbow_Circle+0x64>)
 80013a6:	0052      	lsls	r2, r2, #1
 80013a8:	5ad1      	ldrh	r1, [r2, r3]
 80013aa:	4b14      	ldr	r3, [pc, #80]	; (80013fc <Rainbow_Circle+0x68>)
 80013ac:	781b      	ldrb	r3, [r3, #0]
 80013ae:	001a      	movs	r2, r3
 80013b0:	4b13      	ldr	r3, [pc, #76]	; (8001400 <Rainbow_Circle+0x6c>)
 80013b2:	5c9b      	ldrb	r3, [r3, r2]
 80013b4:	b29b      	uxth	r3, r3
 80013b6:	1dfa      	adds	r2, r7, #7
 80013b8:	7812      	ldrb	r2, [r2, #0]
 80013ba:	18cb      	adds	r3, r1, r3
 80013bc:	b299      	uxth	r1, r3
 80013be:	4b0e      	ldr	r3, [pc, #56]	; (80013f8 <Rainbow_Circle+0x64>)
 80013c0:	0052      	lsls	r2, r2, #1
 80013c2:	52d1      	strh	r1, [r2, r3]
	if(HueSeed[loop] >= 360)
 80013c4:	1dfb      	adds	r3, r7, #7
 80013c6:	781a      	ldrb	r2, [r3, #0]
 80013c8:	4b0b      	ldr	r3, [pc, #44]	; (80013f8 <Rainbow_Circle+0x64>)
 80013ca:	0052      	lsls	r2, r2, #1
 80013cc:	5ad2      	ldrh	r2, [r2, r3]
 80013ce:	23b4      	movs	r3, #180	; 0xb4
 80013d0:	005b      	lsls	r3, r3, #1
 80013d2:	429a      	cmp	r2, r3
 80013d4:	d30c      	bcc.n	80013f0 <Rainbow_Circle+0x5c>
	{
		HueSeed[loop] -= 360;
 80013d6:	1dfb      	adds	r3, r7, #7
 80013d8:	781a      	ldrb	r2, [r3, #0]
 80013da:	4b07      	ldr	r3, [pc, #28]	; (80013f8 <Rainbow_Circle+0x64>)
 80013dc:	0052      	lsls	r2, r2, #1
 80013de:	5ad3      	ldrh	r3, [r2, r3]
 80013e0:	1dfa      	adds	r2, r7, #7
 80013e2:	7812      	ldrb	r2, [r2, #0]
 80013e4:	3b69      	subs	r3, #105	; 0x69
 80013e6:	3bff      	subs	r3, #255	; 0xff
 80013e8:	b299      	uxth	r1, r3
 80013ea:	4b03      	ldr	r3, [pc, #12]	; (80013f8 <Rainbow_Circle+0x64>)
 80013ec:	0052      	lsls	r2, r2, #1
 80013ee:	52d1      	strh	r1, [r2, r3]
	}
}
 80013f0:	46c0      	nop			; (mov r8, r8)
 80013f2:	46bd      	mov	sp, r7
 80013f4:	b002      	add	sp, #8
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	200000f4 	.word	0x200000f4
 80013fc:	200000f1 	.word	0x200000f1
 8001400:	20000000 	.word	0x20000000

08001404 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b082      	sub	sp, #8
 8001408:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800140a:	4b0f      	ldr	r3, [pc, #60]	; (8001448 <HAL_MspInit+0x44>)
 800140c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800140e:	4b0e      	ldr	r3, [pc, #56]	; (8001448 <HAL_MspInit+0x44>)
 8001410:	2101      	movs	r1, #1
 8001412:	430a      	orrs	r2, r1
 8001414:	641a      	str	r2, [r3, #64]	; 0x40
 8001416:	4b0c      	ldr	r3, [pc, #48]	; (8001448 <HAL_MspInit+0x44>)
 8001418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800141a:	2201      	movs	r2, #1
 800141c:	4013      	ands	r3, r2
 800141e:	607b      	str	r3, [r7, #4]
 8001420:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001422:	4b09      	ldr	r3, [pc, #36]	; (8001448 <HAL_MspInit+0x44>)
 8001424:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001426:	4b08      	ldr	r3, [pc, #32]	; (8001448 <HAL_MspInit+0x44>)
 8001428:	2180      	movs	r1, #128	; 0x80
 800142a:	0549      	lsls	r1, r1, #21
 800142c:	430a      	orrs	r2, r1
 800142e:	63da      	str	r2, [r3, #60]	; 0x3c
 8001430:	4b05      	ldr	r3, [pc, #20]	; (8001448 <HAL_MspInit+0x44>)
 8001432:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001434:	2380      	movs	r3, #128	; 0x80
 8001436:	055b      	lsls	r3, r3, #21
 8001438:	4013      	ands	r3, r2
 800143a:	603b      	str	r3, [r7, #0]
 800143c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800143e:	46c0      	nop			; (mov r8, r8)
 8001440:	46bd      	mov	sp, r7
 8001442:	b002      	add	sp, #8
 8001444:	bd80      	pop	{r7, pc}
 8001446:	46c0      	nop			; (mov r8, r8)
 8001448:	40021000 	.word	0x40021000

0800144c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800144c:	b590      	push	{r4, r7, lr}
 800144e:	b08f      	sub	sp, #60	; 0x3c
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001454:	2410      	movs	r4, #16
 8001456:	193b      	adds	r3, r7, r4
 8001458:	0018      	movs	r0, r3
 800145a:	2328      	movs	r3, #40	; 0x28
 800145c:	001a      	movs	r2, r3
 800145e:	2100      	movs	r1, #0
 8001460:	f003 f86e 	bl	8004540 <memset>
  if(htim_base->Instance==TIM1)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4a27      	ldr	r2, [pc, #156]	; (8001508 <HAL_TIM_Base_MspInit+0xbc>)
 800146a:	4293      	cmp	r3, r2
 800146c:	d148      	bne.n	8001500 <HAL_TIM_Base_MspInit+0xb4>

  /* USER CODE END TIM1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 800146e:	193b      	adds	r3, r7, r4
 8001470:	2280      	movs	r2, #128	; 0x80
 8001472:	0392      	lsls	r2, r2, #14
 8001474:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PCLK1;
 8001476:	193b      	adds	r3, r7, r4
 8001478:	2200      	movs	r2, #0
 800147a:	621a      	str	r2, [r3, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800147c:	193b      	adds	r3, r7, r4
 800147e:	0018      	movs	r0, r3
 8001480:	f001 fbb0 	bl	8002be4 <HAL_RCCEx_PeriphCLKConfig>
 8001484:	1e03      	subs	r3, r0, #0
 8001486:	d001      	beq.n	800148c <HAL_TIM_Base_MspInit+0x40>
    {
      Error_Handler();
 8001488:	f7ff fa7e 	bl	8000988 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800148c:	4b1f      	ldr	r3, [pc, #124]	; (800150c <HAL_TIM_Base_MspInit+0xc0>)
 800148e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001490:	4b1e      	ldr	r3, [pc, #120]	; (800150c <HAL_TIM_Base_MspInit+0xc0>)
 8001492:	2180      	movs	r1, #128	; 0x80
 8001494:	0109      	lsls	r1, r1, #4
 8001496:	430a      	orrs	r2, r1
 8001498:	641a      	str	r2, [r3, #64]	; 0x40
 800149a:	4b1c      	ldr	r3, [pc, #112]	; (800150c <HAL_TIM_Base_MspInit+0xc0>)
 800149c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800149e:	2380      	movs	r3, #128	; 0x80
 80014a0:	011b      	lsls	r3, r3, #4
 80014a2:	4013      	ands	r3, r2
 80014a4:	60fb      	str	r3, [r7, #12]
 80014a6:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Channel1;
 80014a8:	4b19      	ldr	r3, [pc, #100]	; (8001510 <HAL_TIM_Base_MspInit+0xc4>)
 80014aa:	4a1a      	ldr	r2, [pc, #104]	; (8001514 <HAL_TIM_Base_MspInit+0xc8>)
 80014ac:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Request = DMA_REQUEST_TIM1_CH1;
 80014ae:	4b18      	ldr	r3, [pc, #96]	; (8001510 <HAL_TIM_Base_MspInit+0xc4>)
 80014b0:	2214      	movs	r2, #20
 80014b2:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80014b4:	4b16      	ldr	r3, [pc, #88]	; (8001510 <HAL_TIM_Base_MspInit+0xc4>)
 80014b6:	2210      	movs	r2, #16
 80014b8:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80014ba:	4b15      	ldr	r3, [pc, #84]	; (8001510 <HAL_TIM_Base_MspInit+0xc4>)
 80014bc:	2200      	movs	r2, #0
 80014be:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80014c0:	4b13      	ldr	r3, [pc, #76]	; (8001510 <HAL_TIM_Base_MspInit+0xc4>)
 80014c2:	2280      	movs	r2, #128	; 0x80
 80014c4:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80014c6:	4b12      	ldr	r3, [pc, #72]	; (8001510 <HAL_TIM_Base_MspInit+0xc4>)
 80014c8:	2280      	movs	r2, #128	; 0x80
 80014ca:	0052      	lsls	r2, r2, #1
 80014cc:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80014ce:	4b10      	ldr	r3, [pc, #64]	; (8001510 <HAL_TIM_Base_MspInit+0xc4>)
 80014d0:	2280      	movs	r2, #128	; 0x80
 80014d2:	00d2      	lsls	r2, r2, #3
 80014d4:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 80014d6:	4b0e      	ldr	r3, [pc, #56]	; (8001510 <HAL_TIM_Base_MspInit+0xc4>)
 80014d8:	2200      	movs	r2, #0
 80014da:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 80014dc:	4b0c      	ldr	r3, [pc, #48]	; (8001510 <HAL_TIM_Base_MspInit+0xc4>)
 80014de:	2280      	movs	r2, #128	; 0x80
 80014e0:	0192      	lsls	r2, r2, #6
 80014e2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 80014e4:	4b0a      	ldr	r3, [pc, #40]	; (8001510 <HAL_TIM_Base_MspInit+0xc4>)
 80014e6:	0018      	movs	r0, r3
 80014e8:	f000 fa44 	bl	8001974 <HAL_DMA_Init>
 80014ec:	1e03      	subs	r3, r0, #0
 80014ee:	d001      	beq.n	80014f4 <HAL_TIM_Base_MspInit+0xa8>
    {
      Error_Handler();
 80014f0:	f7ff fa4a 	bl	8000988 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	4a06      	ldr	r2, [pc, #24]	; (8001510 <HAL_TIM_Base_MspInit+0xc4>)
 80014f8:	625a      	str	r2, [r3, #36]	; 0x24
 80014fa:	4b05      	ldr	r3, [pc, #20]	; (8001510 <HAL_TIM_Base_MspInit+0xc4>)
 80014fc:	687a      	ldr	r2, [r7, #4]
 80014fe:	629a      	str	r2, [r3, #40]	; 0x28
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001500:	46c0      	nop			; (mov r8, r8)
 8001502:	46bd      	mov	sp, r7
 8001504:	b00f      	add	sp, #60	; 0x3c
 8001506:	bd90      	pop	{r4, r7, pc}
 8001508:	40012c00 	.word	0x40012c00
 800150c:	40021000 	.word	0x40021000
 8001510:	20000078 	.word	0x20000078
 8001514:	40020008 	.word	0x40020008

08001518 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001518:	b590      	push	{r4, r7, lr}
 800151a:	b089      	sub	sp, #36	; 0x24
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001520:	240c      	movs	r4, #12
 8001522:	193b      	adds	r3, r7, r4
 8001524:	0018      	movs	r0, r3
 8001526:	2314      	movs	r3, #20
 8001528:	001a      	movs	r2, r3
 800152a:	2100      	movs	r1, #0
 800152c:	f003 f808 	bl	8004540 <memset>
  if(htim->Instance==TIM1)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4a15      	ldr	r2, [pc, #84]	; (800158c <HAL_TIM_MspPostInit+0x74>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d123      	bne.n	8001582 <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800153a:	4b15      	ldr	r3, [pc, #84]	; (8001590 <HAL_TIM_MspPostInit+0x78>)
 800153c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800153e:	4b14      	ldr	r3, [pc, #80]	; (8001590 <HAL_TIM_MspPostInit+0x78>)
 8001540:	2101      	movs	r1, #1
 8001542:	430a      	orrs	r2, r1
 8001544:	635a      	str	r2, [r3, #52]	; 0x34
 8001546:	4b12      	ldr	r3, [pc, #72]	; (8001590 <HAL_TIM_MspPostInit+0x78>)
 8001548:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800154a:	2201      	movs	r2, #1
 800154c:	4013      	ands	r3, r2
 800154e:	60bb      	str	r3, [r7, #8]
 8001550:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001552:	193b      	adds	r3, r7, r4
 8001554:	2280      	movs	r2, #128	; 0x80
 8001556:	0052      	lsls	r2, r2, #1
 8001558:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800155a:	0021      	movs	r1, r4
 800155c:	187b      	adds	r3, r7, r1
 800155e:	2202      	movs	r2, #2
 8001560:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001562:	187b      	adds	r3, r7, r1
 8001564:	2200      	movs	r2, #0
 8001566:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001568:	187b      	adds	r3, r7, r1
 800156a:	2202      	movs	r2, #2
 800156c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800156e:	187b      	adds	r3, r7, r1
 8001570:	2202      	movs	r2, #2
 8001572:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001574:	187a      	adds	r2, r7, r1
 8001576:	23a0      	movs	r3, #160	; 0xa0
 8001578:	05db      	lsls	r3, r3, #23
 800157a:	0011      	movs	r1, r2
 800157c:	0018      	movs	r0, r3
 800157e:	f000 fcb5 	bl	8001eec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001582:	46c0      	nop			; (mov r8, r8)
 8001584:	46bd      	mov	sp, r7
 8001586:	b009      	add	sp, #36	; 0x24
 8001588:	bd90      	pop	{r4, r7, pc}
 800158a:	46c0      	nop			; (mov r8, r8)
 800158c:	40012c00 	.word	0x40012c00
 8001590:	40021000 	.word	0x40021000

08001594 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001598:	e7fe      	b.n	8001598 <NMI_Handler+0x4>

0800159a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800159a:	b580      	push	{r7, lr}
 800159c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800159e:	e7fe      	b.n	800159e <HardFault_Handler+0x4>

080015a0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80015a4:	46c0      	nop			; (mov r8, r8)
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}

080015aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015aa:	b580      	push	{r7, lr}
 80015ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015ae:	46c0      	nop			; (mov r8, r8)
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}

080015b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015b8:	f000 f8be 	bl	8001738 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015bc:	46c0      	nop			; (mov r8, r8)
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}

080015c2 <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 80015c2:	b580      	push	{r7, lr}
 80015c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RedSw_Pin);
 80015c6:	2004      	movs	r0, #4
 80015c8:	f000 fdf4 	bl	80021b4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 80015cc:	46c0      	nop			; (mov r8, r8)
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}

080015d2 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 80015d2:	b580      	push	{r7, lr}
 80015d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GreenSw_Pin);
 80015d6:	2080      	movs	r0, #128	; 0x80
 80015d8:	f000 fdec 	bl	80021b4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BlueSw_Pin);
 80015dc:	2380      	movs	r3, #128	; 0x80
 80015de:	015b      	lsls	r3, r3, #5
 80015e0:	0018      	movs	r0, r3
 80015e2:	f000 fde7 	bl	80021b4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 80015e6:	46c0      	nop			; (mov r8, r8)
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}

080015ec <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 80015f0:	4b03      	ldr	r3, [pc, #12]	; (8001600 <DMA1_Channel1_IRQHandler+0x14>)
 80015f2:	0018      	movs	r0, r3
 80015f4:	f000 fb38 	bl	8001c68 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80015f8:	46c0      	nop			; (mov r8, r8)
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	46c0      	nop			; (mov r8, r8)
 8001600:	20000078 	.word	0x20000078

08001604 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001608:	46c0      	nop			; (mov r8, r8)
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
	...

08001610 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001610:	480d      	ldr	r0, [pc, #52]	; (8001648 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001612:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001614:	f7ff fff6 	bl	8001604 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001618:	480c      	ldr	r0, [pc, #48]	; (800164c <LoopForever+0x6>)
  ldr r1, =_edata
 800161a:	490d      	ldr	r1, [pc, #52]	; (8001650 <LoopForever+0xa>)
  ldr r2, =_sidata
 800161c:	4a0d      	ldr	r2, [pc, #52]	; (8001654 <LoopForever+0xe>)
  movs r3, #0
 800161e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001620:	e002      	b.n	8001628 <LoopCopyDataInit>

08001622 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001622:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001624:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001626:	3304      	adds	r3, #4

08001628 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001628:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800162a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800162c:	d3f9      	bcc.n	8001622 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800162e:	4a0a      	ldr	r2, [pc, #40]	; (8001658 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001630:	4c0a      	ldr	r4, [pc, #40]	; (800165c <LoopForever+0x16>)
  movs r3, #0
 8001632:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001634:	e001      	b.n	800163a <LoopFillZerobss>

08001636 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001636:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001638:	3204      	adds	r2, #4

0800163a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800163a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800163c:	d3fb      	bcc.n	8001636 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800163e:	f002 ff87 	bl	8004550 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001642:	f7fe ff7f 	bl	8000544 <main>

08001646 <LoopForever>:

LoopForever:
  b LoopForever
 8001646:	e7fe      	b.n	8001646 <LoopForever>
  ldr   r0, =_estack
 8001648:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 800164c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001650:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001654:	080046f4 	.word	0x080046f4
  ldr r2, =_sbss
 8001658:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 800165c:	20000cb8 	.word	0x20000cb8

08001660 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001660:	e7fe      	b.n	8001660 <ADC1_IRQHandler>
	...

08001664 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b082      	sub	sp, #8
 8001668:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800166a:	1dfb      	adds	r3, r7, #7
 800166c:	2200      	movs	r2, #0
 800166e:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001670:	4b0b      	ldr	r3, [pc, #44]	; (80016a0 <HAL_Init+0x3c>)
 8001672:	681a      	ldr	r2, [r3, #0]
 8001674:	4b0a      	ldr	r3, [pc, #40]	; (80016a0 <HAL_Init+0x3c>)
 8001676:	2180      	movs	r1, #128	; 0x80
 8001678:	0049      	lsls	r1, r1, #1
 800167a:	430a      	orrs	r2, r1
 800167c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800167e:	2003      	movs	r0, #3
 8001680:	f000 f810 	bl	80016a4 <HAL_InitTick>
 8001684:	1e03      	subs	r3, r0, #0
 8001686:	d003      	beq.n	8001690 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001688:	1dfb      	adds	r3, r7, #7
 800168a:	2201      	movs	r2, #1
 800168c:	701a      	strb	r2, [r3, #0]
 800168e:	e001      	b.n	8001694 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001690:	f7ff feb8 	bl	8001404 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001694:	1dfb      	adds	r3, r7, #7
 8001696:	781b      	ldrb	r3, [r3, #0]
}
 8001698:	0018      	movs	r0, r3
 800169a:	46bd      	mov	sp, r7
 800169c:	b002      	add	sp, #8
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	40022000 	.word	0x40022000

080016a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016a4:	b590      	push	{r4, r7, lr}
 80016a6:	b085      	sub	sp, #20
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80016ac:	230f      	movs	r3, #15
 80016ae:	18fb      	adds	r3, r7, r3
 80016b0:	2200      	movs	r2, #0
 80016b2:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80016b4:	4b1d      	ldr	r3, [pc, #116]	; (800172c <HAL_InitTick+0x88>)
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d02b      	beq.n	8001714 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80016bc:	4b1c      	ldr	r3, [pc, #112]	; (8001730 <HAL_InitTick+0x8c>)
 80016be:	681c      	ldr	r4, [r3, #0]
 80016c0:	4b1a      	ldr	r3, [pc, #104]	; (800172c <HAL_InitTick+0x88>)
 80016c2:	781b      	ldrb	r3, [r3, #0]
 80016c4:	0019      	movs	r1, r3
 80016c6:	23fa      	movs	r3, #250	; 0xfa
 80016c8:	0098      	lsls	r0, r3, #2
 80016ca:	f7fe fd1b 	bl	8000104 <__udivsi3>
 80016ce:	0003      	movs	r3, r0
 80016d0:	0019      	movs	r1, r3
 80016d2:	0020      	movs	r0, r4
 80016d4:	f7fe fd16 	bl	8000104 <__udivsi3>
 80016d8:	0003      	movs	r3, r0
 80016da:	0018      	movs	r0, r3
 80016dc:	f000 f93d 	bl	800195a <HAL_SYSTICK_Config>
 80016e0:	1e03      	subs	r3, r0, #0
 80016e2:	d112      	bne.n	800170a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	2b03      	cmp	r3, #3
 80016e8:	d80a      	bhi.n	8001700 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016ea:	6879      	ldr	r1, [r7, #4]
 80016ec:	2301      	movs	r3, #1
 80016ee:	425b      	negs	r3, r3
 80016f0:	2200      	movs	r2, #0
 80016f2:	0018      	movs	r0, r3
 80016f4:	f000 f90c 	bl	8001910 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80016f8:	4b0e      	ldr	r3, [pc, #56]	; (8001734 <HAL_InitTick+0x90>)
 80016fa:	687a      	ldr	r2, [r7, #4]
 80016fc:	601a      	str	r2, [r3, #0]
 80016fe:	e00d      	b.n	800171c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001700:	230f      	movs	r3, #15
 8001702:	18fb      	adds	r3, r7, r3
 8001704:	2201      	movs	r2, #1
 8001706:	701a      	strb	r2, [r3, #0]
 8001708:	e008      	b.n	800171c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800170a:	230f      	movs	r3, #15
 800170c:	18fb      	adds	r3, r7, r3
 800170e:	2201      	movs	r2, #1
 8001710:	701a      	strb	r2, [r3, #0]
 8001712:	e003      	b.n	800171c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001714:	230f      	movs	r3, #15
 8001716:	18fb      	adds	r3, r7, r3
 8001718:	2201      	movs	r2, #1
 800171a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 800171c:	230f      	movs	r3, #15
 800171e:	18fb      	adds	r3, r7, r3
 8001720:	781b      	ldrb	r3, [r3, #0]
}
 8001722:	0018      	movs	r0, r3
 8001724:	46bd      	mov	sp, r7
 8001726:	b005      	add	sp, #20
 8001728:	bd90      	pop	{r4, r7, pc}
 800172a:	46c0      	nop			; (mov r8, r8)
 800172c:	2000000c 	.word	0x2000000c
 8001730:	20000004 	.word	0x20000004
 8001734:	20000008 	.word	0x20000008

08001738 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800173c:	4b05      	ldr	r3, [pc, #20]	; (8001754 <HAL_IncTick+0x1c>)
 800173e:	781b      	ldrb	r3, [r3, #0]
 8001740:	001a      	movs	r2, r3
 8001742:	4b05      	ldr	r3, [pc, #20]	; (8001758 <HAL_IncTick+0x20>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	18d2      	adds	r2, r2, r3
 8001748:	4b03      	ldr	r3, [pc, #12]	; (8001758 <HAL_IncTick+0x20>)
 800174a:	601a      	str	r2, [r3, #0]
}
 800174c:	46c0      	nop			; (mov r8, r8)
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	46c0      	nop			; (mov r8, r8)
 8001754:	2000000c 	.word	0x2000000c
 8001758:	20000cb4 	.word	0x20000cb4

0800175c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	af00      	add	r7, sp, #0
  return uwTick;
 8001760:	4b02      	ldr	r3, [pc, #8]	; (800176c <HAL_GetTick+0x10>)
 8001762:	681b      	ldr	r3, [r3, #0]
}
 8001764:	0018      	movs	r0, r3
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
 800176a:	46c0      	nop			; (mov r8, r8)
 800176c:	20000cb4 	.word	0x20000cb4

08001770 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b084      	sub	sp, #16
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001778:	f7ff fff0 	bl	800175c <HAL_GetTick>
 800177c:	0003      	movs	r3, r0
 800177e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	3301      	adds	r3, #1
 8001788:	d005      	beq.n	8001796 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800178a:	4b0a      	ldr	r3, [pc, #40]	; (80017b4 <HAL_Delay+0x44>)
 800178c:	781b      	ldrb	r3, [r3, #0]
 800178e:	001a      	movs	r2, r3
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	189b      	adds	r3, r3, r2
 8001794:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001796:	46c0      	nop			; (mov r8, r8)
 8001798:	f7ff ffe0 	bl	800175c <HAL_GetTick>
 800179c:	0002      	movs	r2, r0
 800179e:	68bb      	ldr	r3, [r7, #8]
 80017a0:	1ad3      	subs	r3, r2, r3
 80017a2:	68fa      	ldr	r2, [r7, #12]
 80017a4:	429a      	cmp	r2, r3
 80017a6:	d8f7      	bhi.n	8001798 <HAL_Delay+0x28>
  {
  }
}
 80017a8:	46c0      	nop			; (mov r8, r8)
 80017aa:	46c0      	nop			; (mov r8, r8)
 80017ac:	46bd      	mov	sp, r7
 80017ae:	b004      	add	sp, #16
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	46c0      	nop			; (mov r8, r8)
 80017b4:	2000000c 	.word	0x2000000c

080017b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b082      	sub	sp, #8
 80017bc:	af00      	add	r7, sp, #0
 80017be:	0002      	movs	r2, r0
 80017c0:	1dfb      	adds	r3, r7, #7
 80017c2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80017c4:	1dfb      	adds	r3, r7, #7
 80017c6:	781b      	ldrb	r3, [r3, #0]
 80017c8:	2b7f      	cmp	r3, #127	; 0x7f
 80017ca:	d809      	bhi.n	80017e0 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017cc:	1dfb      	adds	r3, r7, #7
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	001a      	movs	r2, r3
 80017d2:	231f      	movs	r3, #31
 80017d4:	401a      	ands	r2, r3
 80017d6:	4b04      	ldr	r3, [pc, #16]	; (80017e8 <__NVIC_EnableIRQ+0x30>)
 80017d8:	2101      	movs	r1, #1
 80017da:	4091      	lsls	r1, r2
 80017dc:	000a      	movs	r2, r1
 80017de:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80017e0:	46c0      	nop			; (mov r8, r8)
 80017e2:	46bd      	mov	sp, r7
 80017e4:	b002      	add	sp, #8
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	e000e100 	.word	0xe000e100

080017ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017ec:	b590      	push	{r4, r7, lr}
 80017ee:	b083      	sub	sp, #12
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	0002      	movs	r2, r0
 80017f4:	6039      	str	r1, [r7, #0]
 80017f6:	1dfb      	adds	r3, r7, #7
 80017f8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80017fa:	1dfb      	adds	r3, r7, #7
 80017fc:	781b      	ldrb	r3, [r3, #0]
 80017fe:	2b7f      	cmp	r3, #127	; 0x7f
 8001800:	d828      	bhi.n	8001854 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001802:	4a2f      	ldr	r2, [pc, #188]	; (80018c0 <__NVIC_SetPriority+0xd4>)
 8001804:	1dfb      	adds	r3, r7, #7
 8001806:	781b      	ldrb	r3, [r3, #0]
 8001808:	b25b      	sxtb	r3, r3
 800180a:	089b      	lsrs	r3, r3, #2
 800180c:	33c0      	adds	r3, #192	; 0xc0
 800180e:	009b      	lsls	r3, r3, #2
 8001810:	589b      	ldr	r3, [r3, r2]
 8001812:	1dfa      	adds	r2, r7, #7
 8001814:	7812      	ldrb	r2, [r2, #0]
 8001816:	0011      	movs	r1, r2
 8001818:	2203      	movs	r2, #3
 800181a:	400a      	ands	r2, r1
 800181c:	00d2      	lsls	r2, r2, #3
 800181e:	21ff      	movs	r1, #255	; 0xff
 8001820:	4091      	lsls	r1, r2
 8001822:	000a      	movs	r2, r1
 8001824:	43d2      	mvns	r2, r2
 8001826:	401a      	ands	r2, r3
 8001828:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	019b      	lsls	r3, r3, #6
 800182e:	22ff      	movs	r2, #255	; 0xff
 8001830:	401a      	ands	r2, r3
 8001832:	1dfb      	adds	r3, r7, #7
 8001834:	781b      	ldrb	r3, [r3, #0]
 8001836:	0018      	movs	r0, r3
 8001838:	2303      	movs	r3, #3
 800183a:	4003      	ands	r3, r0
 800183c:	00db      	lsls	r3, r3, #3
 800183e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001840:	481f      	ldr	r0, [pc, #124]	; (80018c0 <__NVIC_SetPriority+0xd4>)
 8001842:	1dfb      	adds	r3, r7, #7
 8001844:	781b      	ldrb	r3, [r3, #0]
 8001846:	b25b      	sxtb	r3, r3
 8001848:	089b      	lsrs	r3, r3, #2
 800184a:	430a      	orrs	r2, r1
 800184c:	33c0      	adds	r3, #192	; 0xc0
 800184e:	009b      	lsls	r3, r3, #2
 8001850:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001852:	e031      	b.n	80018b8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001854:	4a1b      	ldr	r2, [pc, #108]	; (80018c4 <__NVIC_SetPriority+0xd8>)
 8001856:	1dfb      	adds	r3, r7, #7
 8001858:	781b      	ldrb	r3, [r3, #0]
 800185a:	0019      	movs	r1, r3
 800185c:	230f      	movs	r3, #15
 800185e:	400b      	ands	r3, r1
 8001860:	3b08      	subs	r3, #8
 8001862:	089b      	lsrs	r3, r3, #2
 8001864:	3306      	adds	r3, #6
 8001866:	009b      	lsls	r3, r3, #2
 8001868:	18d3      	adds	r3, r2, r3
 800186a:	3304      	adds	r3, #4
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	1dfa      	adds	r2, r7, #7
 8001870:	7812      	ldrb	r2, [r2, #0]
 8001872:	0011      	movs	r1, r2
 8001874:	2203      	movs	r2, #3
 8001876:	400a      	ands	r2, r1
 8001878:	00d2      	lsls	r2, r2, #3
 800187a:	21ff      	movs	r1, #255	; 0xff
 800187c:	4091      	lsls	r1, r2
 800187e:	000a      	movs	r2, r1
 8001880:	43d2      	mvns	r2, r2
 8001882:	401a      	ands	r2, r3
 8001884:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	019b      	lsls	r3, r3, #6
 800188a:	22ff      	movs	r2, #255	; 0xff
 800188c:	401a      	ands	r2, r3
 800188e:	1dfb      	adds	r3, r7, #7
 8001890:	781b      	ldrb	r3, [r3, #0]
 8001892:	0018      	movs	r0, r3
 8001894:	2303      	movs	r3, #3
 8001896:	4003      	ands	r3, r0
 8001898:	00db      	lsls	r3, r3, #3
 800189a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800189c:	4809      	ldr	r0, [pc, #36]	; (80018c4 <__NVIC_SetPriority+0xd8>)
 800189e:	1dfb      	adds	r3, r7, #7
 80018a0:	781b      	ldrb	r3, [r3, #0]
 80018a2:	001c      	movs	r4, r3
 80018a4:	230f      	movs	r3, #15
 80018a6:	4023      	ands	r3, r4
 80018a8:	3b08      	subs	r3, #8
 80018aa:	089b      	lsrs	r3, r3, #2
 80018ac:	430a      	orrs	r2, r1
 80018ae:	3306      	adds	r3, #6
 80018b0:	009b      	lsls	r3, r3, #2
 80018b2:	18c3      	adds	r3, r0, r3
 80018b4:	3304      	adds	r3, #4
 80018b6:	601a      	str	r2, [r3, #0]
}
 80018b8:	46c0      	nop			; (mov r8, r8)
 80018ba:	46bd      	mov	sp, r7
 80018bc:	b003      	add	sp, #12
 80018be:	bd90      	pop	{r4, r7, pc}
 80018c0:	e000e100 	.word	0xe000e100
 80018c4:	e000ed00 	.word	0xe000ed00

080018c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b082      	sub	sp, #8
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	1e5a      	subs	r2, r3, #1
 80018d4:	2380      	movs	r3, #128	; 0x80
 80018d6:	045b      	lsls	r3, r3, #17
 80018d8:	429a      	cmp	r2, r3
 80018da:	d301      	bcc.n	80018e0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018dc:	2301      	movs	r3, #1
 80018de:	e010      	b.n	8001902 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018e0:	4b0a      	ldr	r3, [pc, #40]	; (800190c <SysTick_Config+0x44>)
 80018e2:	687a      	ldr	r2, [r7, #4]
 80018e4:	3a01      	subs	r2, #1
 80018e6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018e8:	2301      	movs	r3, #1
 80018ea:	425b      	negs	r3, r3
 80018ec:	2103      	movs	r1, #3
 80018ee:	0018      	movs	r0, r3
 80018f0:	f7ff ff7c 	bl	80017ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018f4:	4b05      	ldr	r3, [pc, #20]	; (800190c <SysTick_Config+0x44>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018fa:	4b04      	ldr	r3, [pc, #16]	; (800190c <SysTick_Config+0x44>)
 80018fc:	2207      	movs	r2, #7
 80018fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001900:	2300      	movs	r3, #0
}
 8001902:	0018      	movs	r0, r3
 8001904:	46bd      	mov	sp, r7
 8001906:	b002      	add	sp, #8
 8001908:	bd80      	pop	{r7, pc}
 800190a:	46c0      	nop			; (mov r8, r8)
 800190c:	e000e010 	.word	0xe000e010

08001910 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b084      	sub	sp, #16
 8001914:	af00      	add	r7, sp, #0
 8001916:	60b9      	str	r1, [r7, #8]
 8001918:	607a      	str	r2, [r7, #4]
 800191a:	210f      	movs	r1, #15
 800191c:	187b      	adds	r3, r7, r1
 800191e:	1c02      	adds	r2, r0, #0
 8001920:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8001922:	68ba      	ldr	r2, [r7, #8]
 8001924:	187b      	adds	r3, r7, r1
 8001926:	781b      	ldrb	r3, [r3, #0]
 8001928:	b25b      	sxtb	r3, r3
 800192a:	0011      	movs	r1, r2
 800192c:	0018      	movs	r0, r3
 800192e:	f7ff ff5d 	bl	80017ec <__NVIC_SetPriority>
}
 8001932:	46c0      	nop			; (mov r8, r8)
 8001934:	46bd      	mov	sp, r7
 8001936:	b004      	add	sp, #16
 8001938:	bd80      	pop	{r7, pc}

0800193a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800193a:	b580      	push	{r7, lr}
 800193c:	b082      	sub	sp, #8
 800193e:	af00      	add	r7, sp, #0
 8001940:	0002      	movs	r2, r0
 8001942:	1dfb      	adds	r3, r7, #7
 8001944:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001946:	1dfb      	adds	r3, r7, #7
 8001948:	781b      	ldrb	r3, [r3, #0]
 800194a:	b25b      	sxtb	r3, r3
 800194c:	0018      	movs	r0, r3
 800194e:	f7ff ff33 	bl	80017b8 <__NVIC_EnableIRQ>
}
 8001952:	46c0      	nop			; (mov r8, r8)
 8001954:	46bd      	mov	sp, r7
 8001956:	b002      	add	sp, #8
 8001958:	bd80      	pop	{r7, pc}

0800195a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800195a:	b580      	push	{r7, lr}
 800195c:	b082      	sub	sp, #8
 800195e:	af00      	add	r7, sp, #0
 8001960:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	0018      	movs	r0, r3
 8001966:	f7ff ffaf 	bl	80018c8 <SysTick_Config>
 800196a:	0003      	movs	r3, r0
}
 800196c:	0018      	movs	r0, r3
 800196e:	46bd      	mov	sp, r7
 8001970:	b002      	add	sp, #8
 8001972:	bd80      	pop	{r7, pc}

08001974 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b082      	sub	sp, #8
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d101      	bne.n	8001986 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001982:	2301      	movs	r3, #1
 8001984:	e077      	b.n	8001a76 <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4a3d      	ldr	r2, [pc, #244]	; (8001a80 <HAL_DMA_Init+0x10c>)
 800198c:	4694      	mov	ip, r2
 800198e:	4463      	add	r3, ip
 8001990:	2114      	movs	r1, #20
 8001992:	0018      	movs	r0, r3
 8001994:	f7fe fbb6 	bl	8000104 <__udivsi3>
 8001998:	0003      	movs	r3, r0
 800199a:	009a      	lsls	r2, r3, #2
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	641a      	str	r2, [r3, #64]	; 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2225      	movs	r2, #37	; 0x25
 80019a4:	2102      	movs	r1, #2
 80019a6:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	681a      	ldr	r2, [r3, #0]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4934      	ldr	r1, [pc, #208]	; (8001a84 <HAL_DMA_Init+0x110>)
 80019b4:	400a      	ands	r2, r1
 80019b6:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	6819      	ldr	r1, [r3, #0]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	689a      	ldr	r2, [r3, #8]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	68db      	ldr	r3, [r3, #12]
 80019c6:	431a      	orrs	r2, r3
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	691b      	ldr	r3, [r3, #16]
 80019cc:	431a      	orrs	r2, r3
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	695b      	ldr	r3, [r3, #20]
 80019d2:	431a      	orrs	r2, r3
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	699b      	ldr	r3, [r3, #24]
 80019d8:	431a      	orrs	r2, r3
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	69db      	ldr	r3, [r3, #28]
 80019de:	431a      	orrs	r2, r3
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6a1b      	ldr	r3, [r3, #32]
 80019e4:	431a      	orrs	r2, r3
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	430a      	orrs	r2, r1
 80019ec:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	0018      	movs	r0, r3
 80019f2:	f000 fa2b 	bl	8001e4c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	689a      	ldr	r2, [r3, #8]
 80019fa:	2380      	movs	r3, #128	; 0x80
 80019fc:	01db      	lsls	r3, r3, #7
 80019fe:	429a      	cmp	r2, r3
 8001a00:	d102      	bne.n	8001a08 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	2200      	movs	r2, #0
 8001a06:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	685a      	ldr	r2, [r3, #4]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a10:	213f      	movs	r1, #63	; 0x3f
 8001a12:	400a      	ands	r2, r1
 8001a14:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a1a:	687a      	ldr	r2, [r7, #4]
 8001a1c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001a1e:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d011      	beq.n	8001a4c <HAL_DMA_Init+0xd8>
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	2b04      	cmp	r3, #4
 8001a2e:	d80d      	bhi.n	8001a4c <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	0018      	movs	r0, r3
 8001a34:	f000 fa36 	bl	8001ea4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a44:	687a      	ldr	r2, [r7, #4]
 8001a46:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8001a48:	605a      	str	r2, [r3, #4]
 8001a4a:	e008      	b.n	8001a5e <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2200      	movs	r2, #0
 8001a50:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2200      	movs	r2, #0
 8001a56:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2200      	movs	r2, #0
 8001a62:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2225      	movs	r2, #37	; 0x25
 8001a68:	2101      	movs	r1, #1
 8001a6a:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2224      	movs	r2, #36	; 0x24
 8001a70:	2100      	movs	r1, #0
 8001a72:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001a74:	2300      	movs	r3, #0
}
 8001a76:	0018      	movs	r0, r3
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	b002      	add	sp, #8
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	46c0      	nop			; (mov r8, r8)
 8001a80:	bffdfff8 	.word	0xbffdfff8
 8001a84:	ffff800f 	.word	0xffff800f

08001a88 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b086      	sub	sp, #24
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	60f8      	str	r0, [r7, #12]
 8001a90:	60b9      	str	r1, [r7, #8]
 8001a92:	607a      	str	r2, [r7, #4]
 8001a94:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001a96:	2317      	movs	r3, #23
 8001a98:	18fb      	adds	r3, r7, r3
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	2224      	movs	r2, #36	; 0x24
 8001aa2:	5c9b      	ldrb	r3, [r3, r2]
 8001aa4:	2b01      	cmp	r3, #1
 8001aa6:	d101      	bne.n	8001aac <HAL_DMA_Start_IT+0x24>
 8001aa8:	2302      	movs	r3, #2
 8001aaa:	e06f      	b.n	8001b8c <HAL_DMA_Start_IT+0x104>
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	2224      	movs	r2, #36	; 0x24
 8001ab0:	2101      	movs	r1, #1
 8001ab2:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	2225      	movs	r2, #37	; 0x25
 8001ab8:	5c9b      	ldrb	r3, [r3, r2]
 8001aba:	b2db      	uxtb	r3, r3
 8001abc:	2b01      	cmp	r3, #1
 8001abe:	d157      	bne.n	8001b70 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	2225      	movs	r2, #37	; 0x25
 8001ac4:	2102      	movs	r1, #2
 8001ac6:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	2200      	movs	r2, #0
 8001acc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	681a      	ldr	r2, [r3, #0]
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	2101      	movs	r1, #1
 8001ada:	438a      	bics	r2, r1
 8001adc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	687a      	ldr	r2, [r7, #4]
 8001ae2:	68b9      	ldr	r1, [r7, #8]
 8001ae4:	68f8      	ldr	r0, [r7, #12]
 8001ae6:	f000 f971 	bl	8001dcc <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d008      	beq.n	8001b04 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	681a      	ldr	r2, [r3, #0]
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	210e      	movs	r1, #14
 8001afe:	430a      	orrs	r2, r1
 8001b00:	601a      	str	r2, [r3, #0]
 8001b02:	e00f      	b.n	8001b24 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	681a      	ldr	r2, [r3, #0]
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	2104      	movs	r1, #4
 8001b10:	438a      	bics	r2, r1
 8001b12:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	681a      	ldr	r2, [r3, #0]
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	210a      	movs	r1, #10
 8001b20:	430a      	orrs	r2, r1
 8001b22:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b28:	681a      	ldr	r2, [r3, #0]
 8001b2a:	2380      	movs	r3, #128	; 0x80
 8001b2c:	025b      	lsls	r3, r3, #9
 8001b2e:	4013      	ands	r3, r2
 8001b30:	d008      	beq.n	8001b44 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b36:	681a      	ldr	r2, [r3, #0]
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b3c:	2180      	movs	r1, #128	; 0x80
 8001b3e:	0049      	lsls	r1, r1, #1
 8001b40:	430a      	orrs	r2, r1
 8001b42:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d008      	beq.n	8001b5e <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b50:	681a      	ldr	r2, [r3, #0]
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b56:	2180      	movs	r1, #128	; 0x80
 8001b58:	0049      	lsls	r1, r1, #1
 8001b5a:	430a      	orrs	r2, r1
 8001b5c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	2101      	movs	r1, #1
 8001b6a:	430a      	orrs	r2, r1
 8001b6c:	601a      	str	r2, [r3, #0]
 8001b6e:	e00a      	b.n	8001b86 <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	2280      	movs	r2, #128	; 0x80
 8001b74:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	2224      	movs	r2, #36	; 0x24
 8001b7a:	2100      	movs	r1, #0
 8001b7c:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 8001b7e:	2317      	movs	r3, #23
 8001b80:	18fb      	adds	r3, r7, r3
 8001b82:	2201      	movs	r2, #1
 8001b84:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8001b86:	2317      	movs	r3, #23
 8001b88:	18fb      	adds	r3, r7, r3
 8001b8a:	781b      	ldrb	r3, [r3, #0]
}
 8001b8c:	0018      	movs	r0, r3
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	b006      	add	sp, #24
 8001b92:	bd80      	pop	{r7, pc}

08001b94 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b084      	sub	sp, #16
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b9c:	210f      	movs	r1, #15
 8001b9e:	187b      	adds	r3, r7, r1
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2225      	movs	r2, #37	; 0x25
 8001ba8:	5c9b      	ldrb	r3, [r3, r2]
 8001baa:	b2db      	uxtb	r3, r3
 8001bac:	2b02      	cmp	r3, #2
 8001bae:	d006      	beq.n	8001bbe <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2204      	movs	r2, #4
 8001bb4:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001bb6:	187b      	adds	r3, r7, r1
 8001bb8:	2201      	movs	r2, #1
 8001bba:	701a      	strb	r2, [r3, #0]
 8001bbc:	e049      	b.n	8001c52 <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	681a      	ldr	r2, [r3, #0]
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	210e      	movs	r1, #14
 8001bca:	438a      	bics	r2, r1
 8001bcc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	681a      	ldr	r2, [r3, #0]
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	2101      	movs	r1, #1
 8001bda:	438a      	bics	r2, r1
 8001bdc:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001be2:	681a      	ldr	r2, [r3, #0]
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001be8:	491d      	ldr	r1, [pc, #116]	; (8001c60 <HAL_DMA_Abort_IT+0xcc>)
 8001bea:	400a      	ands	r2, r1
 8001bec:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8001bee:	4b1d      	ldr	r3, [pc, #116]	; (8001c64 <HAL_DMA_Abort_IT+0xd0>)
 8001bf0:	6859      	ldr	r1, [r3, #4]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf6:	221c      	movs	r2, #28
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	409a      	lsls	r2, r3
 8001bfe:	4b19      	ldr	r3, [pc, #100]	; (8001c64 <HAL_DMA_Abort_IT+0xd0>)
 8001c00:	430a      	orrs	r2, r1
 8001c02:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c08:	687a      	ldr	r2, [r7, #4]
 8001c0a:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001c0c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d00c      	beq.n	8001c30 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c1a:	681a      	ldr	r2, [r3, #0]
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c20:	490f      	ldr	r1, [pc, #60]	; (8001c60 <HAL_DMA_Abort_IT+0xcc>)
 8001c22:	400a      	ands	r2, r1
 8001c24:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c2a:	687a      	ldr	r2, [r7, #4]
 8001c2c:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8001c2e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2225      	movs	r2, #37	; 0x25
 8001c34:	2101      	movs	r1, #1
 8001c36:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2224      	movs	r2, #36	; 0x24
 8001c3c:	2100      	movs	r1, #0
 8001c3e:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d004      	beq.n	8001c52 <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c4c:	687a      	ldr	r2, [r7, #4]
 8001c4e:	0010      	movs	r0, r2
 8001c50:	4798      	blx	r3
    }
  }
  return status;
 8001c52:	230f      	movs	r3, #15
 8001c54:	18fb      	adds	r3, r7, r3
 8001c56:	781b      	ldrb	r3, [r3, #0]
}
 8001c58:	0018      	movs	r0, r3
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	b004      	add	sp, #16
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	fffffeff 	.word	0xfffffeff
 8001c64:	40020000 	.word	0x40020000

08001c68 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b084      	sub	sp, #16
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8001c70:	4b55      	ldr	r3, [pc, #340]	; (8001dc8 <HAL_DMA_IRQHandler+0x160>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c82:	221c      	movs	r2, #28
 8001c84:	4013      	ands	r3, r2
 8001c86:	2204      	movs	r2, #4
 8001c88:	409a      	lsls	r2, r3
 8001c8a:	0013      	movs	r3, r2
 8001c8c:	68fa      	ldr	r2, [r7, #12]
 8001c8e:	4013      	ands	r3, r2
 8001c90:	d027      	beq.n	8001ce2 <HAL_DMA_IRQHandler+0x7a>
 8001c92:	68bb      	ldr	r3, [r7, #8]
 8001c94:	2204      	movs	r2, #4
 8001c96:	4013      	ands	r3, r2
 8001c98:	d023      	beq.n	8001ce2 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	2220      	movs	r2, #32
 8001ca2:	4013      	ands	r3, r2
 8001ca4:	d107      	bne.n	8001cb6 <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	681a      	ldr	r2, [r3, #0]
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	2104      	movs	r1, #4
 8001cb2:	438a      	bics	r2, r1
 8001cb4:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8001cb6:	4b44      	ldr	r3, [pc, #272]	; (8001dc8 <HAL_DMA_IRQHandler+0x160>)
 8001cb8:	6859      	ldr	r1, [r3, #4]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cbe:	221c      	movs	r2, #28
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	2204      	movs	r2, #4
 8001cc4:	409a      	lsls	r2, r3
 8001cc6:	4b40      	ldr	r3, [pc, #256]	; (8001dc8 <HAL_DMA_IRQHandler+0x160>)
 8001cc8:	430a      	orrs	r2, r1
 8001cca:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d100      	bne.n	8001cd6 <HAL_DMA_IRQHandler+0x6e>
 8001cd4:	e073      	b.n	8001dbe <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cda:	687a      	ldr	r2, [r7, #4]
 8001cdc:	0010      	movs	r0, r2
 8001cde:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8001ce0:	e06d      	b.n	8001dbe <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce6:	221c      	movs	r2, #28
 8001ce8:	4013      	ands	r3, r2
 8001cea:	2202      	movs	r2, #2
 8001cec:	409a      	lsls	r2, r3
 8001cee:	0013      	movs	r3, r2
 8001cf0:	68fa      	ldr	r2, [r7, #12]
 8001cf2:	4013      	ands	r3, r2
 8001cf4:	d02e      	beq.n	8001d54 <HAL_DMA_IRQHandler+0xec>
 8001cf6:	68bb      	ldr	r3, [r7, #8]
 8001cf8:	2202      	movs	r2, #2
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	d02a      	beq.n	8001d54 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	2220      	movs	r2, #32
 8001d06:	4013      	ands	r3, r2
 8001d08:	d10b      	bne.n	8001d22 <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	681a      	ldr	r2, [r3, #0]
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	210a      	movs	r1, #10
 8001d16:	438a      	bics	r2, r1
 8001d18:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2225      	movs	r2, #37	; 0x25
 8001d1e:	2101      	movs	r1, #1
 8001d20:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8001d22:	4b29      	ldr	r3, [pc, #164]	; (8001dc8 <HAL_DMA_IRQHandler+0x160>)
 8001d24:	6859      	ldr	r1, [r3, #4]
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d2a:	221c      	movs	r2, #28
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	2202      	movs	r2, #2
 8001d30:	409a      	lsls	r2, r3
 8001d32:	4b25      	ldr	r3, [pc, #148]	; (8001dc8 <HAL_DMA_IRQHandler+0x160>)
 8001d34:	430a      	orrs	r2, r1
 8001d36:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2224      	movs	r2, #36	; 0x24
 8001d3c:	2100      	movs	r1, #0
 8001d3e:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d03a      	beq.n	8001dbe <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d4c:	687a      	ldr	r2, [r7, #4]
 8001d4e:	0010      	movs	r0, r2
 8001d50:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8001d52:	e034      	b.n	8001dbe <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d58:	221c      	movs	r2, #28
 8001d5a:	4013      	ands	r3, r2
 8001d5c:	2208      	movs	r2, #8
 8001d5e:	409a      	lsls	r2, r3
 8001d60:	0013      	movs	r3, r2
 8001d62:	68fa      	ldr	r2, [r7, #12]
 8001d64:	4013      	ands	r3, r2
 8001d66:	d02b      	beq.n	8001dc0 <HAL_DMA_IRQHandler+0x158>
 8001d68:	68bb      	ldr	r3, [r7, #8]
 8001d6a:	2208      	movs	r2, #8
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	d027      	beq.n	8001dc0 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	681a      	ldr	r2, [r3, #0]
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	210e      	movs	r1, #14
 8001d7c:	438a      	bics	r2, r1
 8001d7e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8001d80:	4b11      	ldr	r3, [pc, #68]	; (8001dc8 <HAL_DMA_IRQHandler+0x160>)
 8001d82:	6859      	ldr	r1, [r3, #4]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d88:	221c      	movs	r2, #28
 8001d8a:	4013      	ands	r3, r2
 8001d8c:	2201      	movs	r2, #1
 8001d8e:	409a      	lsls	r2, r3
 8001d90:	4b0d      	ldr	r3, [pc, #52]	; (8001dc8 <HAL_DMA_IRQHandler+0x160>)
 8001d92:	430a      	orrs	r2, r1
 8001d94:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2201      	movs	r2, #1
 8001d9a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2225      	movs	r2, #37	; 0x25
 8001da0:	2101      	movs	r1, #1
 8001da2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2224      	movs	r2, #36	; 0x24
 8001da8:	2100      	movs	r1, #0
 8001daa:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d005      	beq.n	8001dc0 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001db8:	687a      	ldr	r2, [r7, #4]
 8001dba:	0010      	movs	r0, r2
 8001dbc:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001dbe:	46c0      	nop			; (mov r8, r8)
 8001dc0:	46c0      	nop			; (mov r8, r8)
}
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	b004      	add	sp, #16
 8001dc6:	bd80      	pop	{r7, pc}
 8001dc8:	40020000 	.word	0x40020000

08001dcc <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b084      	sub	sp, #16
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	60f8      	str	r0, [r7, #12]
 8001dd4:	60b9      	str	r1, [r7, #8]
 8001dd6:	607a      	str	r2, [r7, #4]
 8001dd8:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001dde:	68fa      	ldr	r2, [r7, #12]
 8001de0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001de2:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d004      	beq.n	8001df6 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001df0:	68fa      	ldr	r2, [r7, #12]
 8001df2:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8001df4:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8001df6:	4b14      	ldr	r3, [pc, #80]	; (8001e48 <DMA_SetConfig+0x7c>)
 8001df8:	6859      	ldr	r1, [r3, #4]
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dfe:	221c      	movs	r2, #28
 8001e00:	4013      	ands	r3, r2
 8001e02:	2201      	movs	r2, #1
 8001e04:	409a      	lsls	r2, r3
 8001e06:	4b10      	ldr	r3, [pc, #64]	; (8001e48 <DMA_SetConfig+0x7c>)
 8001e08:	430a      	orrs	r2, r1
 8001e0a:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	683a      	ldr	r2, [r7, #0]
 8001e12:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	689b      	ldr	r3, [r3, #8]
 8001e18:	2b10      	cmp	r3, #16
 8001e1a:	d108      	bne.n	8001e2e <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	687a      	ldr	r2, [r7, #4]
 8001e22:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	68ba      	ldr	r2, [r7, #8]
 8001e2a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001e2c:	e007      	b.n	8001e3e <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	68ba      	ldr	r2, [r7, #8]
 8001e34:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	687a      	ldr	r2, [r7, #4]
 8001e3c:	60da      	str	r2, [r3, #12]
}
 8001e3e:	46c0      	nop			; (mov r8, r8)
 8001e40:	46bd      	mov	sp, r7
 8001e42:	b004      	add	sp, #16
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	46c0      	nop			; (mov r8, r8)
 8001e48:	40020000 	.word	0x40020000

08001e4c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b084      	sub	sp, #16
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e58:	089b      	lsrs	r3, r3, #2
 8001e5a:	4a10      	ldr	r2, [pc, #64]	; (8001e9c <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8001e5c:	4694      	mov	ip, r2
 8001e5e:	4463      	add	r3, ip
 8001e60:	009b      	lsls	r3, r3, #2
 8001e62:	001a      	movs	r2, r3
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	645a      	str	r2, [r3, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	001a      	movs	r2, r3
 8001e6e:	23ff      	movs	r3, #255	; 0xff
 8001e70:	4013      	ands	r3, r2
 8001e72:	3b08      	subs	r3, #8
 8001e74:	2114      	movs	r1, #20
 8001e76:	0018      	movs	r0, r3
 8001e78:	f7fe f944 	bl	8000104 <__udivsi3>
 8001e7c:	0003      	movs	r3, r0
 8001e7e:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	4a07      	ldr	r2, [pc, #28]	; (8001ea0 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8001e84:	649a      	str	r2, [r3, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	221f      	movs	r2, #31
 8001e8a:	4013      	ands	r3, r2
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	409a      	lsls	r2, r3
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8001e94:	46c0      	nop			; (mov r8, r8)
 8001e96:	46bd      	mov	sp, r7
 8001e98:	b004      	add	sp, #16
 8001e9a:	bd80      	pop	{r7, pc}
 8001e9c:	10008200 	.word	0x10008200
 8001ea0:	40020880 	.word	0x40020880

08001ea4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b084      	sub	sp, #16
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	223f      	movs	r2, #63	; 0x3f
 8001eb2:	4013      	ands	r3, r2
 8001eb4:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	4a0a      	ldr	r2, [pc, #40]	; (8001ee4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001eba:	4694      	mov	ip, r2
 8001ebc:	4463      	add	r3, ip
 8001ebe:	009b      	lsls	r3, r3, #2
 8001ec0:	001a      	movs	r2, r3
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	651a      	str	r2, [r3, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	4a07      	ldr	r2, [pc, #28]	; (8001ee8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001eca:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	3b01      	subs	r3, #1
 8001ed0:	2203      	movs	r2, #3
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	2201      	movs	r2, #1
 8001ed6:	409a      	lsls	r2, r3
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	659a      	str	r2, [r3, #88]	; 0x58
}
 8001edc:	46c0      	nop			; (mov r8, r8)
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	b004      	add	sp, #16
 8001ee2:	bd80      	pop	{r7, pc}
 8001ee4:	1000823f 	.word	0x1000823f
 8001ee8:	40020940 	.word	0x40020940

08001eec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b086      	sub	sp, #24
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
 8001ef4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001efa:	e147      	b.n	800218c <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	2101      	movs	r1, #1
 8001f02:	697a      	ldr	r2, [r7, #20]
 8001f04:	4091      	lsls	r1, r2
 8001f06:	000a      	movs	r2, r1
 8001f08:	4013      	ands	r3, r2
 8001f0a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d100      	bne.n	8001f14 <HAL_GPIO_Init+0x28>
 8001f12:	e138      	b.n	8002186 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	2203      	movs	r2, #3
 8001f1a:	4013      	ands	r3, r2
 8001f1c:	2b01      	cmp	r3, #1
 8001f1e:	d005      	beq.n	8001f2c <HAL_GPIO_Init+0x40>
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	2203      	movs	r2, #3
 8001f26:	4013      	ands	r3, r2
 8001f28:	2b02      	cmp	r3, #2
 8001f2a:	d130      	bne.n	8001f8e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	689b      	ldr	r3, [r3, #8]
 8001f30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	005b      	lsls	r3, r3, #1
 8001f36:	2203      	movs	r2, #3
 8001f38:	409a      	lsls	r2, r3
 8001f3a:	0013      	movs	r3, r2
 8001f3c:	43da      	mvns	r2, r3
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	4013      	ands	r3, r2
 8001f42:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	68da      	ldr	r2, [r3, #12]
 8001f48:	697b      	ldr	r3, [r7, #20]
 8001f4a:	005b      	lsls	r3, r3, #1
 8001f4c:	409a      	lsls	r2, r3
 8001f4e:	0013      	movs	r3, r2
 8001f50:	693a      	ldr	r2, [r7, #16]
 8001f52:	4313      	orrs	r3, r2
 8001f54:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	693a      	ldr	r2, [r7, #16]
 8001f5a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001f62:	2201      	movs	r2, #1
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	409a      	lsls	r2, r3
 8001f68:	0013      	movs	r3, r2
 8001f6a:	43da      	mvns	r2, r3
 8001f6c:	693b      	ldr	r3, [r7, #16]
 8001f6e:	4013      	ands	r3, r2
 8001f70:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	091b      	lsrs	r3, r3, #4
 8001f78:	2201      	movs	r2, #1
 8001f7a:	401a      	ands	r2, r3
 8001f7c:	697b      	ldr	r3, [r7, #20]
 8001f7e:	409a      	lsls	r2, r3
 8001f80:	0013      	movs	r3, r2
 8001f82:	693a      	ldr	r2, [r7, #16]
 8001f84:	4313      	orrs	r3, r2
 8001f86:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	693a      	ldr	r2, [r7, #16]
 8001f8c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	2203      	movs	r2, #3
 8001f94:	4013      	ands	r3, r2
 8001f96:	2b03      	cmp	r3, #3
 8001f98:	d017      	beq.n	8001fca <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	68db      	ldr	r3, [r3, #12]
 8001f9e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001fa0:	697b      	ldr	r3, [r7, #20]
 8001fa2:	005b      	lsls	r3, r3, #1
 8001fa4:	2203      	movs	r2, #3
 8001fa6:	409a      	lsls	r2, r3
 8001fa8:	0013      	movs	r3, r2
 8001faa:	43da      	mvns	r2, r3
 8001fac:	693b      	ldr	r3, [r7, #16]
 8001fae:	4013      	ands	r3, r2
 8001fb0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	689a      	ldr	r2, [r3, #8]
 8001fb6:	697b      	ldr	r3, [r7, #20]
 8001fb8:	005b      	lsls	r3, r3, #1
 8001fba:	409a      	lsls	r2, r3
 8001fbc:	0013      	movs	r3, r2
 8001fbe:	693a      	ldr	r2, [r7, #16]
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	693a      	ldr	r2, [r7, #16]
 8001fc8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	2203      	movs	r2, #3
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	2b02      	cmp	r3, #2
 8001fd4:	d123      	bne.n	800201e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001fd6:	697b      	ldr	r3, [r7, #20]
 8001fd8:	08da      	lsrs	r2, r3, #3
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	3208      	adds	r2, #8
 8001fde:	0092      	lsls	r2, r2, #2
 8001fe0:	58d3      	ldr	r3, [r2, r3]
 8001fe2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001fe4:	697b      	ldr	r3, [r7, #20]
 8001fe6:	2207      	movs	r2, #7
 8001fe8:	4013      	ands	r3, r2
 8001fea:	009b      	lsls	r3, r3, #2
 8001fec:	220f      	movs	r2, #15
 8001fee:	409a      	lsls	r2, r3
 8001ff0:	0013      	movs	r3, r2
 8001ff2:	43da      	mvns	r2, r3
 8001ff4:	693b      	ldr	r3, [r7, #16]
 8001ff6:	4013      	ands	r3, r2
 8001ff8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	691a      	ldr	r2, [r3, #16]
 8001ffe:	697b      	ldr	r3, [r7, #20]
 8002000:	2107      	movs	r1, #7
 8002002:	400b      	ands	r3, r1
 8002004:	009b      	lsls	r3, r3, #2
 8002006:	409a      	lsls	r2, r3
 8002008:	0013      	movs	r3, r2
 800200a:	693a      	ldr	r2, [r7, #16]
 800200c:	4313      	orrs	r3, r2
 800200e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002010:	697b      	ldr	r3, [r7, #20]
 8002012:	08da      	lsrs	r2, r3, #3
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	3208      	adds	r2, #8
 8002018:	0092      	lsls	r2, r2, #2
 800201a:	6939      	ldr	r1, [r7, #16]
 800201c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002024:	697b      	ldr	r3, [r7, #20]
 8002026:	005b      	lsls	r3, r3, #1
 8002028:	2203      	movs	r2, #3
 800202a:	409a      	lsls	r2, r3
 800202c:	0013      	movs	r3, r2
 800202e:	43da      	mvns	r2, r3
 8002030:	693b      	ldr	r3, [r7, #16]
 8002032:	4013      	ands	r3, r2
 8002034:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	2203      	movs	r2, #3
 800203c:	401a      	ands	r2, r3
 800203e:	697b      	ldr	r3, [r7, #20]
 8002040:	005b      	lsls	r3, r3, #1
 8002042:	409a      	lsls	r2, r3
 8002044:	0013      	movs	r3, r2
 8002046:	693a      	ldr	r2, [r7, #16]
 8002048:	4313      	orrs	r3, r2
 800204a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	693a      	ldr	r2, [r7, #16]
 8002050:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	685a      	ldr	r2, [r3, #4]
 8002056:	23c0      	movs	r3, #192	; 0xc0
 8002058:	029b      	lsls	r3, r3, #10
 800205a:	4013      	ands	r3, r2
 800205c:	d100      	bne.n	8002060 <HAL_GPIO_Init+0x174>
 800205e:	e092      	b.n	8002186 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8002060:	4a50      	ldr	r2, [pc, #320]	; (80021a4 <HAL_GPIO_Init+0x2b8>)
 8002062:	697b      	ldr	r3, [r7, #20]
 8002064:	089b      	lsrs	r3, r3, #2
 8002066:	3318      	adds	r3, #24
 8002068:	009b      	lsls	r3, r3, #2
 800206a:	589b      	ldr	r3, [r3, r2]
 800206c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800206e:	697b      	ldr	r3, [r7, #20]
 8002070:	2203      	movs	r2, #3
 8002072:	4013      	ands	r3, r2
 8002074:	00db      	lsls	r3, r3, #3
 8002076:	220f      	movs	r2, #15
 8002078:	409a      	lsls	r2, r3
 800207a:	0013      	movs	r3, r2
 800207c:	43da      	mvns	r2, r3
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	4013      	ands	r3, r2
 8002082:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8002084:	687a      	ldr	r2, [r7, #4]
 8002086:	23a0      	movs	r3, #160	; 0xa0
 8002088:	05db      	lsls	r3, r3, #23
 800208a:	429a      	cmp	r2, r3
 800208c:	d013      	beq.n	80020b6 <HAL_GPIO_Init+0x1ca>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	4a45      	ldr	r2, [pc, #276]	; (80021a8 <HAL_GPIO_Init+0x2bc>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d00d      	beq.n	80020b2 <HAL_GPIO_Init+0x1c6>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	4a44      	ldr	r2, [pc, #272]	; (80021ac <HAL_GPIO_Init+0x2c0>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d007      	beq.n	80020ae <HAL_GPIO_Init+0x1c2>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	4a43      	ldr	r2, [pc, #268]	; (80021b0 <HAL_GPIO_Init+0x2c4>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d101      	bne.n	80020aa <HAL_GPIO_Init+0x1be>
 80020a6:	2303      	movs	r3, #3
 80020a8:	e006      	b.n	80020b8 <HAL_GPIO_Init+0x1cc>
 80020aa:	2305      	movs	r3, #5
 80020ac:	e004      	b.n	80020b8 <HAL_GPIO_Init+0x1cc>
 80020ae:	2302      	movs	r3, #2
 80020b0:	e002      	b.n	80020b8 <HAL_GPIO_Init+0x1cc>
 80020b2:	2301      	movs	r3, #1
 80020b4:	e000      	b.n	80020b8 <HAL_GPIO_Init+0x1cc>
 80020b6:	2300      	movs	r3, #0
 80020b8:	697a      	ldr	r2, [r7, #20]
 80020ba:	2103      	movs	r1, #3
 80020bc:	400a      	ands	r2, r1
 80020be:	00d2      	lsls	r2, r2, #3
 80020c0:	4093      	lsls	r3, r2
 80020c2:	693a      	ldr	r2, [r7, #16]
 80020c4:	4313      	orrs	r3, r2
 80020c6:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80020c8:	4936      	ldr	r1, [pc, #216]	; (80021a4 <HAL_GPIO_Init+0x2b8>)
 80020ca:	697b      	ldr	r3, [r7, #20]
 80020cc:	089b      	lsrs	r3, r3, #2
 80020ce:	3318      	adds	r3, #24
 80020d0:	009b      	lsls	r3, r3, #2
 80020d2:	693a      	ldr	r2, [r7, #16]
 80020d4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80020d6:	4b33      	ldr	r3, [pc, #204]	; (80021a4 <HAL_GPIO_Init+0x2b8>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	43da      	mvns	r2, r3
 80020e0:	693b      	ldr	r3, [r7, #16]
 80020e2:	4013      	ands	r3, r2
 80020e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	685a      	ldr	r2, [r3, #4]
 80020ea:	2380      	movs	r3, #128	; 0x80
 80020ec:	035b      	lsls	r3, r3, #13
 80020ee:	4013      	ands	r3, r2
 80020f0:	d003      	beq.n	80020fa <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80020f2:	693a      	ldr	r2, [r7, #16]
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	4313      	orrs	r3, r2
 80020f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80020fa:	4b2a      	ldr	r3, [pc, #168]	; (80021a4 <HAL_GPIO_Init+0x2b8>)
 80020fc:	693a      	ldr	r2, [r7, #16]
 80020fe:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8002100:	4b28      	ldr	r3, [pc, #160]	; (80021a4 <HAL_GPIO_Init+0x2b8>)
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	43da      	mvns	r2, r3
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	4013      	ands	r3, r2
 800210e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	685a      	ldr	r2, [r3, #4]
 8002114:	2380      	movs	r3, #128	; 0x80
 8002116:	039b      	lsls	r3, r3, #14
 8002118:	4013      	ands	r3, r2
 800211a:	d003      	beq.n	8002124 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 800211c:	693a      	ldr	r2, [r7, #16]
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	4313      	orrs	r3, r2
 8002122:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002124:	4b1f      	ldr	r3, [pc, #124]	; (80021a4 <HAL_GPIO_Init+0x2b8>)
 8002126:	693a      	ldr	r2, [r7, #16]
 8002128:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800212a:	4a1e      	ldr	r2, [pc, #120]	; (80021a4 <HAL_GPIO_Init+0x2b8>)
 800212c:	2384      	movs	r3, #132	; 0x84
 800212e:	58d3      	ldr	r3, [r2, r3]
 8002130:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	43da      	mvns	r2, r3
 8002136:	693b      	ldr	r3, [r7, #16]
 8002138:	4013      	ands	r3, r2
 800213a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	685a      	ldr	r2, [r3, #4]
 8002140:	2380      	movs	r3, #128	; 0x80
 8002142:	029b      	lsls	r3, r3, #10
 8002144:	4013      	ands	r3, r2
 8002146:	d003      	beq.n	8002150 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8002148:	693a      	ldr	r2, [r7, #16]
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	4313      	orrs	r3, r2
 800214e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002150:	4914      	ldr	r1, [pc, #80]	; (80021a4 <HAL_GPIO_Init+0x2b8>)
 8002152:	2284      	movs	r2, #132	; 0x84
 8002154:	693b      	ldr	r3, [r7, #16]
 8002156:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8002158:	4a12      	ldr	r2, [pc, #72]	; (80021a4 <HAL_GPIO_Init+0x2b8>)
 800215a:	2380      	movs	r3, #128	; 0x80
 800215c:	58d3      	ldr	r3, [r2, r3]
 800215e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	43da      	mvns	r2, r3
 8002164:	693b      	ldr	r3, [r7, #16]
 8002166:	4013      	ands	r3, r2
 8002168:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	685a      	ldr	r2, [r3, #4]
 800216e:	2380      	movs	r3, #128	; 0x80
 8002170:	025b      	lsls	r3, r3, #9
 8002172:	4013      	ands	r3, r2
 8002174:	d003      	beq.n	800217e <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8002176:	693a      	ldr	r2, [r7, #16]
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	4313      	orrs	r3, r2
 800217c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800217e:	4909      	ldr	r1, [pc, #36]	; (80021a4 <HAL_GPIO_Init+0x2b8>)
 8002180:	2280      	movs	r2, #128	; 0x80
 8002182:	693b      	ldr	r3, [r7, #16]
 8002184:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	3301      	adds	r3, #1
 800218a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	681a      	ldr	r2, [r3, #0]
 8002190:	697b      	ldr	r3, [r7, #20]
 8002192:	40da      	lsrs	r2, r3
 8002194:	1e13      	subs	r3, r2, #0
 8002196:	d000      	beq.n	800219a <HAL_GPIO_Init+0x2ae>
 8002198:	e6b0      	b.n	8001efc <HAL_GPIO_Init+0x10>
  }
}
 800219a:	46c0      	nop			; (mov r8, r8)
 800219c:	46c0      	nop			; (mov r8, r8)
 800219e:	46bd      	mov	sp, r7
 80021a0:	b006      	add	sp, #24
 80021a2:	bd80      	pop	{r7, pc}
 80021a4:	40021800 	.word	0x40021800
 80021a8:	50000400 	.word	0x50000400
 80021ac:	50000800 	.word	0x50000800
 80021b0:	50000c00 	.word	0x50000c00

080021b4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b082      	sub	sp, #8
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	0002      	movs	r2, r0
 80021bc:	1dbb      	adds	r3, r7, #6
 80021be:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 80021c0:	4b10      	ldr	r3, [pc, #64]	; (8002204 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80021c2:	68db      	ldr	r3, [r3, #12]
 80021c4:	1dba      	adds	r2, r7, #6
 80021c6:	8812      	ldrh	r2, [r2, #0]
 80021c8:	4013      	ands	r3, r2
 80021ca:	d008      	beq.n	80021de <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 80021cc:	4b0d      	ldr	r3, [pc, #52]	; (8002204 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80021ce:	1dba      	adds	r2, r7, #6
 80021d0:	8812      	ldrh	r2, [r2, #0]
 80021d2:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 80021d4:	1dbb      	adds	r3, r7, #6
 80021d6:	881b      	ldrh	r3, [r3, #0]
 80021d8:	0018      	movs	r0, r3
 80021da:	f000 f815 	bl	8002208 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 80021de:	4b09      	ldr	r3, [pc, #36]	; (8002204 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80021e0:	691b      	ldr	r3, [r3, #16]
 80021e2:	1dba      	adds	r2, r7, #6
 80021e4:	8812      	ldrh	r2, [r2, #0]
 80021e6:	4013      	ands	r3, r2
 80021e8:	d008      	beq.n	80021fc <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 80021ea:	4b06      	ldr	r3, [pc, #24]	; (8002204 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80021ec:	1dba      	adds	r2, r7, #6
 80021ee:	8812      	ldrh	r2, [r2, #0]
 80021f0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 80021f2:	1dbb      	adds	r3, r7, #6
 80021f4:	881b      	ldrh	r3, [r3, #0]
 80021f6:	0018      	movs	r0, r3
 80021f8:	f7fe f90e 	bl	8000418 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 80021fc:	46c0      	nop			; (mov r8, r8)
 80021fe:	46bd      	mov	sp, r7
 8002200:	b002      	add	sp, #8
 8002202:	bd80      	pop	{r7, pc}
 8002204:	40021800 	.word	0x40021800

08002208 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b082      	sub	sp, #8
 800220c:	af00      	add	r7, sp, #0
 800220e:	0002      	movs	r2, r0
 8002210:	1dbb      	adds	r3, r7, #6
 8002212:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 8002214:	46c0      	nop			; (mov r8, r8)
 8002216:	46bd      	mov	sp, r7
 8002218:	b002      	add	sp, #8
 800221a:	bd80      	pop	{r7, pc}

0800221c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b084      	sub	sp, #16
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002224:	4b19      	ldr	r3, [pc, #100]	; (800228c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a19      	ldr	r2, [pc, #100]	; (8002290 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800222a:	4013      	ands	r3, r2
 800222c:	0019      	movs	r1, r3
 800222e:	4b17      	ldr	r3, [pc, #92]	; (800228c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002230:	687a      	ldr	r2, [r7, #4]
 8002232:	430a      	orrs	r2, r1
 8002234:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002236:	687a      	ldr	r2, [r7, #4]
 8002238:	2380      	movs	r3, #128	; 0x80
 800223a:	009b      	lsls	r3, r3, #2
 800223c:	429a      	cmp	r2, r3
 800223e:	d11f      	bne.n	8002280 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8002240:	4b14      	ldr	r3, [pc, #80]	; (8002294 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8002242:	681a      	ldr	r2, [r3, #0]
 8002244:	0013      	movs	r3, r2
 8002246:	005b      	lsls	r3, r3, #1
 8002248:	189b      	adds	r3, r3, r2
 800224a:	005b      	lsls	r3, r3, #1
 800224c:	4912      	ldr	r1, [pc, #72]	; (8002298 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800224e:	0018      	movs	r0, r3
 8002250:	f7fd ff58 	bl	8000104 <__udivsi3>
 8002254:	0003      	movs	r3, r0
 8002256:	3301      	adds	r3, #1
 8002258:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800225a:	e008      	b.n	800226e <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d003      	beq.n	800226a <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	3b01      	subs	r3, #1
 8002266:	60fb      	str	r3, [r7, #12]
 8002268:	e001      	b.n	800226e <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800226a:	2303      	movs	r3, #3
 800226c:	e009      	b.n	8002282 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800226e:	4b07      	ldr	r3, [pc, #28]	; (800228c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002270:	695a      	ldr	r2, [r3, #20]
 8002272:	2380      	movs	r3, #128	; 0x80
 8002274:	00db      	lsls	r3, r3, #3
 8002276:	401a      	ands	r2, r3
 8002278:	2380      	movs	r3, #128	; 0x80
 800227a:	00db      	lsls	r3, r3, #3
 800227c:	429a      	cmp	r2, r3
 800227e:	d0ed      	beq.n	800225c <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8002280:	2300      	movs	r3, #0
}
 8002282:	0018      	movs	r0, r3
 8002284:	46bd      	mov	sp, r7
 8002286:	b004      	add	sp, #16
 8002288:	bd80      	pop	{r7, pc}
 800228a:	46c0      	nop			; (mov r8, r8)
 800228c:	40007000 	.word	0x40007000
 8002290:	fffff9ff 	.word	0xfffff9ff
 8002294:	20000004 	.word	0x20000004
 8002298:	000f4240 	.word	0x000f4240

0800229c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b088      	sub	sp, #32
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d101      	bne.n	80022ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	e2fe      	b.n	80028ac <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	2201      	movs	r2, #1
 80022b4:	4013      	ands	r3, r2
 80022b6:	d100      	bne.n	80022ba <HAL_RCC_OscConfig+0x1e>
 80022b8:	e07c      	b.n	80023b4 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80022ba:	4bc3      	ldr	r3, [pc, #780]	; (80025c8 <HAL_RCC_OscConfig+0x32c>)
 80022bc:	689b      	ldr	r3, [r3, #8]
 80022be:	2238      	movs	r2, #56	; 0x38
 80022c0:	4013      	ands	r3, r2
 80022c2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80022c4:	4bc0      	ldr	r3, [pc, #768]	; (80025c8 <HAL_RCC_OscConfig+0x32c>)
 80022c6:	68db      	ldr	r3, [r3, #12]
 80022c8:	2203      	movs	r2, #3
 80022ca:	4013      	ands	r3, r2
 80022cc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80022ce:	69bb      	ldr	r3, [r7, #24]
 80022d0:	2b10      	cmp	r3, #16
 80022d2:	d102      	bne.n	80022da <HAL_RCC_OscConfig+0x3e>
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	2b03      	cmp	r3, #3
 80022d8:	d002      	beq.n	80022e0 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80022da:	69bb      	ldr	r3, [r7, #24]
 80022dc:	2b08      	cmp	r3, #8
 80022de:	d10b      	bne.n	80022f8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022e0:	4bb9      	ldr	r3, [pc, #740]	; (80025c8 <HAL_RCC_OscConfig+0x32c>)
 80022e2:	681a      	ldr	r2, [r3, #0]
 80022e4:	2380      	movs	r3, #128	; 0x80
 80022e6:	029b      	lsls	r3, r3, #10
 80022e8:	4013      	ands	r3, r2
 80022ea:	d062      	beq.n	80023b2 <HAL_RCC_OscConfig+0x116>
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d15e      	bne.n	80023b2 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80022f4:	2301      	movs	r3, #1
 80022f6:	e2d9      	b.n	80028ac <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	685a      	ldr	r2, [r3, #4]
 80022fc:	2380      	movs	r3, #128	; 0x80
 80022fe:	025b      	lsls	r3, r3, #9
 8002300:	429a      	cmp	r2, r3
 8002302:	d107      	bne.n	8002314 <HAL_RCC_OscConfig+0x78>
 8002304:	4bb0      	ldr	r3, [pc, #704]	; (80025c8 <HAL_RCC_OscConfig+0x32c>)
 8002306:	681a      	ldr	r2, [r3, #0]
 8002308:	4baf      	ldr	r3, [pc, #700]	; (80025c8 <HAL_RCC_OscConfig+0x32c>)
 800230a:	2180      	movs	r1, #128	; 0x80
 800230c:	0249      	lsls	r1, r1, #9
 800230e:	430a      	orrs	r2, r1
 8002310:	601a      	str	r2, [r3, #0]
 8002312:	e020      	b.n	8002356 <HAL_RCC_OscConfig+0xba>
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	685a      	ldr	r2, [r3, #4]
 8002318:	23a0      	movs	r3, #160	; 0xa0
 800231a:	02db      	lsls	r3, r3, #11
 800231c:	429a      	cmp	r2, r3
 800231e:	d10e      	bne.n	800233e <HAL_RCC_OscConfig+0xa2>
 8002320:	4ba9      	ldr	r3, [pc, #676]	; (80025c8 <HAL_RCC_OscConfig+0x32c>)
 8002322:	681a      	ldr	r2, [r3, #0]
 8002324:	4ba8      	ldr	r3, [pc, #672]	; (80025c8 <HAL_RCC_OscConfig+0x32c>)
 8002326:	2180      	movs	r1, #128	; 0x80
 8002328:	02c9      	lsls	r1, r1, #11
 800232a:	430a      	orrs	r2, r1
 800232c:	601a      	str	r2, [r3, #0]
 800232e:	4ba6      	ldr	r3, [pc, #664]	; (80025c8 <HAL_RCC_OscConfig+0x32c>)
 8002330:	681a      	ldr	r2, [r3, #0]
 8002332:	4ba5      	ldr	r3, [pc, #660]	; (80025c8 <HAL_RCC_OscConfig+0x32c>)
 8002334:	2180      	movs	r1, #128	; 0x80
 8002336:	0249      	lsls	r1, r1, #9
 8002338:	430a      	orrs	r2, r1
 800233a:	601a      	str	r2, [r3, #0]
 800233c:	e00b      	b.n	8002356 <HAL_RCC_OscConfig+0xba>
 800233e:	4ba2      	ldr	r3, [pc, #648]	; (80025c8 <HAL_RCC_OscConfig+0x32c>)
 8002340:	681a      	ldr	r2, [r3, #0]
 8002342:	4ba1      	ldr	r3, [pc, #644]	; (80025c8 <HAL_RCC_OscConfig+0x32c>)
 8002344:	49a1      	ldr	r1, [pc, #644]	; (80025cc <HAL_RCC_OscConfig+0x330>)
 8002346:	400a      	ands	r2, r1
 8002348:	601a      	str	r2, [r3, #0]
 800234a:	4b9f      	ldr	r3, [pc, #636]	; (80025c8 <HAL_RCC_OscConfig+0x32c>)
 800234c:	681a      	ldr	r2, [r3, #0]
 800234e:	4b9e      	ldr	r3, [pc, #632]	; (80025c8 <HAL_RCC_OscConfig+0x32c>)
 8002350:	499f      	ldr	r1, [pc, #636]	; (80025d0 <HAL_RCC_OscConfig+0x334>)
 8002352:	400a      	ands	r2, r1
 8002354:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d014      	beq.n	8002388 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800235e:	f7ff f9fd 	bl	800175c <HAL_GetTick>
 8002362:	0003      	movs	r3, r0
 8002364:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002366:	e008      	b.n	800237a <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002368:	f7ff f9f8 	bl	800175c <HAL_GetTick>
 800236c:	0002      	movs	r2, r0
 800236e:	693b      	ldr	r3, [r7, #16]
 8002370:	1ad3      	subs	r3, r2, r3
 8002372:	2b64      	cmp	r3, #100	; 0x64
 8002374:	d901      	bls.n	800237a <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8002376:	2303      	movs	r3, #3
 8002378:	e298      	b.n	80028ac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800237a:	4b93      	ldr	r3, [pc, #588]	; (80025c8 <HAL_RCC_OscConfig+0x32c>)
 800237c:	681a      	ldr	r2, [r3, #0]
 800237e:	2380      	movs	r3, #128	; 0x80
 8002380:	029b      	lsls	r3, r3, #10
 8002382:	4013      	ands	r3, r2
 8002384:	d0f0      	beq.n	8002368 <HAL_RCC_OscConfig+0xcc>
 8002386:	e015      	b.n	80023b4 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002388:	f7ff f9e8 	bl	800175c <HAL_GetTick>
 800238c:	0003      	movs	r3, r0
 800238e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002390:	e008      	b.n	80023a4 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002392:	f7ff f9e3 	bl	800175c <HAL_GetTick>
 8002396:	0002      	movs	r2, r0
 8002398:	693b      	ldr	r3, [r7, #16]
 800239a:	1ad3      	subs	r3, r2, r3
 800239c:	2b64      	cmp	r3, #100	; 0x64
 800239e:	d901      	bls.n	80023a4 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80023a0:	2303      	movs	r3, #3
 80023a2:	e283      	b.n	80028ac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80023a4:	4b88      	ldr	r3, [pc, #544]	; (80025c8 <HAL_RCC_OscConfig+0x32c>)
 80023a6:	681a      	ldr	r2, [r3, #0]
 80023a8:	2380      	movs	r3, #128	; 0x80
 80023aa:	029b      	lsls	r3, r3, #10
 80023ac:	4013      	ands	r3, r2
 80023ae:	d1f0      	bne.n	8002392 <HAL_RCC_OscConfig+0xf6>
 80023b0:	e000      	b.n	80023b4 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023b2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	2202      	movs	r2, #2
 80023ba:	4013      	ands	r3, r2
 80023bc:	d100      	bne.n	80023c0 <HAL_RCC_OscConfig+0x124>
 80023be:	e099      	b.n	80024f4 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80023c0:	4b81      	ldr	r3, [pc, #516]	; (80025c8 <HAL_RCC_OscConfig+0x32c>)
 80023c2:	689b      	ldr	r3, [r3, #8]
 80023c4:	2238      	movs	r2, #56	; 0x38
 80023c6:	4013      	ands	r3, r2
 80023c8:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80023ca:	4b7f      	ldr	r3, [pc, #508]	; (80025c8 <HAL_RCC_OscConfig+0x32c>)
 80023cc:	68db      	ldr	r3, [r3, #12]
 80023ce:	2203      	movs	r2, #3
 80023d0:	4013      	ands	r3, r2
 80023d2:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80023d4:	69bb      	ldr	r3, [r7, #24]
 80023d6:	2b10      	cmp	r3, #16
 80023d8:	d102      	bne.n	80023e0 <HAL_RCC_OscConfig+0x144>
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	2b02      	cmp	r3, #2
 80023de:	d002      	beq.n	80023e6 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80023e0:	69bb      	ldr	r3, [r7, #24]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d135      	bne.n	8002452 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80023e6:	4b78      	ldr	r3, [pc, #480]	; (80025c8 <HAL_RCC_OscConfig+0x32c>)
 80023e8:	681a      	ldr	r2, [r3, #0]
 80023ea:	2380      	movs	r3, #128	; 0x80
 80023ec:	00db      	lsls	r3, r3, #3
 80023ee:	4013      	ands	r3, r2
 80023f0:	d005      	beq.n	80023fe <HAL_RCC_OscConfig+0x162>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	68db      	ldr	r3, [r3, #12]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d101      	bne.n	80023fe <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80023fa:	2301      	movs	r3, #1
 80023fc:	e256      	b.n	80028ac <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023fe:	4b72      	ldr	r3, [pc, #456]	; (80025c8 <HAL_RCC_OscConfig+0x32c>)
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	4a74      	ldr	r2, [pc, #464]	; (80025d4 <HAL_RCC_OscConfig+0x338>)
 8002404:	4013      	ands	r3, r2
 8002406:	0019      	movs	r1, r3
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	695b      	ldr	r3, [r3, #20]
 800240c:	021a      	lsls	r2, r3, #8
 800240e:	4b6e      	ldr	r3, [pc, #440]	; (80025c8 <HAL_RCC_OscConfig+0x32c>)
 8002410:	430a      	orrs	r2, r1
 8002412:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002414:	69bb      	ldr	r3, [r7, #24]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d112      	bne.n	8002440 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800241a:	4b6b      	ldr	r3, [pc, #428]	; (80025c8 <HAL_RCC_OscConfig+0x32c>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4a6e      	ldr	r2, [pc, #440]	; (80025d8 <HAL_RCC_OscConfig+0x33c>)
 8002420:	4013      	ands	r3, r2
 8002422:	0019      	movs	r1, r3
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	691a      	ldr	r2, [r3, #16]
 8002428:	4b67      	ldr	r3, [pc, #412]	; (80025c8 <HAL_RCC_OscConfig+0x32c>)
 800242a:	430a      	orrs	r2, r1
 800242c:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800242e:	4b66      	ldr	r3, [pc, #408]	; (80025c8 <HAL_RCC_OscConfig+0x32c>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	0adb      	lsrs	r3, r3, #11
 8002434:	2207      	movs	r2, #7
 8002436:	4013      	ands	r3, r2
 8002438:	4a68      	ldr	r2, [pc, #416]	; (80025dc <HAL_RCC_OscConfig+0x340>)
 800243a:	40da      	lsrs	r2, r3
 800243c:	4b68      	ldr	r3, [pc, #416]	; (80025e0 <HAL_RCC_OscConfig+0x344>)
 800243e:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002440:	4b68      	ldr	r3, [pc, #416]	; (80025e4 <HAL_RCC_OscConfig+0x348>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	0018      	movs	r0, r3
 8002446:	f7ff f92d 	bl	80016a4 <HAL_InitTick>
 800244a:	1e03      	subs	r3, r0, #0
 800244c:	d051      	beq.n	80024f2 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800244e:	2301      	movs	r3, #1
 8002450:	e22c      	b.n	80028ac <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	68db      	ldr	r3, [r3, #12]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d030      	beq.n	80024bc <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800245a:	4b5b      	ldr	r3, [pc, #364]	; (80025c8 <HAL_RCC_OscConfig+0x32c>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a5e      	ldr	r2, [pc, #376]	; (80025d8 <HAL_RCC_OscConfig+0x33c>)
 8002460:	4013      	ands	r3, r2
 8002462:	0019      	movs	r1, r3
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	691a      	ldr	r2, [r3, #16]
 8002468:	4b57      	ldr	r3, [pc, #348]	; (80025c8 <HAL_RCC_OscConfig+0x32c>)
 800246a:	430a      	orrs	r2, r1
 800246c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800246e:	4b56      	ldr	r3, [pc, #344]	; (80025c8 <HAL_RCC_OscConfig+0x32c>)
 8002470:	681a      	ldr	r2, [r3, #0]
 8002472:	4b55      	ldr	r3, [pc, #340]	; (80025c8 <HAL_RCC_OscConfig+0x32c>)
 8002474:	2180      	movs	r1, #128	; 0x80
 8002476:	0049      	lsls	r1, r1, #1
 8002478:	430a      	orrs	r2, r1
 800247a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800247c:	f7ff f96e 	bl	800175c <HAL_GetTick>
 8002480:	0003      	movs	r3, r0
 8002482:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002484:	e008      	b.n	8002498 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002486:	f7ff f969 	bl	800175c <HAL_GetTick>
 800248a:	0002      	movs	r2, r0
 800248c:	693b      	ldr	r3, [r7, #16]
 800248e:	1ad3      	subs	r3, r2, r3
 8002490:	2b02      	cmp	r3, #2
 8002492:	d901      	bls.n	8002498 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8002494:	2303      	movs	r3, #3
 8002496:	e209      	b.n	80028ac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002498:	4b4b      	ldr	r3, [pc, #300]	; (80025c8 <HAL_RCC_OscConfig+0x32c>)
 800249a:	681a      	ldr	r2, [r3, #0]
 800249c:	2380      	movs	r3, #128	; 0x80
 800249e:	00db      	lsls	r3, r3, #3
 80024a0:	4013      	ands	r3, r2
 80024a2:	d0f0      	beq.n	8002486 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024a4:	4b48      	ldr	r3, [pc, #288]	; (80025c8 <HAL_RCC_OscConfig+0x32c>)
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	4a4a      	ldr	r2, [pc, #296]	; (80025d4 <HAL_RCC_OscConfig+0x338>)
 80024aa:	4013      	ands	r3, r2
 80024ac:	0019      	movs	r1, r3
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	695b      	ldr	r3, [r3, #20]
 80024b2:	021a      	lsls	r2, r3, #8
 80024b4:	4b44      	ldr	r3, [pc, #272]	; (80025c8 <HAL_RCC_OscConfig+0x32c>)
 80024b6:	430a      	orrs	r2, r1
 80024b8:	605a      	str	r2, [r3, #4]
 80024ba:	e01b      	b.n	80024f4 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80024bc:	4b42      	ldr	r3, [pc, #264]	; (80025c8 <HAL_RCC_OscConfig+0x32c>)
 80024be:	681a      	ldr	r2, [r3, #0]
 80024c0:	4b41      	ldr	r3, [pc, #260]	; (80025c8 <HAL_RCC_OscConfig+0x32c>)
 80024c2:	4949      	ldr	r1, [pc, #292]	; (80025e8 <HAL_RCC_OscConfig+0x34c>)
 80024c4:	400a      	ands	r2, r1
 80024c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024c8:	f7ff f948 	bl	800175c <HAL_GetTick>
 80024cc:	0003      	movs	r3, r0
 80024ce:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80024d0:	e008      	b.n	80024e4 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024d2:	f7ff f943 	bl	800175c <HAL_GetTick>
 80024d6:	0002      	movs	r2, r0
 80024d8:	693b      	ldr	r3, [r7, #16]
 80024da:	1ad3      	subs	r3, r2, r3
 80024dc:	2b02      	cmp	r3, #2
 80024de:	d901      	bls.n	80024e4 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80024e0:	2303      	movs	r3, #3
 80024e2:	e1e3      	b.n	80028ac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80024e4:	4b38      	ldr	r3, [pc, #224]	; (80025c8 <HAL_RCC_OscConfig+0x32c>)
 80024e6:	681a      	ldr	r2, [r3, #0]
 80024e8:	2380      	movs	r3, #128	; 0x80
 80024ea:	00db      	lsls	r3, r3, #3
 80024ec:	4013      	ands	r3, r2
 80024ee:	d1f0      	bne.n	80024d2 <HAL_RCC_OscConfig+0x236>
 80024f0:	e000      	b.n	80024f4 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80024f2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	2208      	movs	r2, #8
 80024fa:	4013      	ands	r3, r2
 80024fc:	d047      	beq.n	800258e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80024fe:	4b32      	ldr	r3, [pc, #200]	; (80025c8 <HAL_RCC_OscConfig+0x32c>)
 8002500:	689b      	ldr	r3, [r3, #8]
 8002502:	2238      	movs	r2, #56	; 0x38
 8002504:	4013      	ands	r3, r2
 8002506:	2b18      	cmp	r3, #24
 8002508:	d10a      	bne.n	8002520 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800250a:	4b2f      	ldr	r3, [pc, #188]	; (80025c8 <HAL_RCC_OscConfig+0x32c>)
 800250c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800250e:	2202      	movs	r2, #2
 8002510:	4013      	ands	r3, r2
 8002512:	d03c      	beq.n	800258e <HAL_RCC_OscConfig+0x2f2>
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	699b      	ldr	r3, [r3, #24]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d138      	bne.n	800258e <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 800251c:	2301      	movs	r3, #1
 800251e:	e1c5      	b.n	80028ac <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	699b      	ldr	r3, [r3, #24]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d019      	beq.n	800255c <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8002528:	4b27      	ldr	r3, [pc, #156]	; (80025c8 <HAL_RCC_OscConfig+0x32c>)
 800252a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800252c:	4b26      	ldr	r3, [pc, #152]	; (80025c8 <HAL_RCC_OscConfig+0x32c>)
 800252e:	2101      	movs	r1, #1
 8002530:	430a      	orrs	r2, r1
 8002532:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002534:	f7ff f912 	bl	800175c <HAL_GetTick>
 8002538:	0003      	movs	r3, r0
 800253a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800253c:	e008      	b.n	8002550 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800253e:	f7ff f90d 	bl	800175c <HAL_GetTick>
 8002542:	0002      	movs	r2, r0
 8002544:	693b      	ldr	r3, [r7, #16]
 8002546:	1ad3      	subs	r3, r2, r3
 8002548:	2b02      	cmp	r3, #2
 800254a:	d901      	bls.n	8002550 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 800254c:	2303      	movs	r3, #3
 800254e:	e1ad      	b.n	80028ac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002550:	4b1d      	ldr	r3, [pc, #116]	; (80025c8 <HAL_RCC_OscConfig+0x32c>)
 8002552:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002554:	2202      	movs	r2, #2
 8002556:	4013      	ands	r3, r2
 8002558:	d0f1      	beq.n	800253e <HAL_RCC_OscConfig+0x2a2>
 800255a:	e018      	b.n	800258e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800255c:	4b1a      	ldr	r3, [pc, #104]	; (80025c8 <HAL_RCC_OscConfig+0x32c>)
 800255e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002560:	4b19      	ldr	r3, [pc, #100]	; (80025c8 <HAL_RCC_OscConfig+0x32c>)
 8002562:	2101      	movs	r1, #1
 8002564:	438a      	bics	r2, r1
 8002566:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002568:	f7ff f8f8 	bl	800175c <HAL_GetTick>
 800256c:	0003      	movs	r3, r0
 800256e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002570:	e008      	b.n	8002584 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002572:	f7ff f8f3 	bl	800175c <HAL_GetTick>
 8002576:	0002      	movs	r2, r0
 8002578:	693b      	ldr	r3, [r7, #16]
 800257a:	1ad3      	subs	r3, r2, r3
 800257c:	2b02      	cmp	r3, #2
 800257e:	d901      	bls.n	8002584 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8002580:	2303      	movs	r3, #3
 8002582:	e193      	b.n	80028ac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002584:	4b10      	ldr	r3, [pc, #64]	; (80025c8 <HAL_RCC_OscConfig+0x32c>)
 8002586:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002588:	2202      	movs	r2, #2
 800258a:	4013      	ands	r3, r2
 800258c:	d1f1      	bne.n	8002572 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	2204      	movs	r2, #4
 8002594:	4013      	ands	r3, r2
 8002596:	d100      	bne.n	800259a <HAL_RCC_OscConfig+0x2fe>
 8002598:	e0c6      	b.n	8002728 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800259a:	231f      	movs	r3, #31
 800259c:	18fb      	adds	r3, r7, r3
 800259e:	2200      	movs	r2, #0
 80025a0:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80025a2:	4b09      	ldr	r3, [pc, #36]	; (80025c8 <HAL_RCC_OscConfig+0x32c>)
 80025a4:	689b      	ldr	r3, [r3, #8]
 80025a6:	2238      	movs	r2, #56	; 0x38
 80025a8:	4013      	ands	r3, r2
 80025aa:	2b20      	cmp	r3, #32
 80025ac:	d11e      	bne.n	80025ec <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80025ae:	4b06      	ldr	r3, [pc, #24]	; (80025c8 <HAL_RCC_OscConfig+0x32c>)
 80025b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025b2:	2202      	movs	r2, #2
 80025b4:	4013      	ands	r3, r2
 80025b6:	d100      	bne.n	80025ba <HAL_RCC_OscConfig+0x31e>
 80025b8:	e0b6      	b.n	8002728 <HAL_RCC_OscConfig+0x48c>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	689b      	ldr	r3, [r3, #8]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d000      	beq.n	80025c4 <HAL_RCC_OscConfig+0x328>
 80025c2:	e0b1      	b.n	8002728 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80025c4:	2301      	movs	r3, #1
 80025c6:	e171      	b.n	80028ac <HAL_RCC_OscConfig+0x610>
 80025c8:	40021000 	.word	0x40021000
 80025cc:	fffeffff 	.word	0xfffeffff
 80025d0:	fffbffff 	.word	0xfffbffff
 80025d4:	ffff80ff 	.word	0xffff80ff
 80025d8:	ffffc7ff 	.word	0xffffc7ff
 80025dc:	00f42400 	.word	0x00f42400
 80025e0:	20000004 	.word	0x20000004
 80025e4:	20000008 	.word	0x20000008
 80025e8:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80025ec:	4bb1      	ldr	r3, [pc, #708]	; (80028b4 <HAL_RCC_OscConfig+0x618>)
 80025ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80025f0:	2380      	movs	r3, #128	; 0x80
 80025f2:	055b      	lsls	r3, r3, #21
 80025f4:	4013      	ands	r3, r2
 80025f6:	d101      	bne.n	80025fc <HAL_RCC_OscConfig+0x360>
 80025f8:	2301      	movs	r3, #1
 80025fa:	e000      	b.n	80025fe <HAL_RCC_OscConfig+0x362>
 80025fc:	2300      	movs	r3, #0
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d011      	beq.n	8002626 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8002602:	4bac      	ldr	r3, [pc, #688]	; (80028b4 <HAL_RCC_OscConfig+0x618>)
 8002604:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002606:	4bab      	ldr	r3, [pc, #684]	; (80028b4 <HAL_RCC_OscConfig+0x618>)
 8002608:	2180      	movs	r1, #128	; 0x80
 800260a:	0549      	lsls	r1, r1, #21
 800260c:	430a      	orrs	r2, r1
 800260e:	63da      	str	r2, [r3, #60]	; 0x3c
 8002610:	4ba8      	ldr	r3, [pc, #672]	; (80028b4 <HAL_RCC_OscConfig+0x618>)
 8002612:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002614:	2380      	movs	r3, #128	; 0x80
 8002616:	055b      	lsls	r3, r3, #21
 8002618:	4013      	ands	r3, r2
 800261a:	60fb      	str	r3, [r7, #12]
 800261c:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800261e:	231f      	movs	r3, #31
 8002620:	18fb      	adds	r3, r7, r3
 8002622:	2201      	movs	r2, #1
 8002624:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002626:	4ba4      	ldr	r3, [pc, #656]	; (80028b8 <HAL_RCC_OscConfig+0x61c>)
 8002628:	681a      	ldr	r2, [r3, #0]
 800262a:	2380      	movs	r3, #128	; 0x80
 800262c:	005b      	lsls	r3, r3, #1
 800262e:	4013      	ands	r3, r2
 8002630:	d11a      	bne.n	8002668 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002632:	4ba1      	ldr	r3, [pc, #644]	; (80028b8 <HAL_RCC_OscConfig+0x61c>)
 8002634:	681a      	ldr	r2, [r3, #0]
 8002636:	4ba0      	ldr	r3, [pc, #640]	; (80028b8 <HAL_RCC_OscConfig+0x61c>)
 8002638:	2180      	movs	r1, #128	; 0x80
 800263a:	0049      	lsls	r1, r1, #1
 800263c:	430a      	orrs	r2, r1
 800263e:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8002640:	f7ff f88c 	bl	800175c <HAL_GetTick>
 8002644:	0003      	movs	r3, r0
 8002646:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002648:	e008      	b.n	800265c <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800264a:	f7ff f887 	bl	800175c <HAL_GetTick>
 800264e:	0002      	movs	r2, r0
 8002650:	693b      	ldr	r3, [r7, #16]
 8002652:	1ad3      	subs	r3, r2, r3
 8002654:	2b02      	cmp	r3, #2
 8002656:	d901      	bls.n	800265c <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8002658:	2303      	movs	r3, #3
 800265a:	e127      	b.n	80028ac <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800265c:	4b96      	ldr	r3, [pc, #600]	; (80028b8 <HAL_RCC_OscConfig+0x61c>)
 800265e:	681a      	ldr	r2, [r3, #0]
 8002660:	2380      	movs	r3, #128	; 0x80
 8002662:	005b      	lsls	r3, r3, #1
 8002664:	4013      	ands	r3, r2
 8002666:	d0f0      	beq.n	800264a <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	689b      	ldr	r3, [r3, #8]
 800266c:	2b01      	cmp	r3, #1
 800266e:	d106      	bne.n	800267e <HAL_RCC_OscConfig+0x3e2>
 8002670:	4b90      	ldr	r3, [pc, #576]	; (80028b4 <HAL_RCC_OscConfig+0x618>)
 8002672:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002674:	4b8f      	ldr	r3, [pc, #572]	; (80028b4 <HAL_RCC_OscConfig+0x618>)
 8002676:	2101      	movs	r1, #1
 8002678:	430a      	orrs	r2, r1
 800267a:	65da      	str	r2, [r3, #92]	; 0x5c
 800267c:	e01c      	b.n	80026b8 <HAL_RCC_OscConfig+0x41c>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	689b      	ldr	r3, [r3, #8]
 8002682:	2b05      	cmp	r3, #5
 8002684:	d10c      	bne.n	80026a0 <HAL_RCC_OscConfig+0x404>
 8002686:	4b8b      	ldr	r3, [pc, #556]	; (80028b4 <HAL_RCC_OscConfig+0x618>)
 8002688:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800268a:	4b8a      	ldr	r3, [pc, #552]	; (80028b4 <HAL_RCC_OscConfig+0x618>)
 800268c:	2104      	movs	r1, #4
 800268e:	430a      	orrs	r2, r1
 8002690:	65da      	str	r2, [r3, #92]	; 0x5c
 8002692:	4b88      	ldr	r3, [pc, #544]	; (80028b4 <HAL_RCC_OscConfig+0x618>)
 8002694:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002696:	4b87      	ldr	r3, [pc, #540]	; (80028b4 <HAL_RCC_OscConfig+0x618>)
 8002698:	2101      	movs	r1, #1
 800269a:	430a      	orrs	r2, r1
 800269c:	65da      	str	r2, [r3, #92]	; 0x5c
 800269e:	e00b      	b.n	80026b8 <HAL_RCC_OscConfig+0x41c>
 80026a0:	4b84      	ldr	r3, [pc, #528]	; (80028b4 <HAL_RCC_OscConfig+0x618>)
 80026a2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80026a4:	4b83      	ldr	r3, [pc, #524]	; (80028b4 <HAL_RCC_OscConfig+0x618>)
 80026a6:	2101      	movs	r1, #1
 80026a8:	438a      	bics	r2, r1
 80026aa:	65da      	str	r2, [r3, #92]	; 0x5c
 80026ac:	4b81      	ldr	r3, [pc, #516]	; (80028b4 <HAL_RCC_OscConfig+0x618>)
 80026ae:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80026b0:	4b80      	ldr	r3, [pc, #512]	; (80028b4 <HAL_RCC_OscConfig+0x618>)
 80026b2:	2104      	movs	r1, #4
 80026b4:	438a      	bics	r2, r1
 80026b6:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	689b      	ldr	r3, [r3, #8]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d014      	beq.n	80026ea <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026c0:	f7ff f84c 	bl	800175c <HAL_GetTick>
 80026c4:	0003      	movs	r3, r0
 80026c6:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026c8:	e009      	b.n	80026de <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026ca:	f7ff f847 	bl	800175c <HAL_GetTick>
 80026ce:	0002      	movs	r2, r0
 80026d0:	693b      	ldr	r3, [r7, #16]
 80026d2:	1ad3      	subs	r3, r2, r3
 80026d4:	4a79      	ldr	r2, [pc, #484]	; (80028bc <HAL_RCC_OscConfig+0x620>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d901      	bls.n	80026de <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80026da:	2303      	movs	r3, #3
 80026dc:	e0e6      	b.n	80028ac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026de:	4b75      	ldr	r3, [pc, #468]	; (80028b4 <HAL_RCC_OscConfig+0x618>)
 80026e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026e2:	2202      	movs	r2, #2
 80026e4:	4013      	ands	r3, r2
 80026e6:	d0f0      	beq.n	80026ca <HAL_RCC_OscConfig+0x42e>
 80026e8:	e013      	b.n	8002712 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026ea:	f7ff f837 	bl	800175c <HAL_GetTick>
 80026ee:	0003      	movs	r3, r0
 80026f0:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80026f2:	e009      	b.n	8002708 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026f4:	f7ff f832 	bl	800175c <HAL_GetTick>
 80026f8:	0002      	movs	r2, r0
 80026fa:	693b      	ldr	r3, [r7, #16]
 80026fc:	1ad3      	subs	r3, r2, r3
 80026fe:	4a6f      	ldr	r2, [pc, #444]	; (80028bc <HAL_RCC_OscConfig+0x620>)
 8002700:	4293      	cmp	r3, r2
 8002702:	d901      	bls.n	8002708 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8002704:	2303      	movs	r3, #3
 8002706:	e0d1      	b.n	80028ac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002708:	4b6a      	ldr	r3, [pc, #424]	; (80028b4 <HAL_RCC_OscConfig+0x618>)
 800270a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800270c:	2202      	movs	r2, #2
 800270e:	4013      	ands	r3, r2
 8002710:	d1f0      	bne.n	80026f4 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002712:	231f      	movs	r3, #31
 8002714:	18fb      	adds	r3, r7, r3
 8002716:	781b      	ldrb	r3, [r3, #0]
 8002718:	2b01      	cmp	r3, #1
 800271a:	d105      	bne.n	8002728 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800271c:	4b65      	ldr	r3, [pc, #404]	; (80028b4 <HAL_RCC_OscConfig+0x618>)
 800271e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002720:	4b64      	ldr	r3, [pc, #400]	; (80028b4 <HAL_RCC_OscConfig+0x618>)
 8002722:	4967      	ldr	r1, [pc, #412]	; (80028c0 <HAL_RCC_OscConfig+0x624>)
 8002724:	400a      	ands	r2, r1
 8002726:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	69db      	ldr	r3, [r3, #28]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d100      	bne.n	8002732 <HAL_RCC_OscConfig+0x496>
 8002730:	e0bb      	b.n	80028aa <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002732:	4b60      	ldr	r3, [pc, #384]	; (80028b4 <HAL_RCC_OscConfig+0x618>)
 8002734:	689b      	ldr	r3, [r3, #8]
 8002736:	2238      	movs	r2, #56	; 0x38
 8002738:	4013      	ands	r3, r2
 800273a:	2b10      	cmp	r3, #16
 800273c:	d100      	bne.n	8002740 <HAL_RCC_OscConfig+0x4a4>
 800273e:	e07b      	b.n	8002838 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	69db      	ldr	r3, [r3, #28]
 8002744:	2b02      	cmp	r3, #2
 8002746:	d156      	bne.n	80027f6 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002748:	4b5a      	ldr	r3, [pc, #360]	; (80028b4 <HAL_RCC_OscConfig+0x618>)
 800274a:	681a      	ldr	r2, [r3, #0]
 800274c:	4b59      	ldr	r3, [pc, #356]	; (80028b4 <HAL_RCC_OscConfig+0x618>)
 800274e:	495d      	ldr	r1, [pc, #372]	; (80028c4 <HAL_RCC_OscConfig+0x628>)
 8002750:	400a      	ands	r2, r1
 8002752:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002754:	f7ff f802 	bl	800175c <HAL_GetTick>
 8002758:	0003      	movs	r3, r0
 800275a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800275c:	e008      	b.n	8002770 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800275e:	f7fe fffd 	bl	800175c <HAL_GetTick>
 8002762:	0002      	movs	r2, r0
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	1ad3      	subs	r3, r2, r3
 8002768:	2b02      	cmp	r3, #2
 800276a:	d901      	bls.n	8002770 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 800276c:	2303      	movs	r3, #3
 800276e:	e09d      	b.n	80028ac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002770:	4b50      	ldr	r3, [pc, #320]	; (80028b4 <HAL_RCC_OscConfig+0x618>)
 8002772:	681a      	ldr	r2, [r3, #0]
 8002774:	2380      	movs	r3, #128	; 0x80
 8002776:	049b      	lsls	r3, r3, #18
 8002778:	4013      	ands	r3, r2
 800277a:	d1f0      	bne.n	800275e <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800277c:	4b4d      	ldr	r3, [pc, #308]	; (80028b4 <HAL_RCC_OscConfig+0x618>)
 800277e:	68db      	ldr	r3, [r3, #12]
 8002780:	4a51      	ldr	r2, [pc, #324]	; (80028c8 <HAL_RCC_OscConfig+0x62c>)
 8002782:	4013      	ands	r3, r2
 8002784:	0019      	movs	r1, r3
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6a1a      	ldr	r2, [r3, #32]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800278e:	431a      	orrs	r2, r3
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002794:	021b      	lsls	r3, r3, #8
 8002796:	431a      	orrs	r2, r3
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800279c:	431a      	orrs	r2, r3
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a2:	431a      	orrs	r2, r3
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027a8:	431a      	orrs	r2, r3
 80027aa:	4b42      	ldr	r3, [pc, #264]	; (80028b4 <HAL_RCC_OscConfig+0x618>)
 80027ac:	430a      	orrs	r2, r1
 80027ae:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027b0:	4b40      	ldr	r3, [pc, #256]	; (80028b4 <HAL_RCC_OscConfig+0x618>)
 80027b2:	681a      	ldr	r2, [r3, #0]
 80027b4:	4b3f      	ldr	r3, [pc, #252]	; (80028b4 <HAL_RCC_OscConfig+0x618>)
 80027b6:	2180      	movs	r1, #128	; 0x80
 80027b8:	0449      	lsls	r1, r1, #17
 80027ba:	430a      	orrs	r2, r1
 80027bc:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80027be:	4b3d      	ldr	r3, [pc, #244]	; (80028b4 <HAL_RCC_OscConfig+0x618>)
 80027c0:	68da      	ldr	r2, [r3, #12]
 80027c2:	4b3c      	ldr	r3, [pc, #240]	; (80028b4 <HAL_RCC_OscConfig+0x618>)
 80027c4:	2180      	movs	r1, #128	; 0x80
 80027c6:	0549      	lsls	r1, r1, #21
 80027c8:	430a      	orrs	r2, r1
 80027ca:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027cc:	f7fe ffc6 	bl	800175c <HAL_GetTick>
 80027d0:	0003      	movs	r3, r0
 80027d2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027d4:	e008      	b.n	80027e8 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027d6:	f7fe ffc1 	bl	800175c <HAL_GetTick>
 80027da:	0002      	movs	r2, r0
 80027dc:	693b      	ldr	r3, [r7, #16]
 80027de:	1ad3      	subs	r3, r2, r3
 80027e0:	2b02      	cmp	r3, #2
 80027e2:	d901      	bls.n	80027e8 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 80027e4:	2303      	movs	r3, #3
 80027e6:	e061      	b.n	80028ac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027e8:	4b32      	ldr	r3, [pc, #200]	; (80028b4 <HAL_RCC_OscConfig+0x618>)
 80027ea:	681a      	ldr	r2, [r3, #0]
 80027ec:	2380      	movs	r3, #128	; 0x80
 80027ee:	049b      	lsls	r3, r3, #18
 80027f0:	4013      	ands	r3, r2
 80027f2:	d0f0      	beq.n	80027d6 <HAL_RCC_OscConfig+0x53a>
 80027f4:	e059      	b.n	80028aa <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027f6:	4b2f      	ldr	r3, [pc, #188]	; (80028b4 <HAL_RCC_OscConfig+0x618>)
 80027f8:	681a      	ldr	r2, [r3, #0]
 80027fa:	4b2e      	ldr	r3, [pc, #184]	; (80028b4 <HAL_RCC_OscConfig+0x618>)
 80027fc:	4931      	ldr	r1, [pc, #196]	; (80028c4 <HAL_RCC_OscConfig+0x628>)
 80027fe:	400a      	ands	r2, r1
 8002800:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002802:	f7fe ffab 	bl	800175c <HAL_GetTick>
 8002806:	0003      	movs	r3, r0
 8002808:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800280a:	e008      	b.n	800281e <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800280c:	f7fe ffa6 	bl	800175c <HAL_GetTick>
 8002810:	0002      	movs	r2, r0
 8002812:	693b      	ldr	r3, [r7, #16]
 8002814:	1ad3      	subs	r3, r2, r3
 8002816:	2b02      	cmp	r3, #2
 8002818:	d901      	bls.n	800281e <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 800281a:	2303      	movs	r3, #3
 800281c:	e046      	b.n	80028ac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800281e:	4b25      	ldr	r3, [pc, #148]	; (80028b4 <HAL_RCC_OscConfig+0x618>)
 8002820:	681a      	ldr	r2, [r3, #0]
 8002822:	2380      	movs	r3, #128	; 0x80
 8002824:	049b      	lsls	r3, r3, #18
 8002826:	4013      	ands	r3, r2
 8002828:	d1f0      	bne.n	800280c <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 800282a:	4b22      	ldr	r3, [pc, #136]	; (80028b4 <HAL_RCC_OscConfig+0x618>)
 800282c:	68da      	ldr	r2, [r3, #12]
 800282e:	4b21      	ldr	r3, [pc, #132]	; (80028b4 <HAL_RCC_OscConfig+0x618>)
 8002830:	4926      	ldr	r1, [pc, #152]	; (80028cc <HAL_RCC_OscConfig+0x630>)
 8002832:	400a      	ands	r2, r1
 8002834:	60da      	str	r2, [r3, #12]
 8002836:	e038      	b.n	80028aa <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	69db      	ldr	r3, [r3, #28]
 800283c:	2b01      	cmp	r3, #1
 800283e:	d101      	bne.n	8002844 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8002840:	2301      	movs	r3, #1
 8002842:	e033      	b.n	80028ac <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8002844:	4b1b      	ldr	r3, [pc, #108]	; (80028b4 <HAL_RCC_OscConfig+0x618>)
 8002846:	68db      	ldr	r3, [r3, #12]
 8002848:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800284a:	697b      	ldr	r3, [r7, #20]
 800284c:	2203      	movs	r2, #3
 800284e:	401a      	ands	r2, r3
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6a1b      	ldr	r3, [r3, #32]
 8002854:	429a      	cmp	r2, r3
 8002856:	d126      	bne.n	80028a6 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002858:	697b      	ldr	r3, [r7, #20]
 800285a:	2270      	movs	r2, #112	; 0x70
 800285c:	401a      	ands	r2, r3
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002862:	429a      	cmp	r2, r3
 8002864:	d11f      	bne.n	80028a6 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002866:	697a      	ldr	r2, [r7, #20]
 8002868:	23fe      	movs	r3, #254	; 0xfe
 800286a:	01db      	lsls	r3, r3, #7
 800286c:	401a      	ands	r2, r3
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002872:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002874:	429a      	cmp	r2, r3
 8002876:	d116      	bne.n	80028a6 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002878:	697a      	ldr	r2, [r7, #20]
 800287a:	23f8      	movs	r3, #248	; 0xf8
 800287c:	039b      	lsls	r3, r3, #14
 800287e:	401a      	ands	r2, r3
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002884:	429a      	cmp	r2, r3
 8002886:	d10e      	bne.n	80028a6 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002888:	697a      	ldr	r2, [r7, #20]
 800288a:	23e0      	movs	r3, #224	; 0xe0
 800288c:	051b      	lsls	r3, r3, #20
 800288e:	401a      	ands	r2, r3
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002894:	429a      	cmp	r2, r3
 8002896:	d106      	bne.n	80028a6 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	0f5b      	lsrs	r3, r3, #29
 800289c:	075a      	lsls	r2, r3, #29
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80028a2:	429a      	cmp	r2, r3
 80028a4:	d001      	beq.n	80028aa <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	e000      	b.n	80028ac <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 80028aa:	2300      	movs	r3, #0
}
 80028ac:	0018      	movs	r0, r3
 80028ae:	46bd      	mov	sp, r7
 80028b0:	b008      	add	sp, #32
 80028b2:	bd80      	pop	{r7, pc}
 80028b4:	40021000 	.word	0x40021000
 80028b8:	40007000 	.word	0x40007000
 80028bc:	00001388 	.word	0x00001388
 80028c0:	efffffff 	.word	0xefffffff
 80028c4:	feffffff 	.word	0xfeffffff
 80028c8:	11c1808c 	.word	0x11c1808c
 80028cc:	eefefffc 	.word	0xeefefffc

080028d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b084      	sub	sp, #16
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
 80028d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d101      	bne.n	80028e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028e0:	2301      	movs	r3, #1
 80028e2:	e0e9      	b.n	8002ab8 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80028e4:	4b76      	ldr	r3, [pc, #472]	; (8002ac0 <HAL_RCC_ClockConfig+0x1f0>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	2207      	movs	r2, #7
 80028ea:	4013      	ands	r3, r2
 80028ec:	683a      	ldr	r2, [r7, #0]
 80028ee:	429a      	cmp	r2, r3
 80028f0:	d91e      	bls.n	8002930 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028f2:	4b73      	ldr	r3, [pc, #460]	; (8002ac0 <HAL_RCC_ClockConfig+0x1f0>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	2207      	movs	r2, #7
 80028f8:	4393      	bics	r3, r2
 80028fa:	0019      	movs	r1, r3
 80028fc:	4b70      	ldr	r3, [pc, #448]	; (8002ac0 <HAL_RCC_ClockConfig+0x1f0>)
 80028fe:	683a      	ldr	r2, [r7, #0]
 8002900:	430a      	orrs	r2, r1
 8002902:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002904:	f7fe ff2a 	bl	800175c <HAL_GetTick>
 8002908:	0003      	movs	r3, r0
 800290a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800290c:	e009      	b.n	8002922 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800290e:	f7fe ff25 	bl	800175c <HAL_GetTick>
 8002912:	0002      	movs	r2, r0
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	1ad3      	subs	r3, r2, r3
 8002918:	4a6a      	ldr	r2, [pc, #424]	; (8002ac4 <HAL_RCC_ClockConfig+0x1f4>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d901      	bls.n	8002922 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800291e:	2303      	movs	r3, #3
 8002920:	e0ca      	b.n	8002ab8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002922:	4b67      	ldr	r3, [pc, #412]	; (8002ac0 <HAL_RCC_ClockConfig+0x1f0>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	2207      	movs	r2, #7
 8002928:	4013      	ands	r3, r2
 800292a:	683a      	ldr	r2, [r7, #0]
 800292c:	429a      	cmp	r2, r3
 800292e:	d1ee      	bne.n	800290e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	2202      	movs	r2, #2
 8002936:	4013      	ands	r3, r2
 8002938:	d015      	beq.n	8002966 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	2204      	movs	r2, #4
 8002940:	4013      	ands	r3, r2
 8002942:	d006      	beq.n	8002952 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002944:	4b60      	ldr	r3, [pc, #384]	; (8002ac8 <HAL_RCC_ClockConfig+0x1f8>)
 8002946:	689a      	ldr	r2, [r3, #8]
 8002948:	4b5f      	ldr	r3, [pc, #380]	; (8002ac8 <HAL_RCC_ClockConfig+0x1f8>)
 800294a:	21e0      	movs	r1, #224	; 0xe0
 800294c:	01c9      	lsls	r1, r1, #7
 800294e:	430a      	orrs	r2, r1
 8002950:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002952:	4b5d      	ldr	r3, [pc, #372]	; (8002ac8 <HAL_RCC_ClockConfig+0x1f8>)
 8002954:	689b      	ldr	r3, [r3, #8]
 8002956:	4a5d      	ldr	r2, [pc, #372]	; (8002acc <HAL_RCC_ClockConfig+0x1fc>)
 8002958:	4013      	ands	r3, r2
 800295a:	0019      	movs	r1, r3
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	689a      	ldr	r2, [r3, #8]
 8002960:	4b59      	ldr	r3, [pc, #356]	; (8002ac8 <HAL_RCC_ClockConfig+0x1f8>)
 8002962:	430a      	orrs	r2, r1
 8002964:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	2201      	movs	r2, #1
 800296c:	4013      	ands	r3, r2
 800296e:	d057      	beq.n	8002a20 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	2b01      	cmp	r3, #1
 8002976:	d107      	bne.n	8002988 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002978:	4b53      	ldr	r3, [pc, #332]	; (8002ac8 <HAL_RCC_ClockConfig+0x1f8>)
 800297a:	681a      	ldr	r2, [r3, #0]
 800297c:	2380      	movs	r3, #128	; 0x80
 800297e:	029b      	lsls	r3, r3, #10
 8002980:	4013      	ands	r3, r2
 8002982:	d12b      	bne.n	80029dc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002984:	2301      	movs	r3, #1
 8002986:	e097      	b.n	8002ab8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	2b02      	cmp	r3, #2
 800298e:	d107      	bne.n	80029a0 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002990:	4b4d      	ldr	r3, [pc, #308]	; (8002ac8 <HAL_RCC_ClockConfig+0x1f8>)
 8002992:	681a      	ldr	r2, [r3, #0]
 8002994:	2380      	movs	r3, #128	; 0x80
 8002996:	049b      	lsls	r3, r3, #18
 8002998:	4013      	ands	r3, r2
 800299a:	d11f      	bne.n	80029dc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800299c:	2301      	movs	r3, #1
 800299e:	e08b      	b.n	8002ab8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d107      	bne.n	80029b8 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80029a8:	4b47      	ldr	r3, [pc, #284]	; (8002ac8 <HAL_RCC_ClockConfig+0x1f8>)
 80029aa:	681a      	ldr	r2, [r3, #0]
 80029ac:	2380      	movs	r3, #128	; 0x80
 80029ae:	00db      	lsls	r3, r3, #3
 80029b0:	4013      	ands	r3, r2
 80029b2:	d113      	bne.n	80029dc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80029b4:	2301      	movs	r3, #1
 80029b6:	e07f      	b.n	8002ab8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	2b03      	cmp	r3, #3
 80029be:	d106      	bne.n	80029ce <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80029c0:	4b41      	ldr	r3, [pc, #260]	; (8002ac8 <HAL_RCC_ClockConfig+0x1f8>)
 80029c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029c4:	2202      	movs	r2, #2
 80029c6:	4013      	ands	r3, r2
 80029c8:	d108      	bne.n	80029dc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80029ca:	2301      	movs	r3, #1
 80029cc:	e074      	b.n	8002ab8 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029ce:	4b3e      	ldr	r3, [pc, #248]	; (8002ac8 <HAL_RCC_ClockConfig+0x1f8>)
 80029d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029d2:	2202      	movs	r2, #2
 80029d4:	4013      	ands	r3, r2
 80029d6:	d101      	bne.n	80029dc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80029d8:	2301      	movs	r3, #1
 80029da:	e06d      	b.n	8002ab8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80029dc:	4b3a      	ldr	r3, [pc, #232]	; (8002ac8 <HAL_RCC_ClockConfig+0x1f8>)
 80029de:	689b      	ldr	r3, [r3, #8]
 80029e0:	2207      	movs	r2, #7
 80029e2:	4393      	bics	r3, r2
 80029e4:	0019      	movs	r1, r3
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	685a      	ldr	r2, [r3, #4]
 80029ea:	4b37      	ldr	r3, [pc, #220]	; (8002ac8 <HAL_RCC_ClockConfig+0x1f8>)
 80029ec:	430a      	orrs	r2, r1
 80029ee:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029f0:	f7fe feb4 	bl	800175c <HAL_GetTick>
 80029f4:	0003      	movs	r3, r0
 80029f6:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029f8:	e009      	b.n	8002a0e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029fa:	f7fe feaf 	bl	800175c <HAL_GetTick>
 80029fe:	0002      	movs	r2, r0
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	1ad3      	subs	r3, r2, r3
 8002a04:	4a2f      	ldr	r2, [pc, #188]	; (8002ac4 <HAL_RCC_ClockConfig+0x1f4>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d901      	bls.n	8002a0e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8002a0a:	2303      	movs	r3, #3
 8002a0c:	e054      	b.n	8002ab8 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a0e:	4b2e      	ldr	r3, [pc, #184]	; (8002ac8 <HAL_RCC_ClockConfig+0x1f8>)
 8002a10:	689b      	ldr	r3, [r3, #8]
 8002a12:	2238      	movs	r2, #56	; 0x38
 8002a14:	401a      	ands	r2, r3
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	00db      	lsls	r3, r3, #3
 8002a1c:	429a      	cmp	r2, r3
 8002a1e:	d1ec      	bne.n	80029fa <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a20:	4b27      	ldr	r3, [pc, #156]	; (8002ac0 <HAL_RCC_ClockConfig+0x1f0>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	2207      	movs	r2, #7
 8002a26:	4013      	ands	r3, r2
 8002a28:	683a      	ldr	r2, [r7, #0]
 8002a2a:	429a      	cmp	r2, r3
 8002a2c:	d21e      	bcs.n	8002a6c <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a2e:	4b24      	ldr	r3, [pc, #144]	; (8002ac0 <HAL_RCC_ClockConfig+0x1f0>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	2207      	movs	r2, #7
 8002a34:	4393      	bics	r3, r2
 8002a36:	0019      	movs	r1, r3
 8002a38:	4b21      	ldr	r3, [pc, #132]	; (8002ac0 <HAL_RCC_ClockConfig+0x1f0>)
 8002a3a:	683a      	ldr	r2, [r7, #0]
 8002a3c:	430a      	orrs	r2, r1
 8002a3e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002a40:	f7fe fe8c 	bl	800175c <HAL_GetTick>
 8002a44:	0003      	movs	r3, r0
 8002a46:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002a48:	e009      	b.n	8002a5e <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a4a:	f7fe fe87 	bl	800175c <HAL_GetTick>
 8002a4e:	0002      	movs	r2, r0
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	1ad3      	subs	r3, r2, r3
 8002a54:	4a1b      	ldr	r2, [pc, #108]	; (8002ac4 <HAL_RCC_ClockConfig+0x1f4>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d901      	bls.n	8002a5e <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8002a5a:	2303      	movs	r3, #3
 8002a5c:	e02c      	b.n	8002ab8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002a5e:	4b18      	ldr	r3, [pc, #96]	; (8002ac0 <HAL_RCC_ClockConfig+0x1f0>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	2207      	movs	r2, #7
 8002a64:	4013      	ands	r3, r2
 8002a66:	683a      	ldr	r2, [r7, #0]
 8002a68:	429a      	cmp	r2, r3
 8002a6a:	d1ee      	bne.n	8002a4a <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	2204      	movs	r2, #4
 8002a72:	4013      	ands	r3, r2
 8002a74:	d009      	beq.n	8002a8a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002a76:	4b14      	ldr	r3, [pc, #80]	; (8002ac8 <HAL_RCC_ClockConfig+0x1f8>)
 8002a78:	689b      	ldr	r3, [r3, #8]
 8002a7a:	4a15      	ldr	r2, [pc, #84]	; (8002ad0 <HAL_RCC_ClockConfig+0x200>)
 8002a7c:	4013      	ands	r3, r2
 8002a7e:	0019      	movs	r1, r3
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	68da      	ldr	r2, [r3, #12]
 8002a84:	4b10      	ldr	r3, [pc, #64]	; (8002ac8 <HAL_RCC_ClockConfig+0x1f8>)
 8002a86:	430a      	orrs	r2, r1
 8002a88:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002a8a:	f000 f829 	bl	8002ae0 <HAL_RCC_GetSysClockFreq>
 8002a8e:	0001      	movs	r1, r0
 8002a90:	4b0d      	ldr	r3, [pc, #52]	; (8002ac8 <HAL_RCC_ClockConfig+0x1f8>)
 8002a92:	689b      	ldr	r3, [r3, #8]
 8002a94:	0a1b      	lsrs	r3, r3, #8
 8002a96:	220f      	movs	r2, #15
 8002a98:	401a      	ands	r2, r3
 8002a9a:	4b0e      	ldr	r3, [pc, #56]	; (8002ad4 <HAL_RCC_ClockConfig+0x204>)
 8002a9c:	0092      	lsls	r2, r2, #2
 8002a9e:	58d3      	ldr	r3, [r2, r3]
 8002aa0:	221f      	movs	r2, #31
 8002aa2:	4013      	ands	r3, r2
 8002aa4:	000a      	movs	r2, r1
 8002aa6:	40da      	lsrs	r2, r3
 8002aa8:	4b0b      	ldr	r3, [pc, #44]	; (8002ad8 <HAL_RCC_ClockConfig+0x208>)
 8002aaa:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002aac:	4b0b      	ldr	r3, [pc, #44]	; (8002adc <HAL_RCC_ClockConfig+0x20c>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	0018      	movs	r0, r3
 8002ab2:	f7fe fdf7 	bl	80016a4 <HAL_InitTick>
 8002ab6:	0003      	movs	r3, r0
}
 8002ab8:	0018      	movs	r0, r3
 8002aba:	46bd      	mov	sp, r7
 8002abc:	b004      	add	sp, #16
 8002abe:	bd80      	pop	{r7, pc}
 8002ac0:	40022000 	.word	0x40022000
 8002ac4:	00001388 	.word	0x00001388
 8002ac8:	40021000 	.word	0x40021000
 8002acc:	fffff0ff 	.word	0xfffff0ff
 8002ad0:	ffff8fff 	.word	0xffff8fff
 8002ad4:	08004658 	.word	0x08004658
 8002ad8:	20000004 	.word	0x20000004
 8002adc:	20000008 	.word	0x20000008

08002ae0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b086      	sub	sp, #24
 8002ae4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002ae6:	4b3c      	ldr	r3, [pc, #240]	; (8002bd8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002ae8:	689b      	ldr	r3, [r3, #8]
 8002aea:	2238      	movs	r2, #56	; 0x38
 8002aec:	4013      	ands	r3, r2
 8002aee:	d10f      	bne.n	8002b10 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002af0:	4b39      	ldr	r3, [pc, #228]	; (8002bd8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	0adb      	lsrs	r3, r3, #11
 8002af6:	2207      	movs	r2, #7
 8002af8:	4013      	ands	r3, r2
 8002afa:	2201      	movs	r2, #1
 8002afc:	409a      	lsls	r2, r3
 8002afe:	0013      	movs	r3, r2
 8002b00:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002b02:	6839      	ldr	r1, [r7, #0]
 8002b04:	4835      	ldr	r0, [pc, #212]	; (8002bdc <HAL_RCC_GetSysClockFreq+0xfc>)
 8002b06:	f7fd fafd 	bl	8000104 <__udivsi3>
 8002b0a:	0003      	movs	r3, r0
 8002b0c:	613b      	str	r3, [r7, #16]
 8002b0e:	e05d      	b.n	8002bcc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002b10:	4b31      	ldr	r3, [pc, #196]	; (8002bd8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002b12:	689b      	ldr	r3, [r3, #8]
 8002b14:	2238      	movs	r2, #56	; 0x38
 8002b16:	4013      	ands	r3, r2
 8002b18:	2b08      	cmp	r3, #8
 8002b1a:	d102      	bne.n	8002b22 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002b1c:	4b30      	ldr	r3, [pc, #192]	; (8002be0 <HAL_RCC_GetSysClockFreq+0x100>)
 8002b1e:	613b      	str	r3, [r7, #16]
 8002b20:	e054      	b.n	8002bcc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b22:	4b2d      	ldr	r3, [pc, #180]	; (8002bd8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002b24:	689b      	ldr	r3, [r3, #8]
 8002b26:	2238      	movs	r2, #56	; 0x38
 8002b28:	4013      	ands	r3, r2
 8002b2a:	2b10      	cmp	r3, #16
 8002b2c:	d138      	bne.n	8002ba0 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002b2e:	4b2a      	ldr	r3, [pc, #168]	; (8002bd8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002b30:	68db      	ldr	r3, [r3, #12]
 8002b32:	2203      	movs	r2, #3
 8002b34:	4013      	ands	r3, r2
 8002b36:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002b38:	4b27      	ldr	r3, [pc, #156]	; (8002bd8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002b3a:	68db      	ldr	r3, [r3, #12]
 8002b3c:	091b      	lsrs	r3, r3, #4
 8002b3e:	2207      	movs	r2, #7
 8002b40:	4013      	ands	r3, r2
 8002b42:	3301      	adds	r3, #1
 8002b44:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	2b03      	cmp	r3, #3
 8002b4a:	d10d      	bne.n	8002b68 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002b4c:	68b9      	ldr	r1, [r7, #8]
 8002b4e:	4824      	ldr	r0, [pc, #144]	; (8002be0 <HAL_RCC_GetSysClockFreq+0x100>)
 8002b50:	f7fd fad8 	bl	8000104 <__udivsi3>
 8002b54:	0003      	movs	r3, r0
 8002b56:	0019      	movs	r1, r3
 8002b58:	4b1f      	ldr	r3, [pc, #124]	; (8002bd8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002b5a:	68db      	ldr	r3, [r3, #12]
 8002b5c:	0a1b      	lsrs	r3, r3, #8
 8002b5e:	227f      	movs	r2, #127	; 0x7f
 8002b60:	4013      	ands	r3, r2
 8002b62:	434b      	muls	r3, r1
 8002b64:	617b      	str	r3, [r7, #20]
        break;
 8002b66:	e00d      	b.n	8002b84 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002b68:	68b9      	ldr	r1, [r7, #8]
 8002b6a:	481c      	ldr	r0, [pc, #112]	; (8002bdc <HAL_RCC_GetSysClockFreq+0xfc>)
 8002b6c:	f7fd faca 	bl	8000104 <__udivsi3>
 8002b70:	0003      	movs	r3, r0
 8002b72:	0019      	movs	r1, r3
 8002b74:	4b18      	ldr	r3, [pc, #96]	; (8002bd8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002b76:	68db      	ldr	r3, [r3, #12]
 8002b78:	0a1b      	lsrs	r3, r3, #8
 8002b7a:	227f      	movs	r2, #127	; 0x7f
 8002b7c:	4013      	ands	r3, r2
 8002b7e:	434b      	muls	r3, r1
 8002b80:	617b      	str	r3, [r7, #20]
        break;
 8002b82:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002b84:	4b14      	ldr	r3, [pc, #80]	; (8002bd8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002b86:	68db      	ldr	r3, [r3, #12]
 8002b88:	0f5b      	lsrs	r3, r3, #29
 8002b8a:	2207      	movs	r2, #7
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	3301      	adds	r3, #1
 8002b90:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8002b92:	6879      	ldr	r1, [r7, #4]
 8002b94:	6978      	ldr	r0, [r7, #20]
 8002b96:	f7fd fab5 	bl	8000104 <__udivsi3>
 8002b9a:	0003      	movs	r3, r0
 8002b9c:	613b      	str	r3, [r7, #16]
 8002b9e:	e015      	b.n	8002bcc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002ba0:	4b0d      	ldr	r3, [pc, #52]	; (8002bd8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002ba2:	689b      	ldr	r3, [r3, #8]
 8002ba4:	2238      	movs	r2, #56	; 0x38
 8002ba6:	4013      	ands	r3, r2
 8002ba8:	2b20      	cmp	r3, #32
 8002baa:	d103      	bne.n	8002bb4 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002bac:	2380      	movs	r3, #128	; 0x80
 8002bae:	021b      	lsls	r3, r3, #8
 8002bb0:	613b      	str	r3, [r7, #16]
 8002bb2:	e00b      	b.n	8002bcc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002bb4:	4b08      	ldr	r3, [pc, #32]	; (8002bd8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002bb6:	689b      	ldr	r3, [r3, #8]
 8002bb8:	2238      	movs	r2, #56	; 0x38
 8002bba:	4013      	ands	r3, r2
 8002bbc:	2b18      	cmp	r3, #24
 8002bbe:	d103      	bne.n	8002bc8 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002bc0:	23fa      	movs	r3, #250	; 0xfa
 8002bc2:	01db      	lsls	r3, r3, #7
 8002bc4:	613b      	str	r3, [r7, #16]
 8002bc6:	e001      	b.n	8002bcc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002bcc:	693b      	ldr	r3, [r7, #16]
}
 8002bce:	0018      	movs	r0, r3
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	b006      	add	sp, #24
 8002bd4:	bd80      	pop	{r7, pc}
 8002bd6:	46c0      	nop			; (mov r8, r8)
 8002bd8:	40021000 	.word	0x40021000
 8002bdc:	00f42400 	.word	0x00f42400
 8002be0:	007a1200 	.word	0x007a1200

08002be4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b086      	sub	sp, #24
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002bec:	2313      	movs	r3, #19
 8002bee:	18fb      	adds	r3, r7, r3
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002bf4:	2312      	movs	r3, #18
 8002bf6:	18fb      	adds	r3, r7, r3
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681a      	ldr	r2, [r3, #0]
 8002c00:	2380      	movs	r3, #128	; 0x80
 8002c02:	029b      	lsls	r3, r3, #10
 8002c04:	4013      	ands	r3, r2
 8002c06:	d100      	bne.n	8002c0a <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002c08:	e0a3      	b.n	8002d52 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c0a:	2011      	movs	r0, #17
 8002c0c:	183b      	adds	r3, r7, r0
 8002c0e:	2200      	movs	r2, #0
 8002c10:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c12:	4ba5      	ldr	r3, [pc, #660]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002c14:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002c16:	2380      	movs	r3, #128	; 0x80
 8002c18:	055b      	lsls	r3, r3, #21
 8002c1a:	4013      	ands	r3, r2
 8002c1c:	d110      	bne.n	8002c40 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c1e:	4ba2      	ldr	r3, [pc, #648]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002c20:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002c22:	4ba1      	ldr	r3, [pc, #644]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002c24:	2180      	movs	r1, #128	; 0x80
 8002c26:	0549      	lsls	r1, r1, #21
 8002c28:	430a      	orrs	r2, r1
 8002c2a:	63da      	str	r2, [r3, #60]	; 0x3c
 8002c2c:	4b9e      	ldr	r3, [pc, #632]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002c2e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002c30:	2380      	movs	r3, #128	; 0x80
 8002c32:	055b      	lsls	r3, r3, #21
 8002c34:	4013      	ands	r3, r2
 8002c36:	60bb      	str	r3, [r7, #8]
 8002c38:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c3a:	183b      	adds	r3, r7, r0
 8002c3c:	2201      	movs	r2, #1
 8002c3e:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c40:	4b9a      	ldr	r3, [pc, #616]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8002c42:	681a      	ldr	r2, [r3, #0]
 8002c44:	4b99      	ldr	r3, [pc, #612]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8002c46:	2180      	movs	r1, #128	; 0x80
 8002c48:	0049      	lsls	r1, r1, #1
 8002c4a:	430a      	orrs	r2, r1
 8002c4c:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002c4e:	f7fe fd85 	bl	800175c <HAL_GetTick>
 8002c52:	0003      	movs	r3, r0
 8002c54:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002c56:	e00b      	b.n	8002c70 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c58:	f7fe fd80 	bl	800175c <HAL_GetTick>
 8002c5c:	0002      	movs	r2, r0
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	1ad3      	subs	r3, r2, r3
 8002c62:	2b02      	cmp	r3, #2
 8002c64:	d904      	bls.n	8002c70 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8002c66:	2313      	movs	r3, #19
 8002c68:	18fb      	adds	r3, r7, r3
 8002c6a:	2203      	movs	r2, #3
 8002c6c:	701a      	strb	r2, [r3, #0]
        break;
 8002c6e:	e005      	b.n	8002c7c <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002c70:	4b8e      	ldr	r3, [pc, #568]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8002c72:	681a      	ldr	r2, [r3, #0]
 8002c74:	2380      	movs	r3, #128	; 0x80
 8002c76:	005b      	lsls	r3, r3, #1
 8002c78:	4013      	ands	r3, r2
 8002c7a:	d0ed      	beq.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8002c7c:	2313      	movs	r3, #19
 8002c7e:	18fb      	adds	r3, r7, r3
 8002c80:	781b      	ldrb	r3, [r3, #0]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d154      	bne.n	8002d30 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002c86:	4b88      	ldr	r3, [pc, #544]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002c88:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002c8a:	23c0      	movs	r3, #192	; 0xc0
 8002c8c:	009b      	lsls	r3, r3, #2
 8002c8e:	4013      	ands	r3, r2
 8002c90:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002c92:	697b      	ldr	r3, [r7, #20]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d019      	beq.n	8002ccc <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c9c:	697a      	ldr	r2, [r7, #20]
 8002c9e:	429a      	cmp	r2, r3
 8002ca0:	d014      	beq.n	8002ccc <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002ca2:	4b81      	ldr	r3, [pc, #516]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002ca4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ca6:	4a82      	ldr	r2, [pc, #520]	; (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8002ca8:	4013      	ands	r3, r2
 8002caa:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002cac:	4b7e      	ldr	r3, [pc, #504]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002cae:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002cb0:	4b7d      	ldr	r3, [pc, #500]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002cb2:	2180      	movs	r1, #128	; 0x80
 8002cb4:	0249      	lsls	r1, r1, #9
 8002cb6:	430a      	orrs	r2, r1
 8002cb8:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002cba:	4b7b      	ldr	r3, [pc, #492]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002cbc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002cbe:	4b7a      	ldr	r3, [pc, #488]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002cc0:	497c      	ldr	r1, [pc, #496]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8002cc2:	400a      	ands	r2, r1
 8002cc4:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002cc6:	4b78      	ldr	r3, [pc, #480]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002cc8:	697a      	ldr	r2, [r7, #20]
 8002cca:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002ccc:	697b      	ldr	r3, [r7, #20]
 8002cce:	2201      	movs	r2, #1
 8002cd0:	4013      	ands	r3, r2
 8002cd2:	d016      	beq.n	8002d02 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cd4:	f7fe fd42 	bl	800175c <HAL_GetTick>
 8002cd8:	0003      	movs	r3, r0
 8002cda:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002cdc:	e00c      	b.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cde:	f7fe fd3d 	bl	800175c <HAL_GetTick>
 8002ce2:	0002      	movs	r2, r0
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	1ad3      	subs	r3, r2, r3
 8002ce8:	4a73      	ldr	r2, [pc, #460]	; (8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d904      	bls.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8002cee:	2313      	movs	r3, #19
 8002cf0:	18fb      	adds	r3, r7, r3
 8002cf2:	2203      	movs	r2, #3
 8002cf4:	701a      	strb	r2, [r3, #0]
            break;
 8002cf6:	e004      	b.n	8002d02 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002cf8:	4b6b      	ldr	r3, [pc, #428]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002cfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cfc:	2202      	movs	r2, #2
 8002cfe:	4013      	ands	r3, r2
 8002d00:	d0ed      	beq.n	8002cde <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8002d02:	2313      	movs	r3, #19
 8002d04:	18fb      	adds	r3, r7, r3
 8002d06:	781b      	ldrb	r3, [r3, #0]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d10a      	bne.n	8002d22 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d0c:	4b66      	ldr	r3, [pc, #408]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002d0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d10:	4a67      	ldr	r2, [pc, #412]	; (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8002d12:	4013      	ands	r3, r2
 8002d14:	0019      	movs	r1, r3
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d1a:	4b63      	ldr	r3, [pc, #396]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002d1c:	430a      	orrs	r2, r1
 8002d1e:	65da      	str	r2, [r3, #92]	; 0x5c
 8002d20:	e00c      	b.n	8002d3c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002d22:	2312      	movs	r3, #18
 8002d24:	18fb      	adds	r3, r7, r3
 8002d26:	2213      	movs	r2, #19
 8002d28:	18ba      	adds	r2, r7, r2
 8002d2a:	7812      	ldrb	r2, [r2, #0]
 8002d2c:	701a      	strb	r2, [r3, #0]
 8002d2e:	e005      	b.n	8002d3c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d30:	2312      	movs	r3, #18
 8002d32:	18fb      	adds	r3, r7, r3
 8002d34:	2213      	movs	r2, #19
 8002d36:	18ba      	adds	r2, r7, r2
 8002d38:	7812      	ldrb	r2, [r2, #0]
 8002d3a:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002d3c:	2311      	movs	r3, #17
 8002d3e:	18fb      	adds	r3, r7, r3
 8002d40:	781b      	ldrb	r3, [r3, #0]
 8002d42:	2b01      	cmp	r3, #1
 8002d44:	d105      	bne.n	8002d52 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d46:	4b58      	ldr	r3, [pc, #352]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002d48:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002d4a:	4b57      	ldr	r3, [pc, #348]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002d4c:	495b      	ldr	r1, [pc, #364]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8002d4e:	400a      	ands	r2, r1
 8002d50:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	2201      	movs	r2, #1
 8002d58:	4013      	ands	r3, r2
 8002d5a:	d009      	beq.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002d5c:	4b52      	ldr	r3, [pc, #328]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002d5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d60:	2203      	movs	r2, #3
 8002d62:	4393      	bics	r3, r2
 8002d64:	0019      	movs	r1, r3
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	685a      	ldr	r2, [r3, #4]
 8002d6a:	4b4f      	ldr	r3, [pc, #316]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002d6c:	430a      	orrs	r2, r1
 8002d6e:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	2210      	movs	r2, #16
 8002d76:	4013      	ands	r3, r2
 8002d78:	d009      	beq.n	8002d8e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002d7a:	4b4b      	ldr	r3, [pc, #300]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002d7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d7e:	4a50      	ldr	r2, [pc, #320]	; (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8002d80:	4013      	ands	r3, r2
 8002d82:	0019      	movs	r1, r3
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	689a      	ldr	r2, [r3, #8]
 8002d88:	4b47      	ldr	r3, [pc, #284]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002d8a:	430a      	orrs	r2, r1
 8002d8c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681a      	ldr	r2, [r3, #0]
 8002d92:	2380      	movs	r3, #128	; 0x80
 8002d94:	009b      	lsls	r3, r3, #2
 8002d96:	4013      	ands	r3, r2
 8002d98:	d009      	beq.n	8002dae <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002d9a:	4b43      	ldr	r3, [pc, #268]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002d9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d9e:	4a49      	ldr	r2, [pc, #292]	; (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002da0:	4013      	ands	r3, r2
 8002da2:	0019      	movs	r1, r3
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	695a      	ldr	r2, [r3, #20]
 8002da8:	4b3f      	ldr	r3, [pc, #252]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002daa:	430a      	orrs	r2, r1
 8002dac:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681a      	ldr	r2, [r3, #0]
 8002db2:	2380      	movs	r3, #128	; 0x80
 8002db4:	00db      	lsls	r3, r3, #3
 8002db6:	4013      	ands	r3, r2
 8002db8:	d009      	beq.n	8002dce <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002dba:	4b3b      	ldr	r3, [pc, #236]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002dbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dbe:	4a42      	ldr	r2, [pc, #264]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002dc0:	4013      	ands	r3, r2
 8002dc2:	0019      	movs	r1, r3
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	699a      	ldr	r2, [r3, #24]
 8002dc8:	4b37      	ldr	r3, [pc, #220]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002dca:	430a      	orrs	r2, r1
 8002dcc:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	2220      	movs	r2, #32
 8002dd4:	4013      	ands	r3, r2
 8002dd6:	d009      	beq.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002dd8:	4b33      	ldr	r3, [pc, #204]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002dda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ddc:	4a3b      	ldr	r2, [pc, #236]	; (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002dde:	4013      	ands	r3, r2
 8002de0:	0019      	movs	r1, r3
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	68da      	ldr	r2, [r3, #12]
 8002de6:	4b30      	ldr	r3, [pc, #192]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002de8:	430a      	orrs	r2, r1
 8002dea:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681a      	ldr	r2, [r3, #0]
 8002df0:	2380      	movs	r3, #128	; 0x80
 8002df2:	01db      	lsls	r3, r3, #7
 8002df4:	4013      	ands	r3, r2
 8002df6:	d015      	beq.n	8002e24 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002df8:	4b2b      	ldr	r3, [pc, #172]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002dfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dfc:	009b      	lsls	r3, r3, #2
 8002dfe:	0899      	lsrs	r1, r3, #2
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	69da      	ldr	r2, [r3, #28]
 8002e04:	4b28      	ldr	r3, [pc, #160]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002e06:	430a      	orrs	r2, r1
 8002e08:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	69da      	ldr	r2, [r3, #28]
 8002e0e:	2380      	movs	r3, #128	; 0x80
 8002e10:	05db      	lsls	r3, r3, #23
 8002e12:	429a      	cmp	r2, r3
 8002e14:	d106      	bne.n	8002e24 <HAL_RCCEx_PeriphCLKConfig+0x240>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002e16:	4b24      	ldr	r3, [pc, #144]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002e18:	68da      	ldr	r2, [r3, #12]
 8002e1a:	4b23      	ldr	r3, [pc, #140]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002e1c:	2180      	movs	r1, #128	; 0x80
 8002e1e:	0249      	lsls	r1, r1, #9
 8002e20:	430a      	orrs	r2, r1
 8002e22:	60da      	str	r2, [r3, #12]
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681a      	ldr	r2, [r3, #0]
 8002e28:	2380      	movs	r3, #128	; 0x80
 8002e2a:	039b      	lsls	r3, r3, #14
 8002e2c:	4013      	ands	r3, r2
 8002e2e:	d016      	beq.n	8002e5e <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002e30:	4b1d      	ldr	r3, [pc, #116]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002e32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e34:	4a26      	ldr	r2, [pc, #152]	; (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8002e36:	4013      	ands	r3, r2
 8002e38:	0019      	movs	r1, r3
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6a1a      	ldr	r2, [r3, #32]
 8002e3e:	4b1a      	ldr	r3, [pc, #104]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002e40:	430a      	orrs	r2, r1
 8002e42:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6a1a      	ldr	r2, [r3, #32]
 8002e48:	2380      	movs	r3, #128	; 0x80
 8002e4a:	03db      	lsls	r3, r3, #15
 8002e4c:	429a      	cmp	r2, r3
 8002e4e:	d106      	bne.n	8002e5e <HAL_RCCEx_PeriphCLKConfig+0x27a>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002e50:	4b15      	ldr	r3, [pc, #84]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002e52:	68da      	ldr	r2, [r3, #12]
 8002e54:	4b14      	ldr	r3, [pc, #80]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002e56:	2180      	movs	r1, #128	; 0x80
 8002e58:	0449      	lsls	r1, r1, #17
 8002e5a:	430a      	orrs	r2, r1
 8002e5c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681a      	ldr	r2, [r3, #0]
 8002e62:	2380      	movs	r3, #128	; 0x80
 8002e64:	011b      	lsls	r3, r3, #4
 8002e66:	4013      	ands	r3, r2
 8002e68:	d016      	beq.n	8002e98 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002e6a:	4b0f      	ldr	r3, [pc, #60]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002e6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e6e:	4a19      	ldr	r2, [pc, #100]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002e70:	4013      	ands	r3, r2
 8002e72:	0019      	movs	r1, r3
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	691a      	ldr	r2, [r3, #16]
 8002e78:	4b0b      	ldr	r3, [pc, #44]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002e7a:	430a      	orrs	r2, r1
 8002e7c:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	691a      	ldr	r2, [r3, #16]
 8002e82:	2380      	movs	r3, #128	; 0x80
 8002e84:	01db      	lsls	r3, r3, #7
 8002e86:	429a      	cmp	r2, r3
 8002e88:	d106      	bne.n	8002e98 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002e8a:	4b07      	ldr	r3, [pc, #28]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002e8c:	68da      	ldr	r2, [r3, #12]
 8002e8e:	4b06      	ldr	r3, [pc, #24]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002e90:	2180      	movs	r1, #128	; 0x80
 8002e92:	0249      	lsls	r1, r1, #9
 8002e94:	430a      	orrs	r2, r1
 8002e96:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8002e98:	2312      	movs	r3, #18
 8002e9a:	18fb      	adds	r3, r7, r3
 8002e9c:	781b      	ldrb	r3, [r3, #0]
}
 8002e9e:	0018      	movs	r0, r3
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	b006      	add	sp, #24
 8002ea4:	bd80      	pop	{r7, pc}
 8002ea6:	46c0      	nop			; (mov r8, r8)
 8002ea8:	40021000 	.word	0x40021000
 8002eac:	40007000 	.word	0x40007000
 8002eb0:	fffffcff 	.word	0xfffffcff
 8002eb4:	fffeffff 	.word	0xfffeffff
 8002eb8:	00001388 	.word	0x00001388
 8002ebc:	efffffff 	.word	0xefffffff
 8002ec0:	fffff3ff 	.word	0xfffff3ff
 8002ec4:	fff3ffff 	.word	0xfff3ffff
 8002ec8:	ffcfffff 	.word	0xffcfffff
 8002ecc:	ffffcfff 	.word	0xffffcfff
 8002ed0:	ffbfffff 	.word	0xffbfffff
 8002ed4:	ffff3fff 	.word	0xffff3fff

08002ed8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b082      	sub	sp, #8
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d101      	bne.n	8002eea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	e04a      	b.n	8002f80 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	223d      	movs	r2, #61	; 0x3d
 8002eee:	5c9b      	ldrb	r3, [r3, r2]
 8002ef0:	b2db      	uxtb	r3, r3
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d107      	bne.n	8002f06 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	223c      	movs	r2, #60	; 0x3c
 8002efa:	2100      	movs	r1, #0
 8002efc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	0018      	movs	r0, r3
 8002f02:	f7fe faa3 	bl	800144c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	223d      	movs	r2, #61	; 0x3d
 8002f0a:	2102      	movs	r1, #2
 8002f0c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681a      	ldr	r2, [r3, #0]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	3304      	adds	r3, #4
 8002f16:	0019      	movs	r1, r3
 8002f18:	0010      	movs	r0, r2
 8002f1a:	f000 fe2d 	bl	8003b78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2248      	movs	r2, #72	; 0x48
 8002f22:	2101      	movs	r1, #1
 8002f24:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	223e      	movs	r2, #62	; 0x3e
 8002f2a:	2101      	movs	r1, #1
 8002f2c:	5499      	strb	r1, [r3, r2]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	223f      	movs	r2, #63	; 0x3f
 8002f32:	2101      	movs	r1, #1
 8002f34:	5499      	strb	r1, [r3, r2]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2240      	movs	r2, #64	; 0x40
 8002f3a:	2101      	movs	r1, #1
 8002f3c:	5499      	strb	r1, [r3, r2]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2241      	movs	r2, #65	; 0x41
 8002f42:	2101      	movs	r1, #1
 8002f44:	5499      	strb	r1, [r3, r2]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2242      	movs	r2, #66	; 0x42
 8002f4a:	2101      	movs	r1, #1
 8002f4c:	5499      	strb	r1, [r3, r2]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2243      	movs	r2, #67	; 0x43
 8002f52:	2101      	movs	r1, #1
 8002f54:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2244      	movs	r2, #68	; 0x44
 8002f5a:	2101      	movs	r1, #1
 8002f5c:	5499      	strb	r1, [r3, r2]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2245      	movs	r2, #69	; 0x45
 8002f62:	2101      	movs	r1, #1
 8002f64:	5499      	strb	r1, [r3, r2]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2246      	movs	r2, #70	; 0x46
 8002f6a:	2101      	movs	r1, #1
 8002f6c:	5499      	strb	r1, [r3, r2]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2247      	movs	r2, #71	; 0x47
 8002f72:	2101      	movs	r1, #1
 8002f74:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	223d      	movs	r2, #61	; 0x3d
 8002f7a:	2101      	movs	r1, #1
 8002f7c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002f7e:	2300      	movs	r3, #0
}
 8002f80:	0018      	movs	r0, r3
 8002f82:	46bd      	mov	sp, r7
 8002f84:	b002      	add	sp, #8
 8002f86:	bd80      	pop	{r7, pc}

08002f88 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b082      	sub	sp, #8
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d101      	bne.n	8002f9a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002f96:	2301      	movs	r3, #1
 8002f98:	e04a      	b.n	8003030 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	223d      	movs	r2, #61	; 0x3d
 8002f9e:	5c9b      	ldrb	r3, [r3, r2]
 8002fa0:	b2db      	uxtb	r3, r3
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d107      	bne.n	8002fb6 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	223c      	movs	r2, #60	; 0x3c
 8002faa:	2100      	movs	r1, #0
 8002fac:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	0018      	movs	r0, r3
 8002fb2:	f000 f841 	bl	8003038 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	223d      	movs	r2, #61	; 0x3d
 8002fba:	2102      	movs	r1, #2
 8002fbc:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681a      	ldr	r2, [r3, #0]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	3304      	adds	r3, #4
 8002fc6:	0019      	movs	r1, r3
 8002fc8:	0010      	movs	r0, r2
 8002fca:	f000 fdd5 	bl	8003b78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2248      	movs	r2, #72	; 0x48
 8002fd2:	2101      	movs	r1, #1
 8002fd4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	223e      	movs	r2, #62	; 0x3e
 8002fda:	2101      	movs	r1, #1
 8002fdc:	5499      	strb	r1, [r3, r2]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	223f      	movs	r2, #63	; 0x3f
 8002fe2:	2101      	movs	r1, #1
 8002fe4:	5499      	strb	r1, [r3, r2]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2240      	movs	r2, #64	; 0x40
 8002fea:	2101      	movs	r1, #1
 8002fec:	5499      	strb	r1, [r3, r2]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2241      	movs	r2, #65	; 0x41
 8002ff2:	2101      	movs	r1, #1
 8002ff4:	5499      	strb	r1, [r3, r2]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2242      	movs	r2, #66	; 0x42
 8002ffa:	2101      	movs	r1, #1
 8002ffc:	5499      	strb	r1, [r3, r2]
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2243      	movs	r2, #67	; 0x43
 8003002:	2101      	movs	r1, #1
 8003004:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2244      	movs	r2, #68	; 0x44
 800300a:	2101      	movs	r1, #1
 800300c:	5499      	strb	r1, [r3, r2]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2245      	movs	r2, #69	; 0x45
 8003012:	2101      	movs	r1, #1
 8003014:	5499      	strb	r1, [r3, r2]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2246      	movs	r2, #70	; 0x46
 800301a:	2101      	movs	r1, #1
 800301c:	5499      	strb	r1, [r3, r2]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2247      	movs	r2, #71	; 0x47
 8003022:	2101      	movs	r1, #1
 8003024:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	223d      	movs	r2, #61	; 0x3d
 800302a:	2101      	movs	r1, #1
 800302c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800302e:	2300      	movs	r3, #0
}
 8003030:	0018      	movs	r0, r3
 8003032:	46bd      	mov	sp, r7
 8003034:	b002      	add	sp, #8
 8003036:	bd80      	pop	{r7, pc}

08003038 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b082      	sub	sp, #8
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003040:	46c0      	nop			; (mov r8, r8)
 8003042:	46bd      	mov	sp, r7
 8003044:	b002      	add	sp, #8
 8003046:	bd80      	pop	{r7, pc}

08003048 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b086      	sub	sp, #24
 800304c:	af00      	add	r7, sp, #0
 800304e:	60f8      	str	r0, [r7, #12]
 8003050:	60b9      	str	r1, [r7, #8]
 8003052:	607a      	str	r2, [r7, #4]
 8003054:	001a      	movs	r2, r3
 8003056:	1cbb      	adds	r3, r7, #2
 8003058:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800305a:	2317      	movs	r3, #23
 800305c:	18fb      	adds	r3, r7, r3
 800305e:	2200      	movs	r2, #0
 8003060:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8003062:	68bb      	ldr	r3, [r7, #8]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d108      	bne.n	800307a <HAL_TIM_PWM_Start_DMA+0x32>
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	223e      	movs	r2, #62	; 0x3e
 800306c:	5c9b      	ldrb	r3, [r3, r2]
 800306e:	b2db      	uxtb	r3, r3
 8003070:	3b02      	subs	r3, #2
 8003072:	425a      	negs	r2, r3
 8003074:	4153      	adcs	r3, r2
 8003076:	b2db      	uxtb	r3, r3
 8003078:	e037      	b.n	80030ea <HAL_TIM_PWM_Start_DMA+0xa2>
 800307a:	68bb      	ldr	r3, [r7, #8]
 800307c:	2b04      	cmp	r3, #4
 800307e:	d108      	bne.n	8003092 <HAL_TIM_PWM_Start_DMA+0x4a>
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	223f      	movs	r2, #63	; 0x3f
 8003084:	5c9b      	ldrb	r3, [r3, r2]
 8003086:	b2db      	uxtb	r3, r3
 8003088:	3b02      	subs	r3, #2
 800308a:	425a      	negs	r2, r3
 800308c:	4153      	adcs	r3, r2
 800308e:	b2db      	uxtb	r3, r3
 8003090:	e02b      	b.n	80030ea <HAL_TIM_PWM_Start_DMA+0xa2>
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	2b08      	cmp	r3, #8
 8003096:	d108      	bne.n	80030aa <HAL_TIM_PWM_Start_DMA+0x62>
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	2240      	movs	r2, #64	; 0x40
 800309c:	5c9b      	ldrb	r3, [r3, r2]
 800309e:	b2db      	uxtb	r3, r3
 80030a0:	3b02      	subs	r3, #2
 80030a2:	425a      	negs	r2, r3
 80030a4:	4153      	adcs	r3, r2
 80030a6:	b2db      	uxtb	r3, r3
 80030a8:	e01f      	b.n	80030ea <HAL_TIM_PWM_Start_DMA+0xa2>
 80030aa:	68bb      	ldr	r3, [r7, #8]
 80030ac:	2b0c      	cmp	r3, #12
 80030ae:	d108      	bne.n	80030c2 <HAL_TIM_PWM_Start_DMA+0x7a>
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	2241      	movs	r2, #65	; 0x41
 80030b4:	5c9b      	ldrb	r3, [r3, r2]
 80030b6:	b2db      	uxtb	r3, r3
 80030b8:	3b02      	subs	r3, #2
 80030ba:	425a      	negs	r2, r3
 80030bc:	4153      	adcs	r3, r2
 80030be:	b2db      	uxtb	r3, r3
 80030c0:	e013      	b.n	80030ea <HAL_TIM_PWM_Start_DMA+0xa2>
 80030c2:	68bb      	ldr	r3, [r7, #8]
 80030c4:	2b10      	cmp	r3, #16
 80030c6:	d108      	bne.n	80030da <HAL_TIM_PWM_Start_DMA+0x92>
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	2242      	movs	r2, #66	; 0x42
 80030cc:	5c9b      	ldrb	r3, [r3, r2]
 80030ce:	b2db      	uxtb	r3, r3
 80030d0:	3b02      	subs	r3, #2
 80030d2:	425a      	negs	r2, r3
 80030d4:	4153      	adcs	r3, r2
 80030d6:	b2db      	uxtb	r3, r3
 80030d8:	e007      	b.n	80030ea <HAL_TIM_PWM_Start_DMA+0xa2>
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	2243      	movs	r2, #67	; 0x43
 80030de:	5c9b      	ldrb	r3, [r3, r2]
 80030e0:	b2db      	uxtb	r3, r3
 80030e2:	3b02      	subs	r3, #2
 80030e4:	425a      	negs	r2, r3
 80030e6:	4153      	adcs	r3, r2
 80030e8:	b2db      	uxtb	r3, r3
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d001      	beq.n	80030f2 <HAL_TIM_PWM_Start_DMA+0xaa>
  {
    return HAL_BUSY;
 80030ee:	2302      	movs	r3, #2
 80030f0:	e189      	b.n	8003406 <HAL_TIM_PWM_Start_DMA+0x3be>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 80030f2:	68bb      	ldr	r3, [r7, #8]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d108      	bne.n	800310a <HAL_TIM_PWM_Start_DMA+0xc2>
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	223e      	movs	r2, #62	; 0x3e
 80030fc:	5c9b      	ldrb	r3, [r3, r2]
 80030fe:	b2db      	uxtb	r3, r3
 8003100:	3b01      	subs	r3, #1
 8003102:	425a      	negs	r2, r3
 8003104:	4153      	adcs	r3, r2
 8003106:	b2db      	uxtb	r3, r3
 8003108:	e037      	b.n	800317a <HAL_TIM_PWM_Start_DMA+0x132>
 800310a:	68bb      	ldr	r3, [r7, #8]
 800310c:	2b04      	cmp	r3, #4
 800310e:	d108      	bne.n	8003122 <HAL_TIM_PWM_Start_DMA+0xda>
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	223f      	movs	r2, #63	; 0x3f
 8003114:	5c9b      	ldrb	r3, [r3, r2]
 8003116:	b2db      	uxtb	r3, r3
 8003118:	3b01      	subs	r3, #1
 800311a:	425a      	negs	r2, r3
 800311c:	4153      	adcs	r3, r2
 800311e:	b2db      	uxtb	r3, r3
 8003120:	e02b      	b.n	800317a <HAL_TIM_PWM_Start_DMA+0x132>
 8003122:	68bb      	ldr	r3, [r7, #8]
 8003124:	2b08      	cmp	r3, #8
 8003126:	d108      	bne.n	800313a <HAL_TIM_PWM_Start_DMA+0xf2>
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	2240      	movs	r2, #64	; 0x40
 800312c:	5c9b      	ldrb	r3, [r3, r2]
 800312e:	b2db      	uxtb	r3, r3
 8003130:	3b01      	subs	r3, #1
 8003132:	425a      	negs	r2, r3
 8003134:	4153      	adcs	r3, r2
 8003136:	b2db      	uxtb	r3, r3
 8003138:	e01f      	b.n	800317a <HAL_TIM_PWM_Start_DMA+0x132>
 800313a:	68bb      	ldr	r3, [r7, #8]
 800313c:	2b0c      	cmp	r3, #12
 800313e:	d108      	bne.n	8003152 <HAL_TIM_PWM_Start_DMA+0x10a>
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	2241      	movs	r2, #65	; 0x41
 8003144:	5c9b      	ldrb	r3, [r3, r2]
 8003146:	b2db      	uxtb	r3, r3
 8003148:	3b01      	subs	r3, #1
 800314a:	425a      	negs	r2, r3
 800314c:	4153      	adcs	r3, r2
 800314e:	b2db      	uxtb	r3, r3
 8003150:	e013      	b.n	800317a <HAL_TIM_PWM_Start_DMA+0x132>
 8003152:	68bb      	ldr	r3, [r7, #8]
 8003154:	2b10      	cmp	r3, #16
 8003156:	d108      	bne.n	800316a <HAL_TIM_PWM_Start_DMA+0x122>
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	2242      	movs	r2, #66	; 0x42
 800315c:	5c9b      	ldrb	r3, [r3, r2]
 800315e:	b2db      	uxtb	r3, r3
 8003160:	3b01      	subs	r3, #1
 8003162:	425a      	negs	r2, r3
 8003164:	4153      	adcs	r3, r2
 8003166:	b2db      	uxtb	r3, r3
 8003168:	e007      	b.n	800317a <HAL_TIM_PWM_Start_DMA+0x132>
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	2243      	movs	r2, #67	; 0x43
 800316e:	5c9b      	ldrb	r3, [r3, r2]
 8003170:	b2db      	uxtb	r3, r3
 8003172:	3b01      	subs	r3, #1
 8003174:	425a      	negs	r2, r3
 8003176:	4153      	adcs	r3, r2
 8003178:	b2db      	uxtb	r3, r3
 800317a:	2b00      	cmp	r3, #0
 800317c:	d035      	beq.n	80031ea <HAL_TIM_PWM_Start_DMA+0x1a2>
  {
    if ((pData == NULL) || (Length == 0U))
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d003      	beq.n	800318c <HAL_TIM_PWM_Start_DMA+0x144>
 8003184:	1cbb      	adds	r3, r7, #2
 8003186:	881b      	ldrh	r3, [r3, #0]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d101      	bne.n	8003190 <HAL_TIM_PWM_Start_DMA+0x148>
    {
      return HAL_ERROR;
 800318c:	2301      	movs	r3, #1
 800318e:	e13a      	b.n	8003406 <HAL_TIM_PWM_Start_DMA+0x3be>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003190:	68bb      	ldr	r3, [r7, #8]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d104      	bne.n	80031a0 <HAL_TIM_PWM_Start_DMA+0x158>
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	223e      	movs	r2, #62	; 0x3e
 800319a:	2102      	movs	r1, #2
 800319c:	5499      	strb	r1, [r3, r2]
 800319e:	e026      	b.n	80031ee <HAL_TIM_PWM_Start_DMA+0x1a6>
 80031a0:	68bb      	ldr	r3, [r7, #8]
 80031a2:	2b04      	cmp	r3, #4
 80031a4:	d104      	bne.n	80031b0 <HAL_TIM_PWM_Start_DMA+0x168>
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	223f      	movs	r2, #63	; 0x3f
 80031aa:	2102      	movs	r1, #2
 80031ac:	5499      	strb	r1, [r3, r2]
 80031ae:	e01e      	b.n	80031ee <HAL_TIM_PWM_Start_DMA+0x1a6>
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	2b08      	cmp	r3, #8
 80031b4:	d104      	bne.n	80031c0 <HAL_TIM_PWM_Start_DMA+0x178>
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	2240      	movs	r2, #64	; 0x40
 80031ba:	2102      	movs	r1, #2
 80031bc:	5499      	strb	r1, [r3, r2]
 80031be:	e016      	b.n	80031ee <HAL_TIM_PWM_Start_DMA+0x1a6>
 80031c0:	68bb      	ldr	r3, [r7, #8]
 80031c2:	2b0c      	cmp	r3, #12
 80031c4:	d104      	bne.n	80031d0 <HAL_TIM_PWM_Start_DMA+0x188>
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	2241      	movs	r2, #65	; 0x41
 80031ca:	2102      	movs	r1, #2
 80031cc:	5499      	strb	r1, [r3, r2]
 80031ce:	e00e      	b.n	80031ee <HAL_TIM_PWM_Start_DMA+0x1a6>
 80031d0:	68bb      	ldr	r3, [r7, #8]
 80031d2:	2b10      	cmp	r3, #16
 80031d4:	d104      	bne.n	80031e0 <HAL_TIM_PWM_Start_DMA+0x198>
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	2242      	movs	r2, #66	; 0x42
 80031da:	2102      	movs	r1, #2
 80031dc:	5499      	strb	r1, [r3, r2]
 80031de:	e006      	b.n	80031ee <HAL_TIM_PWM_Start_DMA+0x1a6>
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	2243      	movs	r2, #67	; 0x43
 80031e4:	2102      	movs	r1, #2
 80031e6:	5499      	strb	r1, [r3, r2]
 80031e8:	e001      	b.n	80031ee <HAL_TIM_PWM_Start_DMA+0x1a6>
    }
  }
  else
  {
    return HAL_ERROR;
 80031ea:	2301      	movs	r3, #1
 80031ec:	e10b      	b.n	8003406 <HAL_TIM_PWM_Start_DMA+0x3be>
  }

  switch (Channel)
 80031ee:	68bb      	ldr	r3, [r7, #8]
 80031f0:	2b0c      	cmp	r3, #12
 80031f2:	d100      	bne.n	80031f6 <HAL_TIM_PWM_Start_DMA+0x1ae>
 80031f4:	e080      	b.n	80032f8 <HAL_TIM_PWM_Start_DMA+0x2b0>
 80031f6:	68bb      	ldr	r3, [r7, #8]
 80031f8:	2b0c      	cmp	r3, #12
 80031fa:	d900      	bls.n	80031fe <HAL_TIM_PWM_Start_DMA+0x1b6>
 80031fc:	e0a1      	b.n	8003342 <HAL_TIM_PWM_Start_DMA+0x2fa>
 80031fe:	68bb      	ldr	r3, [r7, #8]
 8003200:	2b08      	cmp	r3, #8
 8003202:	d054      	beq.n	80032ae <HAL_TIM_PWM_Start_DMA+0x266>
 8003204:	68bb      	ldr	r3, [r7, #8]
 8003206:	2b08      	cmp	r3, #8
 8003208:	d900      	bls.n	800320c <HAL_TIM_PWM_Start_DMA+0x1c4>
 800320a:	e09a      	b.n	8003342 <HAL_TIM_PWM_Start_DMA+0x2fa>
 800320c:	68bb      	ldr	r3, [r7, #8]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d003      	beq.n	800321a <HAL_TIM_PWM_Start_DMA+0x1d2>
 8003212:	68bb      	ldr	r3, [r7, #8]
 8003214:	2b04      	cmp	r3, #4
 8003216:	d025      	beq.n	8003264 <HAL_TIM_PWM_Start_DMA+0x21c>
 8003218:	e093      	b.n	8003342 <HAL_TIM_PWM_Start_DMA+0x2fa>
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800321e:	4a7c      	ldr	r2, [pc, #496]	; (8003410 <HAL_TIM_PWM_Start_DMA+0x3c8>)
 8003220:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003226:	4a7b      	ldr	r2, [pc, #492]	; (8003414 <HAL_TIM_PWM_Start_DMA+0x3cc>)
 8003228:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800322e:	4a7a      	ldr	r2, [pc, #488]	; (8003418 <HAL_TIM_PWM_Start_DMA+0x3d0>)
 8003230:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8003236:	6879      	ldr	r1, [r7, #4]
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	3334      	adds	r3, #52	; 0x34
 800323e:	001a      	movs	r2, r3
 8003240:	1cbb      	adds	r3, r7, #2
 8003242:	881b      	ldrh	r3, [r3, #0]
 8003244:	f7fe fc20 	bl	8001a88 <HAL_DMA_Start_IT>
 8003248:	1e03      	subs	r3, r0, #0
 800324a:	d001      	beq.n	8003250 <HAL_TIM_PWM_Start_DMA+0x208>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800324c:	2301      	movs	r3, #1
 800324e:	e0da      	b.n	8003406 <HAL_TIM_PWM_Start_DMA+0x3be>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	68da      	ldr	r2, [r3, #12]
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	2180      	movs	r1, #128	; 0x80
 800325c:	0089      	lsls	r1, r1, #2
 800325e:	430a      	orrs	r2, r1
 8003260:	60da      	str	r2, [r3, #12]
      break;
 8003262:	e073      	b.n	800334c <HAL_TIM_PWM_Start_DMA+0x304>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003268:	4a69      	ldr	r2, [pc, #420]	; (8003410 <HAL_TIM_PWM_Start_DMA+0x3c8>)
 800326a:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003270:	4a68      	ldr	r2, [pc, #416]	; (8003414 <HAL_TIM_PWM_Start_DMA+0x3cc>)
 8003272:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003278:	4a67      	ldr	r2, [pc, #412]	; (8003418 <HAL_TIM_PWM_Start_DMA+0x3d0>)
 800327a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8003280:	6879      	ldr	r1, [r7, #4]
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	3338      	adds	r3, #56	; 0x38
 8003288:	001a      	movs	r2, r3
 800328a:	1cbb      	adds	r3, r7, #2
 800328c:	881b      	ldrh	r3, [r3, #0]
 800328e:	f7fe fbfb 	bl	8001a88 <HAL_DMA_Start_IT>
 8003292:	1e03      	subs	r3, r0, #0
 8003294:	d001      	beq.n	800329a <HAL_TIM_PWM_Start_DMA+0x252>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003296:	2301      	movs	r3, #1
 8003298:	e0b5      	b.n	8003406 <HAL_TIM_PWM_Start_DMA+0x3be>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	68da      	ldr	r2, [r3, #12]
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	2180      	movs	r1, #128	; 0x80
 80032a6:	00c9      	lsls	r1, r1, #3
 80032a8:	430a      	orrs	r2, r1
 80032aa:	60da      	str	r2, [r3, #12]
      break;
 80032ac:	e04e      	b.n	800334c <HAL_TIM_PWM_Start_DMA+0x304>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032b2:	4a57      	ldr	r2, [pc, #348]	; (8003410 <HAL_TIM_PWM_Start_DMA+0x3c8>)
 80032b4:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032ba:	4a56      	ldr	r2, [pc, #344]	; (8003414 <HAL_TIM_PWM_Start_DMA+0x3cc>)
 80032bc:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032c2:	4a55      	ldr	r2, [pc, #340]	; (8003418 <HAL_TIM_PWM_Start_DMA+0x3d0>)
 80032c4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80032ca:	6879      	ldr	r1, [r7, #4]
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	333c      	adds	r3, #60	; 0x3c
 80032d2:	001a      	movs	r2, r3
 80032d4:	1cbb      	adds	r3, r7, #2
 80032d6:	881b      	ldrh	r3, [r3, #0]
 80032d8:	f7fe fbd6 	bl	8001a88 <HAL_DMA_Start_IT>
 80032dc:	1e03      	subs	r3, r0, #0
 80032de:	d001      	beq.n	80032e4 <HAL_TIM_PWM_Start_DMA+0x29c>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80032e0:	2301      	movs	r3, #1
 80032e2:	e090      	b.n	8003406 <HAL_TIM_PWM_Start_DMA+0x3be>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	68da      	ldr	r2, [r3, #12]
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	2180      	movs	r1, #128	; 0x80
 80032f0:	0109      	lsls	r1, r1, #4
 80032f2:	430a      	orrs	r2, r1
 80032f4:	60da      	str	r2, [r3, #12]
      break;
 80032f6:	e029      	b.n	800334c <HAL_TIM_PWM_Start_DMA+0x304>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032fc:	4a44      	ldr	r2, [pc, #272]	; (8003410 <HAL_TIM_PWM_Start_DMA+0x3c8>)
 80032fe:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003304:	4a43      	ldr	r2, [pc, #268]	; (8003414 <HAL_TIM_PWM_Start_DMA+0x3cc>)
 8003306:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800330c:	4a42      	ldr	r2, [pc, #264]	; (8003418 <HAL_TIM_PWM_Start_DMA+0x3d0>)
 800330e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003314:	6879      	ldr	r1, [r7, #4]
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	3340      	adds	r3, #64	; 0x40
 800331c:	001a      	movs	r2, r3
 800331e:	1cbb      	adds	r3, r7, #2
 8003320:	881b      	ldrh	r3, [r3, #0]
 8003322:	f7fe fbb1 	bl	8001a88 <HAL_DMA_Start_IT>
 8003326:	1e03      	subs	r3, r0, #0
 8003328:	d001      	beq.n	800332e <HAL_TIM_PWM_Start_DMA+0x2e6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	e06b      	b.n	8003406 <HAL_TIM_PWM_Start_DMA+0x3be>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	68da      	ldr	r2, [r3, #12]
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	2180      	movs	r1, #128	; 0x80
 800333a:	0149      	lsls	r1, r1, #5
 800333c:	430a      	orrs	r2, r1
 800333e:	60da      	str	r2, [r3, #12]
      break;
 8003340:	e004      	b.n	800334c <HAL_TIM_PWM_Start_DMA+0x304>
    }

    default:
      status = HAL_ERROR;
 8003342:	2317      	movs	r3, #23
 8003344:	18fb      	adds	r3, r7, r3
 8003346:	2201      	movs	r2, #1
 8003348:	701a      	strb	r2, [r3, #0]
      break;
 800334a:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 800334c:	2317      	movs	r3, #23
 800334e:	18fb      	adds	r3, r7, r3
 8003350:	781b      	ldrb	r3, [r3, #0]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d154      	bne.n	8003400 <HAL_TIM_PWM_Start_DMA+0x3b8>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	68b9      	ldr	r1, [r7, #8]
 800335c:	2201      	movs	r2, #1
 800335e:	0018      	movs	r0, r3
 8003360:	f000 ffc6 	bl	80042f0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a2c      	ldr	r2, [pc, #176]	; (800341c <HAL_TIM_PWM_Start_DMA+0x3d4>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d009      	beq.n	8003382 <HAL_TIM_PWM_Start_DMA+0x33a>
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a2b      	ldr	r2, [pc, #172]	; (8003420 <HAL_TIM_PWM_Start_DMA+0x3d8>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d004      	beq.n	8003382 <HAL_TIM_PWM_Start_DMA+0x33a>
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a29      	ldr	r2, [pc, #164]	; (8003424 <HAL_TIM_PWM_Start_DMA+0x3dc>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d101      	bne.n	8003386 <HAL_TIM_PWM_Start_DMA+0x33e>
 8003382:	2301      	movs	r3, #1
 8003384:	e000      	b.n	8003388 <HAL_TIM_PWM_Start_DMA+0x340>
 8003386:	2300      	movs	r3, #0
 8003388:	2b00      	cmp	r3, #0
 800338a:	d008      	beq.n	800339e <HAL_TIM_PWM_Start_DMA+0x356>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	2180      	movs	r1, #128	; 0x80
 8003398:	0209      	lsls	r1, r1, #8
 800339a:	430a      	orrs	r2, r1
 800339c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4a1e      	ldr	r2, [pc, #120]	; (800341c <HAL_TIM_PWM_Start_DMA+0x3d4>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d00a      	beq.n	80033be <HAL_TIM_PWM_Start_DMA+0x376>
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681a      	ldr	r2, [r3, #0]
 80033ac:	2380      	movs	r3, #128	; 0x80
 80033ae:	05db      	lsls	r3, r3, #23
 80033b0:	429a      	cmp	r2, r3
 80033b2:	d004      	beq.n	80033be <HAL_TIM_PWM_Start_DMA+0x376>
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a1b      	ldr	r2, [pc, #108]	; (8003428 <HAL_TIM_PWM_Start_DMA+0x3e0>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d116      	bne.n	80033ec <HAL_TIM_PWM_Start_DMA+0x3a4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	689b      	ldr	r3, [r3, #8]
 80033c4:	4a19      	ldr	r2, [pc, #100]	; (800342c <HAL_TIM_PWM_Start_DMA+0x3e4>)
 80033c6:	4013      	ands	r3, r2
 80033c8:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033ca:	693b      	ldr	r3, [r7, #16]
 80033cc:	2b06      	cmp	r3, #6
 80033ce:	d016      	beq.n	80033fe <HAL_TIM_PWM_Start_DMA+0x3b6>
 80033d0:	693a      	ldr	r2, [r7, #16]
 80033d2:	2380      	movs	r3, #128	; 0x80
 80033d4:	025b      	lsls	r3, r3, #9
 80033d6:	429a      	cmp	r2, r3
 80033d8:	d011      	beq.n	80033fe <HAL_TIM_PWM_Start_DMA+0x3b6>
      {
        __HAL_TIM_ENABLE(htim);
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	681a      	ldr	r2, [r3, #0]
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	2101      	movs	r1, #1
 80033e6:	430a      	orrs	r2, r1
 80033e8:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033ea:	e008      	b.n	80033fe <HAL_TIM_PWM_Start_DMA+0x3b6>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	681a      	ldr	r2, [r3, #0]
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	2101      	movs	r1, #1
 80033f8:	430a      	orrs	r2, r1
 80033fa:	601a      	str	r2, [r3, #0]
 80033fc:	e000      	b.n	8003400 <HAL_TIM_PWM_Start_DMA+0x3b8>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033fe:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Return function status */
  return status;
 8003400:	2317      	movs	r3, #23
 8003402:	18fb      	adds	r3, r7, r3
 8003404:	781b      	ldrb	r3, [r3, #0]
}
 8003406:	0018      	movs	r0, r3
 8003408:	46bd      	mov	sp, r7
 800340a:	b006      	add	sp, #24
 800340c:	bd80      	pop	{r7, pc}
 800340e:	46c0      	nop			; (mov r8, r8)
 8003410:	08003a65 	.word	0x08003a65
 8003414:	08003b0f 	.word	0x08003b0f
 8003418:	080039d1 	.word	0x080039d1
 800341c:	40012c00 	.word	0x40012c00
 8003420:	40014400 	.word	0x40014400
 8003424:	40014800 	.word	0x40014800
 8003428:	40000400 	.word	0x40000400
 800342c:	00010007 	.word	0x00010007

08003430 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b084      	sub	sp, #16
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
 8003438:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800343a:	230f      	movs	r3, #15
 800343c:	18fb      	adds	r3, r7, r3
 800343e:	2200      	movs	r2, #0
 8003440:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	2b0c      	cmp	r3, #12
 8003446:	d039      	beq.n	80034bc <HAL_TIM_PWM_Stop_DMA+0x8c>
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	2b0c      	cmp	r3, #12
 800344c:	d844      	bhi.n	80034d8 <HAL_TIM_PWM_Stop_DMA+0xa8>
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	2b08      	cmp	r3, #8
 8003452:	d025      	beq.n	80034a0 <HAL_TIM_PWM_Stop_DMA+0x70>
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	2b08      	cmp	r3, #8
 8003458:	d83e      	bhi.n	80034d8 <HAL_TIM_PWM_Stop_DMA+0xa8>
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d003      	beq.n	8003468 <HAL_TIM_PWM_Stop_DMA+0x38>
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	2b04      	cmp	r3, #4
 8003464:	d00e      	beq.n	8003484 <HAL_TIM_PWM_Stop_DMA+0x54>
 8003466:	e037      	b.n	80034d8 <HAL_TIM_PWM_Stop_DMA+0xa8>
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	68da      	ldr	r2, [r3, #12]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	495a      	ldr	r1, [pc, #360]	; (80035dc <HAL_TIM_PWM_Stop_DMA+0x1ac>)
 8003474:	400a      	ands	r2, r1
 8003476:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800347c:	0018      	movs	r0, r3
 800347e:	f7fe fb89 	bl	8001b94 <HAL_DMA_Abort_IT>
      break;
 8003482:	e02e      	b.n	80034e2 <HAL_TIM_PWM_Stop_DMA+0xb2>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	68da      	ldr	r2, [r3, #12]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4954      	ldr	r1, [pc, #336]	; (80035e0 <HAL_TIM_PWM_Stop_DMA+0x1b0>)
 8003490:	400a      	ands	r2, r1
 8003492:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003498:	0018      	movs	r0, r3
 800349a:	f7fe fb7b 	bl	8001b94 <HAL_DMA_Abort_IT>
      break;
 800349e:	e020      	b.n	80034e2 <HAL_TIM_PWM_Stop_DMA+0xb2>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	68da      	ldr	r2, [r3, #12]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	494e      	ldr	r1, [pc, #312]	; (80035e4 <HAL_TIM_PWM_Stop_DMA+0x1b4>)
 80034ac:	400a      	ands	r2, r1
 80034ae:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034b4:	0018      	movs	r0, r3
 80034b6:	f7fe fb6d 	bl	8001b94 <HAL_DMA_Abort_IT>
      break;
 80034ba:	e012      	b.n	80034e2 <HAL_TIM_PWM_Stop_DMA+0xb2>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	68da      	ldr	r2, [r3, #12]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4948      	ldr	r1, [pc, #288]	; (80035e8 <HAL_TIM_PWM_Stop_DMA+0x1b8>)
 80034c8:	400a      	ands	r2, r1
 80034ca:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034d0:	0018      	movs	r0, r3
 80034d2:	f7fe fb5f 	bl	8001b94 <HAL_DMA_Abort_IT>
      break;
 80034d6:	e004      	b.n	80034e2 <HAL_TIM_PWM_Stop_DMA+0xb2>
    }

    default:
      status = HAL_ERROR;
 80034d8:	230f      	movs	r3, #15
 80034da:	18fb      	adds	r3, r7, r3
 80034dc:	2201      	movs	r2, #1
 80034de:	701a      	strb	r2, [r3, #0]
      break;
 80034e0:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 80034e2:	230f      	movs	r3, #15
 80034e4:	18fb      	adds	r3, r7, r3
 80034e6:	781b      	ldrb	r3, [r3, #0]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d000      	beq.n	80034ee <HAL_TIM_PWM_Stop_DMA+0xbe>
 80034ec:	e06e      	b.n	80035cc <HAL_TIM_PWM_Stop_DMA+0x19c>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	6839      	ldr	r1, [r7, #0]
 80034f4:	2200      	movs	r2, #0
 80034f6:	0018      	movs	r0, r3
 80034f8:	f000 fefa 	bl	80042f0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4a3a      	ldr	r2, [pc, #232]	; (80035ec <HAL_TIM_PWM_Stop_DMA+0x1bc>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d009      	beq.n	800351a <HAL_TIM_PWM_Stop_DMA+0xea>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a39      	ldr	r2, [pc, #228]	; (80035f0 <HAL_TIM_PWM_Stop_DMA+0x1c0>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d004      	beq.n	800351a <HAL_TIM_PWM_Stop_DMA+0xea>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a37      	ldr	r2, [pc, #220]	; (80035f4 <HAL_TIM_PWM_Stop_DMA+0x1c4>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d101      	bne.n	800351e <HAL_TIM_PWM_Stop_DMA+0xee>
 800351a:	2301      	movs	r3, #1
 800351c:	e000      	b.n	8003520 <HAL_TIM_PWM_Stop_DMA+0xf0>
 800351e:	2300      	movs	r3, #0
 8003520:	2b00      	cmp	r3, #0
 8003522:	d013      	beq.n	800354c <HAL_TIM_PWM_Stop_DMA+0x11c>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	6a1b      	ldr	r3, [r3, #32]
 800352a:	4a33      	ldr	r2, [pc, #204]	; (80035f8 <HAL_TIM_PWM_Stop_DMA+0x1c8>)
 800352c:	4013      	ands	r3, r2
 800352e:	d10d      	bne.n	800354c <HAL_TIM_PWM_Stop_DMA+0x11c>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	6a1b      	ldr	r3, [r3, #32]
 8003536:	4a31      	ldr	r2, [pc, #196]	; (80035fc <HAL_TIM_PWM_Stop_DMA+0x1cc>)
 8003538:	4013      	ands	r3, r2
 800353a:	d107      	bne.n	800354c <HAL_TIM_PWM_Stop_DMA+0x11c>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	492e      	ldr	r1, [pc, #184]	; (8003600 <HAL_TIM_PWM_Stop_DMA+0x1d0>)
 8003548:	400a      	ands	r2, r1
 800354a:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	6a1b      	ldr	r3, [r3, #32]
 8003552:	4a29      	ldr	r2, [pc, #164]	; (80035f8 <HAL_TIM_PWM_Stop_DMA+0x1c8>)
 8003554:	4013      	ands	r3, r2
 8003556:	d10d      	bne.n	8003574 <HAL_TIM_PWM_Stop_DMA+0x144>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	6a1b      	ldr	r3, [r3, #32]
 800355e:	4a27      	ldr	r2, [pc, #156]	; (80035fc <HAL_TIM_PWM_Stop_DMA+0x1cc>)
 8003560:	4013      	ands	r3, r2
 8003562:	d107      	bne.n	8003574 <HAL_TIM_PWM_Stop_DMA+0x144>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	681a      	ldr	r2, [r3, #0]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	2101      	movs	r1, #1
 8003570:	438a      	bics	r2, r1
 8003572:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d104      	bne.n	8003584 <HAL_TIM_PWM_Stop_DMA+0x154>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	223e      	movs	r2, #62	; 0x3e
 800357e:	2101      	movs	r1, #1
 8003580:	5499      	strb	r1, [r3, r2]
 8003582:	e023      	b.n	80035cc <HAL_TIM_PWM_Stop_DMA+0x19c>
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	2b04      	cmp	r3, #4
 8003588:	d104      	bne.n	8003594 <HAL_TIM_PWM_Stop_DMA+0x164>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	223f      	movs	r2, #63	; 0x3f
 800358e:	2101      	movs	r1, #1
 8003590:	5499      	strb	r1, [r3, r2]
 8003592:	e01b      	b.n	80035cc <HAL_TIM_PWM_Stop_DMA+0x19c>
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	2b08      	cmp	r3, #8
 8003598:	d104      	bne.n	80035a4 <HAL_TIM_PWM_Stop_DMA+0x174>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2240      	movs	r2, #64	; 0x40
 800359e:	2101      	movs	r1, #1
 80035a0:	5499      	strb	r1, [r3, r2]
 80035a2:	e013      	b.n	80035cc <HAL_TIM_PWM_Stop_DMA+0x19c>
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	2b0c      	cmp	r3, #12
 80035a8:	d104      	bne.n	80035b4 <HAL_TIM_PWM_Stop_DMA+0x184>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2241      	movs	r2, #65	; 0x41
 80035ae:	2101      	movs	r1, #1
 80035b0:	5499      	strb	r1, [r3, r2]
 80035b2:	e00b      	b.n	80035cc <HAL_TIM_PWM_Stop_DMA+0x19c>
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	2b10      	cmp	r3, #16
 80035b8:	d104      	bne.n	80035c4 <HAL_TIM_PWM_Stop_DMA+0x194>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2242      	movs	r2, #66	; 0x42
 80035be:	2101      	movs	r1, #1
 80035c0:	5499      	strb	r1, [r3, r2]
 80035c2:	e003      	b.n	80035cc <HAL_TIM_PWM_Stop_DMA+0x19c>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2243      	movs	r2, #67	; 0x43
 80035c8:	2101      	movs	r1, #1
 80035ca:	5499      	strb	r1, [r3, r2]
  }

  /* Return function status */
  return status;
 80035cc:	230f      	movs	r3, #15
 80035ce:	18fb      	adds	r3, r7, r3
 80035d0:	781b      	ldrb	r3, [r3, #0]
}
 80035d2:	0018      	movs	r0, r3
 80035d4:	46bd      	mov	sp, r7
 80035d6:	b004      	add	sp, #16
 80035d8:	bd80      	pop	{r7, pc}
 80035da:	46c0      	nop			; (mov r8, r8)
 80035dc:	fffffdff 	.word	0xfffffdff
 80035e0:	fffffbff 	.word	0xfffffbff
 80035e4:	fffff7ff 	.word	0xfffff7ff
 80035e8:	ffffefff 	.word	0xffffefff
 80035ec:	40012c00 	.word	0x40012c00
 80035f0:	40014400 	.word	0x40014400
 80035f4:	40014800 	.word	0x40014800
 80035f8:	00001111 	.word	0x00001111
 80035fc:	00000444 	.word	0x00000444
 8003600:	ffff7fff 	.word	0xffff7fff

08003604 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b086      	sub	sp, #24
 8003608:	af00      	add	r7, sp, #0
 800360a:	60f8      	str	r0, [r7, #12]
 800360c:	60b9      	str	r1, [r7, #8]
 800360e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003610:	2317      	movs	r3, #23
 8003612:	18fb      	adds	r3, r7, r3
 8003614:	2200      	movs	r2, #0
 8003616:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	223c      	movs	r2, #60	; 0x3c
 800361c:	5c9b      	ldrb	r3, [r3, r2]
 800361e:	2b01      	cmp	r3, #1
 8003620:	d101      	bne.n	8003626 <HAL_TIM_PWM_ConfigChannel+0x22>
 8003622:	2302      	movs	r3, #2
 8003624:	e0e5      	b.n	80037f2 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	223c      	movs	r2, #60	; 0x3c
 800362a:	2101      	movs	r1, #1
 800362c:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2b14      	cmp	r3, #20
 8003632:	d900      	bls.n	8003636 <HAL_TIM_PWM_ConfigChannel+0x32>
 8003634:	e0d1      	b.n	80037da <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	009a      	lsls	r2, r3, #2
 800363a:	4b70      	ldr	r3, [pc, #448]	; (80037fc <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 800363c:	18d3      	adds	r3, r2, r3
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	68ba      	ldr	r2, [r7, #8]
 8003648:	0011      	movs	r1, r2
 800364a:	0018      	movs	r0, r3
 800364c:	f000 fb18 	bl	8003c80 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	699a      	ldr	r2, [r3, #24]
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	2108      	movs	r1, #8
 800365c:	430a      	orrs	r2, r1
 800365e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	699a      	ldr	r2, [r3, #24]
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	2104      	movs	r1, #4
 800366c:	438a      	bics	r2, r1
 800366e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	6999      	ldr	r1, [r3, #24]
 8003676:	68bb      	ldr	r3, [r7, #8]
 8003678:	691a      	ldr	r2, [r3, #16]
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	430a      	orrs	r2, r1
 8003680:	619a      	str	r2, [r3, #24]
      break;
 8003682:	e0af      	b.n	80037e4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	68ba      	ldr	r2, [r7, #8]
 800368a:	0011      	movs	r1, r2
 800368c:	0018      	movs	r0, r3
 800368e:	f000 fb77 	bl	8003d80 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	699a      	ldr	r2, [r3, #24]
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	2180      	movs	r1, #128	; 0x80
 800369e:	0109      	lsls	r1, r1, #4
 80036a0:	430a      	orrs	r2, r1
 80036a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	699a      	ldr	r2, [r3, #24]
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4954      	ldr	r1, [pc, #336]	; (8003800 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80036b0:	400a      	ands	r2, r1
 80036b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	6999      	ldr	r1, [r3, #24]
 80036ba:	68bb      	ldr	r3, [r7, #8]
 80036bc:	691b      	ldr	r3, [r3, #16]
 80036be:	021a      	lsls	r2, r3, #8
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	430a      	orrs	r2, r1
 80036c6:	619a      	str	r2, [r3, #24]
      break;
 80036c8:	e08c      	b.n	80037e4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	68ba      	ldr	r2, [r7, #8]
 80036d0:	0011      	movs	r1, r2
 80036d2:	0018      	movs	r0, r3
 80036d4:	f000 fbd2 	bl	8003e7c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	69da      	ldr	r2, [r3, #28]
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	2108      	movs	r1, #8
 80036e4:	430a      	orrs	r2, r1
 80036e6:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	69da      	ldr	r2, [r3, #28]
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	2104      	movs	r1, #4
 80036f4:	438a      	bics	r2, r1
 80036f6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	69d9      	ldr	r1, [r3, #28]
 80036fe:	68bb      	ldr	r3, [r7, #8]
 8003700:	691a      	ldr	r2, [r3, #16]
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	430a      	orrs	r2, r1
 8003708:	61da      	str	r2, [r3, #28]
      break;
 800370a:	e06b      	b.n	80037e4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	68ba      	ldr	r2, [r7, #8]
 8003712:	0011      	movs	r1, r2
 8003714:	0018      	movs	r0, r3
 8003716:	f000 fc33 	bl	8003f80 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	69da      	ldr	r2, [r3, #28]
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	2180      	movs	r1, #128	; 0x80
 8003726:	0109      	lsls	r1, r1, #4
 8003728:	430a      	orrs	r2, r1
 800372a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	69da      	ldr	r2, [r3, #28]
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4932      	ldr	r1, [pc, #200]	; (8003800 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003738:	400a      	ands	r2, r1
 800373a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	69d9      	ldr	r1, [r3, #28]
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	691b      	ldr	r3, [r3, #16]
 8003746:	021a      	lsls	r2, r3, #8
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	430a      	orrs	r2, r1
 800374e:	61da      	str	r2, [r3, #28]
      break;
 8003750:	e048      	b.n	80037e4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	68ba      	ldr	r2, [r7, #8]
 8003758:	0011      	movs	r1, r2
 800375a:	0018      	movs	r0, r3
 800375c:	f000 fc74 	bl	8004048 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	2108      	movs	r1, #8
 800376c:	430a      	orrs	r2, r1
 800376e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	2104      	movs	r1, #4
 800377c:	438a      	bics	r2, r1
 800377e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003786:	68bb      	ldr	r3, [r7, #8]
 8003788:	691a      	ldr	r2, [r3, #16]
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	430a      	orrs	r2, r1
 8003790:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003792:	e027      	b.n	80037e4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	68ba      	ldr	r2, [r7, #8]
 800379a:	0011      	movs	r1, r2
 800379c:	0018      	movs	r0, r3
 800379e:	f000 fcad 	bl	80040fc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	2180      	movs	r1, #128	; 0x80
 80037ae:	0109      	lsls	r1, r1, #4
 80037b0:	430a      	orrs	r2, r1
 80037b2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4910      	ldr	r1, [pc, #64]	; (8003800 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80037c0:	400a      	ands	r2, r1
 80037c2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80037ca:	68bb      	ldr	r3, [r7, #8]
 80037cc:	691b      	ldr	r3, [r3, #16]
 80037ce:	021a      	lsls	r2, r3, #8
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	430a      	orrs	r2, r1
 80037d6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80037d8:	e004      	b.n	80037e4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 80037da:	2317      	movs	r3, #23
 80037dc:	18fb      	adds	r3, r7, r3
 80037de:	2201      	movs	r2, #1
 80037e0:	701a      	strb	r2, [r3, #0]
      break;
 80037e2:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	223c      	movs	r2, #60	; 0x3c
 80037e8:	2100      	movs	r1, #0
 80037ea:	5499      	strb	r1, [r3, r2]

  return status;
 80037ec:	2317      	movs	r3, #23
 80037ee:	18fb      	adds	r3, r7, r3
 80037f0:	781b      	ldrb	r3, [r3, #0]
}
 80037f2:	0018      	movs	r0, r3
 80037f4:	46bd      	mov	sp, r7
 80037f6:	b006      	add	sp, #24
 80037f8:	bd80      	pop	{r7, pc}
 80037fa:	46c0      	nop			; (mov r8, r8)
 80037fc:	08004698 	.word	0x08004698
 8003800:	fffffbff 	.word	0xfffffbff

08003804 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b084      	sub	sp, #16
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
 800380c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800380e:	230f      	movs	r3, #15
 8003810:	18fb      	adds	r3, r7, r3
 8003812:	2200      	movs	r2, #0
 8003814:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	223c      	movs	r2, #60	; 0x3c
 800381a:	5c9b      	ldrb	r3, [r3, r2]
 800381c:	2b01      	cmp	r3, #1
 800381e:	d101      	bne.n	8003824 <HAL_TIM_ConfigClockSource+0x20>
 8003820:	2302      	movs	r3, #2
 8003822:	e0bc      	b.n	800399e <HAL_TIM_ConfigClockSource+0x19a>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	223c      	movs	r2, #60	; 0x3c
 8003828:	2101      	movs	r1, #1
 800382a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	223d      	movs	r2, #61	; 0x3d
 8003830:	2102      	movs	r1, #2
 8003832:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	689b      	ldr	r3, [r3, #8]
 800383a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800383c:	68bb      	ldr	r3, [r7, #8]
 800383e:	4a5a      	ldr	r2, [pc, #360]	; (80039a8 <HAL_TIM_ConfigClockSource+0x1a4>)
 8003840:	4013      	ands	r3, r2
 8003842:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003844:	68bb      	ldr	r3, [r7, #8]
 8003846:	4a59      	ldr	r2, [pc, #356]	; (80039ac <HAL_TIM_ConfigClockSource+0x1a8>)
 8003848:	4013      	ands	r3, r2
 800384a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	68ba      	ldr	r2, [r7, #8]
 8003852:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	2280      	movs	r2, #128	; 0x80
 800385a:	0192      	lsls	r2, r2, #6
 800385c:	4293      	cmp	r3, r2
 800385e:	d040      	beq.n	80038e2 <HAL_TIM_ConfigClockSource+0xde>
 8003860:	2280      	movs	r2, #128	; 0x80
 8003862:	0192      	lsls	r2, r2, #6
 8003864:	4293      	cmp	r3, r2
 8003866:	d900      	bls.n	800386a <HAL_TIM_ConfigClockSource+0x66>
 8003868:	e088      	b.n	800397c <HAL_TIM_ConfigClockSource+0x178>
 800386a:	2280      	movs	r2, #128	; 0x80
 800386c:	0152      	lsls	r2, r2, #5
 800386e:	4293      	cmp	r3, r2
 8003870:	d100      	bne.n	8003874 <HAL_TIM_ConfigClockSource+0x70>
 8003872:	e088      	b.n	8003986 <HAL_TIM_ConfigClockSource+0x182>
 8003874:	2280      	movs	r2, #128	; 0x80
 8003876:	0152      	lsls	r2, r2, #5
 8003878:	4293      	cmp	r3, r2
 800387a:	d900      	bls.n	800387e <HAL_TIM_ConfigClockSource+0x7a>
 800387c:	e07e      	b.n	800397c <HAL_TIM_ConfigClockSource+0x178>
 800387e:	2b70      	cmp	r3, #112	; 0x70
 8003880:	d018      	beq.n	80038b4 <HAL_TIM_ConfigClockSource+0xb0>
 8003882:	d900      	bls.n	8003886 <HAL_TIM_ConfigClockSource+0x82>
 8003884:	e07a      	b.n	800397c <HAL_TIM_ConfigClockSource+0x178>
 8003886:	2b60      	cmp	r3, #96	; 0x60
 8003888:	d04f      	beq.n	800392a <HAL_TIM_ConfigClockSource+0x126>
 800388a:	d900      	bls.n	800388e <HAL_TIM_ConfigClockSource+0x8a>
 800388c:	e076      	b.n	800397c <HAL_TIM_ConfigClockSource+0x178>
 800388e:	2b50      	cmp	r3, #80	; 0x50
 8003890:	d03b      	beq.n	800390a <HAL_TIM_ConfigClockSource+0x106>
 8003892:	d900      	bls.n	8003896 <HAL_TIM_ConfigClockSource+0x92>
 8003894:	e072      	b.n	800397c <HAL_TIM_ConfigClockSource+0x178>
 8003896:	2b40      	cmp	r3, #64	; 0x40
 8003898:	d057      	beq.n	800394a <HAL_TIM_ConfigClockSource+0x146>
 800389a:	d900      	bls.n	800389e <HAL_TIM_ConfigClockSource+0x9a>
 800389c:	e06e      	b.n	800397c <HAL_TIM_ConfigClockSource+0x178>
 800389e:	2b30      	cmp	r3, #48	; 0x30
 80038a0:	d063      	beq.n	800396a <HAL_TIM_ConfigClockSource+0x166>
 80038a2:	d86b      	bhi.n	800397c <HAL_TIM_ConfigClockSource+0x178>
 80038a4:	2b20      	cmp	r3, #32
 80038a6:	d060      	beq.n	800396a <HAL_TIM_ConfigClockSource+0x166>
 80038a8:	d868      	bhi.n	800397c <HAL_TIM_ConfigClockSource+0x178>
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d05d      	beq.n	800396a <HAL_TIM_ConfigClockSource+0x166>
 80038ae:	2b10      	cmp	r3, #16
 80038b0:	d05b      	beq.n	800396a <HAL_TIM_ConfigClockSource+0x166>
 80038b2:	e063      	b.n	800397c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80038c4:	f000 fcf4 	bl	80042b0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	689b      	ldr	r3, [r3, #8]
 80038ce:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	2277      	movs	r2, #119	; 0x77
 80038d4:	4313      	orrs	r3, r2
 80038d6:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	68ba      	ldr	r2, [r7, #8]
 80038de:	609a      	str	r2, [r3, #8]
      break;
 80038e0:	e052      	b.n	8003988 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80038f2:	f000 fcdd 	bl	80042b0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	689a      	ldr	r2, [r3, #8]
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	2180      	movs	r1, #128	; 0x80
 8003902:	01c9      	lsls	r1, r1, #7
 8003904:	430a      	orrs	r2, r1
 8003906:	609a      	str	r2, [r3, #8]
      break;
 8003908:	e03e      	b.n	8003988 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003916:	001a      	movs	r2, r3
 8003918:	f000 fc4e 	bl	80041b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	2150      	movs	r1, #80	; 0x50
 8003922:	0018      	movs	r0, r3
 8003924:	f000 fca8 	bl	8004278 <TIM_ITRx_SetConfig>
      break;
 8003928:	e02e      	b.n	8003988 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003936:	001a      	movs	r2, r3
 8003938:	f000 fc6c 	bl	8004214 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	2160      	movs	r1, #96	; 0x60
 8003942:	0018      	movs	r0, r3
 8003944:	f000 fc98 	bl	8004278 <TIM_ITRx_SetConfig>
      break;
 8003948:	e01e      	b.n	8003988 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003956:	001a      	movs	r2, r3
 8003958:	f000 fc2e 	bl	80041b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	2140      	movs	r1, #64	; 0x40
 8003962:	0018      	movs	r0, r3
 8003964:	f000 fc88 	bl	8004278 <TIM_ITRx_SetConfig>
      break;
 8003968:	e00e      	b.n	8003988 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681a      	ldr	r2, [r3, #0]
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	0019      	movs	r1, r3
 8003974:	0010      	movs	r0, r2
 8003976:	f000 fc7f 	bl	8004278 <TIM_ITRx_SetConfig>
      break;
 800397a:	e005      	b.n	8003988 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 800397c:	230f      	movs	r3, #15
 800397e:	18fb      	adds	r3, r7, r3
 8003980:	2201      	movs	r2, #1
 8003982:	701a      	strb	r2, [r3, #0]
      break;
 8003984:	e000      	b.n	8003988 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8003986:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	223d      	movs	r2, #61	; 0x3d
 800398c:	2101      	movs	r1, #1
 800398e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	223c      	movs	r2, #60	; 0x3c
 8003994:	2100      	movs	r1, #0
 8003996:	5499      	strb	r1, [r3, r2]

  return status;
 8003998:	230f      	movs	r3, #15
 800399a:	18fb      	adds	r3, r7, r3
 800399c:	781b      	ldrb	r3, [r3, #0]
}
 800399e:	0018      	movs	r0, r3
 80039a0:	46bd      	mov	sp, r7
 80039a2:	b004      	add	sp, #16
 80039a4:	bd80      	pop	{r7, pc}
 80039a6:	46c0      	nop			; (mov r8, r8)
 80039a8:	ffceff88 	.word	0xffceff88
 80039ac:	ffff00ff 	.word	0xffff00ff

080039b0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b082      	sub	sp, #8
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80039b8:	46c0      	nop			; (mov r8, r8)
 80039ba:	46bd      	mov	sp, r7
 80039bc:	b002      	add	sp, #8
 80039be:	bd80      	pop	{r7, pc}

080039c0 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b082      	sub	sp, #8
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80039c8:	46c0      	nop			; (mov r8, r8)
 80039ca:	46bd      	mov	sp, r7
 80039cc:	b002      	add	sp, #8
 80039ce:	bd80      	pop	{r7, pc}

080039d0 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b084      	sub	sp, #16
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039dc:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039e2:	687a      	ldr	r2, [r7, #4]
 80039e4:	429a      	cmp	r2, r3
 80039e6:	d107      	bne.n	80039f8 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	2201      	movs	r2, #1
 80039ec:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	223e      	movs	r2, #62	; 0x3e
 80039f2:	2101      	movs	r1, #1
 80039f4:	5499      	strb	r1, [r3, r2]
 80039f6:	e02a      	b.n	8003a4e <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039fc:	687a      	ldr	r2, [r7, #4]
 80039fe:	429a      	cmp	r2, r3
 8003a00:	d107      	bne.n	8003a12 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	2202      	movs	r2, #2
 8003a06:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	223f      	movs	r2, #63	; 0x3f
 8003a0c:	2101      	movs	r1, #1
 8003a0e:	5499      	strb	r1, [r3, r2]
 8003a10:	e01d      	b.n	8003a4e <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a16:	687a      	ldr	r2, [r7, #4]
 8003a18:	429a      	cmp	r2, r3
 8003a1a:	d107      	bne.n	8003a2c <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	2204      	movs	r2, #4
 8003a20:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	2240      	movs	r2, #64	; 0x40
 8003a26:	2101      	movs	r1, #1
 8003a28:	5499      	strb	r1, [r3, r2]
 8003a2a:	e010      	b.n	8003a4e <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a30:	687a      	ldr	r2, [r7, #4]
 8003a32:	429a      	cmp	r2, r3
 8003a34:	d107      	bne.n	8003a46 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	2208      	movs	r2, #8
 8003a3a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	2241      	movs	r2, #65	; 0x41
 8003a40:	2101      	movs	r1, #1
 8003a42:	5499      	strb	r1, [r3, r2]
 8003a44:	e003      	b.n	8003a4e <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	223d      	movs	r2, #61	; 0x3d
 8003a4a:	2101      	movs	r1, #1
 8003a4c:	5499      	strb	r1, [r3, r2]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	0018      	movs	r0, r3
 8003a52:	f7ff ffb5 	bl	80039c0 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	771a      	strb	r2, [r3, #28]
}
 8003a5c:	46c0      	nop			; (mov r8, r8)
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	b004      	add	sp, #16
 8003a62:	bd80      	pop	{r7, pc}

08003a64 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b084      	sub	sp, #16
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a70:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a76:	687a      	ldr	r2, [r7, #4]
 8003a78:	429a      	cmp	r2, r3
 8003a7a:	d10b      	bne.n	8003a94 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	2201      	movs	r2, #1
 8003a80:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	69db      	ldr	r3, [r3, #28]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d136      	bne.n	8003af8 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	223e      	movs	r2, #62	; 0x3e
 8003a8e:	2101      	movs	r1, #1
 8003a90:	5499      	strb	r1, [r3, r2]
 8003a92:	e031      	b.n	8003af8 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a98:	687a      	ldr	r2, [r7, #4]
 8003a9a:	429a      	cmp	r2, r3
 8003a9c:	d10b      	bne.n	8003ab6 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	2202      	movs	r2, #2
 8003aa2:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	69db      	ldr	r3, [r3, #28]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d125      	bne.n	8003af8 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	223f      	movs	r2, #63	; 0x3f
 8003ab0:	2101      	movs	r1, #1
 8003ab2:	5499      	strb	r1, [r3, r2]
 8003ab4:	e020      	b.n	8003af8 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aba:	687a      	ldr	r2, [r7, #4]
 8003abc:	429a      	cmp	r2, r3
 8003abe:	d10b      	bne.n	8003ad8 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	2204      	movs	r2, #4
 8003ac4:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	69db      	ldr	r3, [r3, #28]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d114      	bne.n	8003af8 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	2240      	movs	r2, #64	; 0x40
 8003ad2:	2101      	movs	r1, #1
 8003ad4:	5499      	strb	r1, [r3, r2]
 8003ad6:	e00f      	b.n	8003af8 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003adc:	687a      	ldr	r2, [r7, #4]
 8003ade:	429a      	cmp	r2, r3
 8003ae0:	d10a      	bne.n	8003af8 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	2208      	movs	r2, #8
 8003ae6:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	69db      	ldr	r3, [r3, #28]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d103      	bne.n	8003af8 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	2241      	movs	r2, #65	; 0x41
 8003af4:	2101      	movs	r1, #1
 8003af6:	5499      	strb	r1, [r3, r2]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	0018      	movs	r0, r3
 8003afc:	f7fc fc78 	bl	80003f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	2200      	movs	r2, #0
 8003b04:	771a      	strb	r2, [r3, #28]
}
 8003b06:	46c0      	nop			; (mov r8, r8)
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	b004      	add	sp, #16
 8003b0c:	bd80      	pop	{r7, pc}

08003b0e <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003b0e:	b580      	push	{r7, lr}
 8003b10:	b084      	sub	sp, #16
 8003b12:	af00      	add	r7, sp, #0
 8003b14:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b1a:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b20:	687a      	ldr	r2, [r7, #4]
 8003b22:	429a      	cmp	r2, r3
 8003b24:	d103      	bne.n	8003b2e <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	2201      	movs	r2, #1
 8003b2a:	771a      	strb	r2, [r3, #28]
 8003b2c:	e019      	b.n	8003b62 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b32:	687a      	ldr	r2, [r7, #4]
 8003b34:	429a      	cmp	r2, r3
 8003b36:	d103      	bne.n	8003b40 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	2202      	movs	r2, #2
 8003b3c:	771a      	strb	r2, [r3, #28]
 8003b3e:	e010      	b.n	8003b62 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b44:	687a      	ldr	r2, [r7, #4]
 8003b46:	429a      	cmp	r2, r3
 8003b48:	d103      	bne.n	8003b52 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	2204      	movs	r2, #4
 8003b4e:	771a      	strb	r2, [r3, #28]
 8003b50:	e007      	b.n	8003b62 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b56:	687a      	ldr	r2, [r7, #4]
 8003b58:	429a      	cmp	r2, r3
 8003b5a:	d102      	bne.n	8003b62 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	2208      	movs	r2, #8
 8003b60:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	0018      	movs	r0, r3
 8003b66:	f7ff ff23 	bl	80039b0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	771a      	strb	r2, [r3, #28]
}
 8003b70:	46c0      	nop			; (mov r8, r8)
 8003b72:	46bd      	mov	sp, r7
 8003b74:	b004      	add	sp, #16
 8003b76:	bd80      	pop	{r7, pc}

08003b78 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b084      	sub	sp, #16
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
 8003b80:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	4a37      	ldr	r2, [pc, #220]	; (8003c68 <TIM_Base_SetConfig+0xf0>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d008      	beq.n	8003ba2 <TIM_Base_SetConfig+0x2a>
 8003b90:	687a      	ldr	r2, [r7, #4]
 8003b92:	2380      	movs	r3, #128	; 0x80
 8003b94:	05db      	lsls	r3, r3, #23
 8003b96:	429a      	cmp	r2, r3
 8003b98:	d003      	beq.n	8003ba2 <TIM_Base_SetConfig+0x2a>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	4a33      	ldr	r2, [pc, #204]	; (8003c6c <TIM_Base_SetConfig+0xf4>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d108      	bne.n	8003bb4 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	2270      	movs	r2, #112	; 0x70
 8003ba6:	4393      	bics	r3, r2
 8003ba8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	68fa      	ldr	r2, [r7, #12]
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	4a2c      	ldr	r2, [pc, #176]	; (8003c68 <TIM_Base_SetConfig+0xf0>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d014      	beq.n	8003be6 <TIM_Base_SetConfig+0x6e>
 8003bbc:	687a      	ldr	r2, [r7, #4]
 8003bbe:	2380      	movs	r3, #128	; 0x80
 8003bc0:	05db      	lsls	r3, r3, #23
 8003bc2:	429a      	cmp	r2, r3
 8003bc4:	d00f      	beq.n	8003be6 <TIM_Base_SetConfig+0x6e>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	4a28      	ldr	r2, [pc, #160]	; (8003c6c <TIM_Base_SetConfig+0xf4>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d00b      	beq.n	8003be6 <TIM_Base_SetConfig+0x6e>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	4a27      	ldr	r2, [pc, #156]	; (8003c70 <TIM_Base_SetConfig+0xf8>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d007      	beq.n	8003be6 <TIM_Base_SetConfig+0x6e>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	4a26      	ldr	r2, [pc, #152]	; (8003c74 <TIM_Base_SetConfig+0xfc>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d003      	beq.n	8003be6 <TIM_Base_SetConfig+0x6e>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	4a25      	ldr	r2, [pc, #148]	; (8003c78 <TIM_Base_SetConfig+0x100>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d108      	bne.n	8003bf8 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	4a24      	ldr	r2, [pc, #144]	; (8003c7c <TIM_Base_SetConfig+0x104>)
 8003bea:	4013      	ands	r3, r2
 8003bec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	68db      	ldr	r3, [r3, #12]
 8003bf2:	68fa      	ldr	r2, [r7, #12]
 8003bf4:	4313      	orrs	r3, r2
 8003bf6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	2280      	movs	r2, #128	; 0x80
 8003bfc:	4393      	bics	r3, r2
 8003bfe:	001a      	movs	r2, r3
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	695b      	ldr	r3, [r3, #20]
 8003c04:	4313      	orrs	r3, r2
 8003c06:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	68fa      	ldr	r2, [r7, #12]
 8003c0c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	689a      	ldr	r2, [r3, #8]
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	681a      	ldr	r2, [r3, #0]
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	4a11      	ldr	r2, [pc, #68]	; (8003c68 <TIM_Base_SetConfig+0xf0>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d007      	beq.n	8003c36 <TIM_Base_SetConfig+0xbe>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	4a12      	ldr	r2, [pc, #72]	; (8003c74 <TIM_Base_SetConfig+0xfc>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d003      	beq.n	8003c36 <TIM_Base_SetConfig+0xbe>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	4a11      	ldr	r2, [pc, #68]	; (8003c78 <TIM_Base_SetConfig+0x100>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d103      	bne.n	8003c3e <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	691a      	ldr	r2, [r3, #16]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2201      	movs	r2, #1
 8003c42:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	691b      	ldr	r3, [r3, #16]
 8003c48:	2201      	movs	r2, #1
 8003c4a:	4013      	ands	r3, r2
 8003c4c:	2b01      	cmp	r3, #1
 8003c4e:	d106      	bne.n	8003c5e <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	691b      	ldr	r3, [r3, #16]
 8003c54:	2201      	movs	r2, #1
 8003c56:	4393      	bics	r3, r2
 8003c58:	001a      	movs	r2, r3
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	611a      	str	r2, [r3, #16]
  }
}
 8003c5e:	46c0      	nop			; (mov r8, r8)
 8003c60:	46bd      	mov	sp, r7
 8003c62:	b004      	add	sp, #16
 8003c64:	bd80      	pop	{r7, pc}
 8003c66:	46c0      	nop			; (mov r8, r8)
 8003c68:	40012c00 	.word	0x40012c00
 8003c6c:	40000400 	.word	0x40000400
 8003c70:	40002000 	.word	0x40002000
 8003c74:	40014400 	.word	0x40014400
 8003c78:	40014800 	.word	0x40014800
 8003c7c:	fffffcff 	.word	0xfffffcff

08003c80 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b086      	sub	sp, #24
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
 8003c88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6a1b      	ldr	r3, [r3, #32]
 8003c8e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6a1b      	ldr	r3, [r3, #32]
 8003c94:	2201      	movs	r2, #1
 8003c96:	4393      	bics	r3, r2
 8003c98:	001a      	movs	r2, r3
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	699b      	ldr	r3, [r3, #24]
 8003ca8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	4a2e      	ldr	r2, [pc, #184]	; (8003d68 <TIM_OC1_SetConfig+0xe8>)
 8003cae:	4013      	ands	r3, r2
 8003cb0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	2203      	movs	r2, #3
 8003cb6:	4393      	bics	r3, r2
 8003cb8:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	68fa      	ldr	r2, [r7, #12]
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003cc4:	697b      	ldr	r3, [r7, #20]
 8003cc6:	2202      	movs	r2, #2
 8003cc8:	4393      	bics	r3, r2
 8003cca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	689b      	ldr	r3, [r3, #8]
 8003cd0:	697a      	ldr	r2, [r7, #20]
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	4a24      	ldr	r2, [pc, #144]	; (8003d6c <TIM_OC1_SetConfig+0xec>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d007      	beq.n	8003cee <TIM_OC1_SetConfig+0x6e>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	4a23      	ldr	r2, [pc, #140]	; (8003d70 <TIM_OC1_SetConfig+0xf0>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d003      	beq.n	8003cee <TIM_OC1_SetConfig+0x6e>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	4a22      	ldr	r2, [pc, #136]	; (8003d74 <TIM_OC1_SetConfig+0xf4>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d10c      	bne.n	8003d08 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003cee:	697b      	ldr	r3, [r7, #20]
 8003cf0:	2208      	movs	r2, #8
 8003cf2:	4393      	bics	r3, r2
 8003cf4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	68db      	ldr	r3, [r3, #12]
 8003cfa:	697a      	ldr	r2, [r7, #20]
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003d00:	697b      	ldr	r3, [r7, #20]
 8003d02:	2204      	movs	r2, #4
 8003d04:	4393      	bics	r3, r2
 8003d06:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	4a18      	ldr	r2, [pc, #96]	; (8003d6c <TIM_OC1_SetConfig+0xec>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d007      	beq.n	8003d20 <TIM_OC1_SetConfig+0xa0>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	4a17      	ldr	r2, [pc, #92]	; (8003d70 <TIM_OC1_SetConfig+0xf0>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d003      	beq.n	8003d20 <TIM_OC1_SetConfig+0xa0>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	4a16      	ldr	r2, [pc, #88]	; (8003d74 <TIM_OC1_SetConfig+0xf4>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d111      	bne.n	8003d44 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003d20:	693b      	ldr	r3, [r7, #16]
 8003d22:	4a15      	ldr	r2, [pc, #84]	; (8003d78 <TIM_OC1_SetConfig+0xf8>)
 8003d24:	4013      	ands	r3, r2
 8003d26:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003d28:	693b      	ldr	r3, [r7, #16]
 8003d2a:	4a14      	ldr	r2, [pc, #80]	; (8003d7c <TIM_OC1_SetConfig+0xfc>)
 8003d2c:	4013      	ands	r3, r2
 8003d2e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	695b      	ldr	r3, [r3, #20]
 8003d34:	693a      	ldr	r2, [r7, #16]
 8003d36:	4313      	orrs	r3, r2
 8003d38:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	699b      	ldr	r3, [r3, #24]
 8003d3e:	693a      	ldr	r2, [r7, #16]
 8003d40:	4313      	orrs	r3, r2
 8003d42:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	693a      	ldr	r2, [r7, #16]
 8003d48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	68fa      	ldr	r2, [r7, #12]
 8003d4e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	685a      	ldr	r2, [r3, #4]
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	697a      	ldr	r2, [r7, #20]
 8003d5c:	621a      	str	r2, [r3, #32]
}
 8003d5e:	46c0      	nop			; (mov r8, r8)
 8003d60:	46bd      	mov	sp, r7
 8003d62:	b006      	add	sp, #24
 8003d64:	bd80      	pop	{r7, pc}
 8003d66:	46c0      	nop			; (mov r8, r8)
 8003d68:	fffeff8f 	.word	0xfffeff8f
 8003d6c:	40012c00 	.word	0x40012c00
 8003d70:	40014400 	.word	0x40014400
 8003d74:	40014800 	.word	0x40014800
 8003d78:	fffffeff 	.word	0xfffffeff
 8003d7c:	fffffdff 	.word	0xfffffdff

08003d80 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b086      	sub	sp, #24
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
 8003d88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6a1b      	ldr	r3, [r3, #32]
 8003d8e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6a1b      	ldr	r3, [r3, #32]
 8003d94:	2210      	movs	r2, #16
 8003d96:	4393      	bics	r3, r2
 8003d98:	001a      	movs	r2, r3
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	699b      	ldr	r3, [r3, #24]
 8003da8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	4a2c      	ldr	r2, [pc, #176]	; (8003e60 <TIM_OC2_SetConfig+0xe0>)
 8003dae:	4013      	ands	r3, r2
 8003db0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	4a2b      	ldr	r2, [pc, #172]	; (8003e64 <TIM_OC2_SetConfig+0xe4>)
 8003db6:	4013      	ands	r3, r2
 8003db8:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	021b      	lsls	r3, r3, #8
 8003dc0:	68fa      	ldr	r2, [r7, #12]
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003dc6:	697b      	ldr	r3, [r7, #20]
 8003dc8:	2220      	movs	r2, #32
 8003dca:	4393      	bics	r3, r2
 8003dcc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	689b      	ldr	r3, [r3, #8]
 8003dd2:	011b      	lsls	r3, r3, #4
 8003dd4:	697a      	ldr	r2, [r7, #20]
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	4a22      	ldr	r2, [pc, #136]	; (8003e68 <TIM_OC2_SetConfig+0xe8>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d10d      	bne.n	8003dfe <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003de2:	697b      	ldr	r3, [r7, #20]
 8003de4:	2280      	movs	r2, #128	; 0x80
 8003de6:	4393      	bics	r3, r2
 8003de8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	68db      	ldr	r3, [r3, #12]
 8003dee:	011b      	lsls	r3, r3, #4
 8003df0:	697a      	ldr	r2, [r7, #20]
 8003df2:	4313      	orrs	r3, r2
 8003df4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003df6:	697b      	ldr	r3, [r7, #20]
 8003df8:	2240      	movs	r2, #64	; 0x40
 8003dfa:	4393      	bics	r3, r2
 8003dfc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	4a19      	ldr	r2, [pc, #100]	; (8003e68 <TIM_OC2_SetConfig+0xe8>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d007      	beq.n	8003e16 <TIM_OC2_SetConfig+0x96>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	4a18      	ldr	r2, [pc, #96]	; (8003e6c <TIM_OC2_SetConfig+0xec>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d003      	beq.n	8003e16 <TIM_OC2_SetConfig+0x96>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	4a17      	ldr	r2, [pc, #92]	; (8003e70 <TIM_OC2_SetConfig+0xf0>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d113      	bne.n	8003e3e <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003e16:	693b      	ldr	r3, [r7, #16]
 8003e18:	4a16      	ldr	r2, [pc, #88]	; (8003e74 <TIM_OC2_SetConfig+0xf4>)
 8003e1a:	4013      	ands	r3, r2
 8003e1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003e1e:	693b      	ldr	r3, [r7, #16]
 8003e20:	4a15      	ldr	r2, [pc, #84]	; (8003e78 <TIM_OC2_SetConfig+0xf8>)
 8003e22:	4013      	ands	r3, r2
 8003e24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	695b      	ldr	r3, [r3, #20]
 8003e2a:	009b      	lsls	r3, r3, #2
 8003e2c:	693a      	ldr	r2, [r7, #16]
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	699b      	ldr	r3, [r3, #24]
 8003e36:	009b      	lsls	r3, r3, #2
 8003e38:	693a      	ldr	r2, [r7, #16]
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	693a      	ldr	r2, [r7, #16]
 8003e42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	68fa      	ldr	r2, [r7, #12]
 8003e48:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	685a      	ldr	r2, [r3, #4]
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	697a      	ldr	r2, [r7, #20]
 8003e56:	621a      	str	r2, [r3, #32]
}
 8003e58:	46c0      	nop			; (mov r8, r8)
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	b006      	add	sp, #24
 8003e5e:	bd80      	pop	{r7, pc}
 8003e60:	feff8fff 	.word	0xfeff8fff
 8003e64:	fffffcff 	.word	0xfffffcff
 8003e68:	40012c00 	.word	0x40012c00
 8003e6c:	40014400 	.word	0x40014400
 8003e70:	40014800 	.word	0x40014800
 8003e74:	fffffbff 	.word	0xfffffbff
 8003e78:	fffff7ff 	.word	0xfffff7ff

08003e7c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b086      	sub	sp, #24
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
 8003e84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6a1b      	ldr	r3, [r3, #32]
 8003e8a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6a1b      	ldr	r3, [r3, #32]
 8003e90:	4a31      	ldr	r2, [pc, #196]	; (8003f58 <TIM_OC3_SetConfig+0xdc>)
 8003e92:	401a      	ands	r2, r3
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	69db      	ldr	r3, [r3, #28]
 8003ea2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	4a2d      	ldr	r2, [pc, #180]	; (8003f5c <TIM_OC3_SetConfig+0xe0>)
 8003ea8:	4013      	ands	r3, r2
 8003eaa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	2203      	movs	r2, #3
 8003eb0:	4393      	bics	r3, r2
 8003eb2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	68fa      	ldr	r2, [r7, #12]
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003ebe:	697b      	ldr	r3, [r7, #20]
 8003ec0:	4a27      	ldr	r2, [pc, #156]	; (8003f60 <TIM_OC3_SetConfig+0xe4>)
 8003ec2:	4013      	ands	r3, r2
 8003ec4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	689b      	ldr	r3, [r3, #8]
 8003eca:	021b      	lsls	r3, r3, #8
 8003ecc:	697a      	ldr	r2, [r7, #20]
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	4a23      	ldr	r2, [pc, #140]	; (8003f64 <TIM_OC3_SetConfig+0xe8>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d10d      	bne.n	8003ef6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003eda:	697b      	ldr	r3, [r7, #20]
 8003edc:	4a22      	ldr	r2, [pc, #136]	; (8003f68 <TIM_OC3_SetConfig+0xec>)
 8003ede:	4013      	ands	r3, r2
 8003ee0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	68db      	ldr	r3, [r3, #12]
 8003ee6:	021b      	lsls	r3, r3, #8
 8003ee8:	697a      	ldr	r2, [r7, #20]
 8003eea:	4313      	orrs	r3, r2
 8003eec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003eee:	697b      	ldr	r3, [r7, #20]
 8003ef0:	4a1e      	ldr	r2, [pc, #120]	; (8003f6c <TIM_OC3_SetConfig+0xf0>)
 8003ef2:	4013      	ands	r3, r2
 8003ef4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	4a1a      	ldr	r2, [pc, #104]	; (8003f64 <TIM_OC3_SetConfig+0xe8>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d007      	beq.n	8003f0e <TIM_OC3_SetConfig+0x92>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	4a1b      	ldr	r2, [pc, #108]	; (8003f70 <TIM_OC3_SetConfig+0xf4>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d003      	beq.n	8003f0e <TIM_OC3_SetConfig+0x92>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	4a1a      	ldr	r2, [pc, #104]	; (8003f74 <TIM_OC3_SetConfig+0xf8>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d113      	bne.n	8003f36 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003f0e:	693b      	ldr	r3, [r7, #16]
 8003f10:	4a19      	ldr	r2, [pc, #100]	; (8003f78 <TIM_OC3_SetConfig+0xfc>)
 8003f12:	4013      	ands	r3, r2
 8003f14:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003f16:	693b      	ldr	r3, [r7, #16]
 8003f18:	4a18      	ldr	r2, [pc, #96]	; (8003f7c <TIM_OC3_SetConfig+0x100>)
 8003f1a:	4013      	ands	r3, r2
 8003f1c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	695b      	ldr	r3, [r3, #20]
 8003f22:	011b      	lsls	r3, r3, #4
 8003f24:	693a      	ldr	r2, [r7, #16]
 8003f26:	4313      	orrs	r3, r2
 8003f28:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	699b      	ldr	r3, [r3, #24]
 8003f2e:	011b      	lsls	r3, r3, #4
 8003f30:	693a      	ldr	r2, [r7, #16]
 8003f32:	4313      	orrs	r3, r2
 8003f34:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	693a      	ldr	r2, [r7, #16]
 8003f3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	68fa      	ldr	r2, [r7, #12]
 8003f40:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	685a      	ldr	r2, [r3, #4]
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	697a      	ldr	r2, [r7, #20]
 8003f4e:	621a      	str	r2, [r3, #32]
}
 8003f50:	46c0      	nop			; (mov r8, r8)
 8003f52:	46bd      	mov	sp, r7
 8003f54:	b006      	add	sp, #24
 8003f56:	bd80      	pop	{r7, pc}
 8003f58:	fffffeff 	.word	0xfffffeff
 8003f5c:	fffeff8f 	.word	0xfffeff8f
 8003f60:	fffffdff 	.word	0xfffffdff
 8003f64:	40012c00 	.word	0x40012c00
 8003f68:	fffff7ff 	.word	0xfffff7ff
 8003f6c:	fffffbff 	.word	0xfffffbff
 8003f70:	40014400 	.word	0x40014400
 8003f74:	40014800 	.word	0x40014800
 8003f78:	ffffefff 	.word	0xffffefff
 8003f7c:	ffffdfff 	.word	0xffffdfff

08003f80 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b086      	sub	sp, #24
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
 8003f88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6a1b      	ldr	r3, [r3, #32]
 8003f8e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6a1b      	ldr	r3, [r3, #32]
 8003f94:	4a24      	ldr	r2, [pc, #144]	; (8004028 <TIM_OC4_SetConfig+0xa8>)
 8003f96:	401a      	ands	r2, r3
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	69db      	ldr	r3, [r3, #28]
 8003fa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	4a20      	ldr	r2, [pc, #128]	; (800402c <TIM_OC4_SetConfig+0xac>)
 8003fac:	4013      	ands	r3, r2
 8003fae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	4a1f      	ldr	r2, [pc, #124]	; (8004030 <TIM_OC4_SetConfig+0xb0>)
 8003fb4:	4013      	ands	r3, r2
 8003fb6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	021b      	lsls	r3, r3, #8
 8003fbe:	68fa      	ldr	r2, [r7, #12]
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003fc4:	693b      	ldr	r3, [r7, #16]
 8003fc6:	4a1b      	ldr	r2, [pc, #108]	; (8004034 <TIM_OC4_SetConfig+0xb4>)
 8003fc8:	4013      	ands	r3, r2
 8003fca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	689b      	ldr	r3, [r3, #8]
 8003fd0:	031b      	lsls	r3, r3, #12
 8003fd2:	693a      	ldr	r2, [r7, #16]
 8003fd4:	4313      	orrs	r3, r2
 8003fd6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	4a17      	ldr	r2, [pc, #92]	; (8004038 <TIM_OC4_SetConfig+0xb8>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d007      	beq.n	8003ff0 <TIM_OC4_SetConfig+0x70>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	4a16      	ldr	r2, [pc, #88]	; (800403c <TIM_OC4_SetConfig+0xbc>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d003      	beq.n	8003ff0 <TIM_OC4_SetConfig+0x70>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	4a15      	ldr	r2, [pc, #84]	; (8004040 <TIM_OC4_SetConfig+0xc0>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d109      	bne.n	8004004 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003ff0:	697b      	ldr	r3, [r7, #20]
 8003ff2:	4a14      	ldr	r2, [pc, #80]	; (8004044 <TIM_OC4_SetConfig+0xc4>)
 8003ff4:	4013      	ands	r3, r2
 8003ff6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	695b      	ldr	r3, [r3, #20]
 8003ffc:	019b      	lsls	r3, r3, #6
 8003ffe:	697a      	ldr	r2, [r7, #20]
 8004000:	4313      	orrs	r3, r2
 8004002:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	697a      	ldr	r2, [r7, #20]
 8004008:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	68fa      	ldr	r2, [r7, #12]
 800400e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	685a      	ldr	r2, [r3, #4]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	693a      	ldr	r2, [r7, #16]
 800401c:	621a      	str	r2, [r3, #32]
}
 800401e:	46c0      	nop			; (mov r8, r8)
 8004020:	46bd      	mov	sp, r7
 8004022:	b006      	add	sp, #24
 8004024:	bd80      	pop	{r7, pc}
 8004026:	46c0      	nop			; (mov r8, r8)
 8004028:	ffffefff 	.word	0xffffefff
 800402c:	feff8fff 	.word	0xfeff8fff
 8004030:	fffffcff 	.word	0xfffffcff
 8004034:	ffffdfff 	.word	0xffffdfff
 8004038:	40012c00 	.word	0x40012c00
 800403c:	40014400 	.word	0x40014400
 8004040:	40014800 	.word	0x40014800
 8004044:	ffffbfff 	.word	0xffffbfff

08004048 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b086      	sub	sp, #24
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
 8004050:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6a1b      	ldr	r3, [r3, #32]
 8004056:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6a1b      	ldr	r3, [r3, #32]
 800405c:	4a21      	ldr	r2, [pc, #132]	; (80040e4 <TIM_OC5_SetConfig+0x9c>)
 800405e:	401a      	ands	r2, r3
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800406e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	4a1d      	ldr	r2, [pc, #116]	; (80040e8 <TIM_OC5_SetConfig+0xa0>)
 8004074:	4013      	ands	r3, r2
 8004076:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	68fa      	ldr	r2, [r7, #12]
 800407e:	4313      	orrs	r3, r2
 8004080:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004082:	693b      	ldr	r3, [r7, #16]
 8004084:	4a19      	ldr	r2, [pc, #100]	; (80040ec <TIM_OC5_SetConfig+0xa4>)
 8004086:	4013      	ands	r3, r2
 8004088:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	689b      	ldr	r3, [r3, #8]
 800408e:	041b      	lsls	r3, r3, #16
 8004090:	693a      	ldr	r2, [r7, #16]
 8004092:	4313      	orrs	r3, r2
 8004094:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	4a15      	ldr	r2, [pc, #84]	; (80040f0 <TIM_OC5_SetConfig+0xa8>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d007      	beq.n	80040ae <TIM_OC5_SetConfig+0x66>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	4a14      	ldr	r2, [pc, #80]	; (80040f4 <TIM_OC5_SetConfig+0xac>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d003      	beq.n	80040ae <TIM_OC5_SetConfig+0x66>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	4a13      	ldr	r2, [pc, #76]	; (80040f8 <TIM_OC5_SetConfig+0xb0>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d109      	bne.n	80040c2 <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80040ae:	697b      	ldr	r3, [r7, #20]
 80040b0:	4a0c      	ldr	r2, [pc, #48]	; (80040e4 <TIM_OC5_SetConfig+0x9c>)
 80040b2:	4013      	ands	r3, r2
 80040b4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	695b      	ldr	r3, [r3, #20]
 80040ba:	021b      	lsls	r3, r3, #8
 80040bc:	697a      	ldr	r2, [r7, #20]
 80040be:	4313      	orrs	r3, r2
 80040c0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	697a      	ldr	r2, [r7, #20]
 80040c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	68fa      	ldr	r2, [r7, #12]
 80040cc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	685a      	ldr	r2, [r3, #4]
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	693a      	ldr	r2, [r7, #16]
 80040da:	621a      	str	r2, [r3, #32]
}
 80040dc:	46c0      	nop			; (mov r8, r8)
 80040de:	46bd      	mov	sp, r7
 80040e0:	b006      	add	sp, #24
 80040e2:	bd80      	pop	{r7, pc}
 80040e4:	fffeffff 	.word	0xfffeffff
 80040e8:	fffeff8f 	.word	0xfffeff8f
 80040ec:	fffdffff 	.word	0xfffdffff
 80040f0:	40012c00 	.word	0x40012c00
 80040f4:	40014400 	.word	0x40014400
 80040f8:	40014800 	.word	0x40014800

080040fc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b086      	sub	sp, #24
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
 8004104:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6a1b      	ldr	r3, [r3, #32]
 800410a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6a1b      	ldr	r3, [r3, #32]
 8004110:	4a22      	ldr	r2, [pc, #136]	; (800419c <TIM_OC6_SetConfig+0xa0>)
 8004112:	401a      	ands	r2, r3
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004122:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	4a1e      	ldr	r2, [pc, #120]	; (80041a0 <TIM_OC6_SetConfig+0xa4>)
 8004128:	4013      	ands	r3, r2
 800412a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	021b      	lsls	r3, r3, #8
 8004132:	68fa      	ldr	r2, [r7, #12]
 8004134:	4313      	orrs	r3, r2
 8004136:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004138:	693b      	ldr	r3, [r7, #16]
 800413a:	4a1a      	ldr	r2, [pc, #104]	; (80041a4 <TIM_OC6_SetConfig+0xa8>)
 800413c:	4013      	ands	r3, r2
 800413e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	689b      	ldr	r3, [r3, #8]
 8004144:	051b      	lsls	r3, r3, #20
 8004146:	693a      	ldr	r2, [r7, #16]
 8004148:	4313      	orrs	r3, r2
 800414a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	4a16      	ldr	r2, [pc, #88]	; (80041a8 <TIM_OC6_SetConfig+0xac>)
 8004150:	4293      	cmp	r3, r2
 8004152:	d007      	beq.n	8004164 <TIM_OC6_SetConfig+0x68>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	4a15      	ldr	r2, [pc, #84]	; (80041ac <TIM_OC6_SetConfig+0xb0>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d003      	beq.n	8004164 <TIM_OC6_SetConfig+0x68>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	4a14      	ldr	r2, [pc, #80]	; (80041b0 <TIM_OC6_SetConfig+0xb4>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d109      	bne.n	8004178 <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004164:	697b      	ldr	r3, [r7, #20]
 8004166:	4a13      	ldr	r2, [pc, #76]	; (80041b4 <TIM_OC6_SetConfig+0xb8>)
 8004168:	4013      	ands	r3, r2
 800416a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	695b      	ldr	r3, [r3, #20]
 8004170:	029b      	lsls	r3, r3, #10
 8004172:	697a      	ldr	r2, [r7, #20]
 8004174:	4313      	orrs	r3, r2
 8004176:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	697a      	ldr	r2, [r7, #20]
 800417c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	68fa      	ldr	r2, [r7, #12]
 8004182:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	685a      	ldr	r2, [r3, #4]
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	693a      	ldr	r2, [r7, #16]
 8004190:	621a      	str	r2, [r3, #32]
}
 8004192:	46c0      	nop			; (mov r8, r8)
 8004194:	46bd      	mov	sp, r7
 8004196:	b006      	add	sp, #24
 8004198:	bd80      	pop	{r7, pc}
 800419a:	46c0      	nop			; (mov r8, r8)
 800419c:	ffefffff 	.word	0xffefffff
 80041a0:	feff8fff 	.word	0xfeff8fff
 80041a4:	ffdfffff 	.word	0xffdfffff
 80041a8:	40012c00 	.word	0x40012c00
 80041ac:	40014400 	.word	0x40014400
 80041b0:	40014800 	.word	0x40014800
 80041b4:	fffbffff 	.word	0xfffbffff

080041b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b086      	sub	sp, #24
 80041bc:	af00      	add	r7, sp, #0
 80041be:	60f8      	str	r0, [r7, #12]
 80041c0:	60b9      	str	r1, [r7, #8]
 80041c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	6a1b      	ldr	r3, [r3, #32]
 80041c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	6a1b      	ldr	r3, [r3, #32]
 80041ce:	2201      	movs	r2, #1
 80041d0:	4393      	bics	r3, r2
 80041d2:	001a      	movs	r2, r3
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	699b      	ldr	r3, [r3, #24]
 80041dc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80041de:	693b      	ldr	r3, [r7, #16]
 80041e0:	22f0      	movs	r2, #240	; 0xf0
 80041e2:	4393      	bics	r3, r2
 80041e4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	011b      	lsls	r3, r3, #4
 80041ea:	693a      	ldr	r2, [r7, #16]
 80041ec:	4313      	orrs	r3, r2
 80041ee:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80041f0:	697b      	ldr	r3, [r7, #20]
 80041f2:	220a      	movs	r2, #10
 80041f4:	4393      	bics	r3, r2
 80041f6:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80041f8:	697a      	ldr	r2, [r7, #20]
 80041fa:	68bb      	ldr	r3, [r7, #8]
 80041fc:	4313      	orrs	r3, r2
 80041fe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	693a      	ldr	r2, [r7, #16]
 8004204:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	697a      	ldr	r2, [r7, #20]
 800420a:	621a      	str	r2, [r3, #32]
}
 800420c:	46c0      	nop			; (mov r8, r8)
 800420e:	46bd      	mov	sp, r7
 8004210:	b006      	add	sp, #24
 8004212:	bd80      	pop	{r7, pc}

08004214 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b086      	sub	sp, #24
 8004218:	af00      	add	r7, sp, #0
 800421a:	60f8      	str	r0, [r7, #12]
 800421c:	60b9      	str	r1, [r7, #8]
 800421e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	6a1b      	ldr	r3, [r3, #32]
 8004224:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	6a1b      	ldr	r3, [r3, #32]
 800422a:	2210      	movs	r2, #16
 800422c:	4393      	bics	r3, r2
 800422e:	001a      	movs	r2, r3
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	699b      	ldr	r3, [r3, #24]
 8004238:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800423a:	693b      	ldr	r3, [r7, #16]
 800423c:	4a0d      	ldr	r2, [pc, #52]	; (8004274 <TIM_TI2_ConfigInputStage+0x60>)
 800423e:	4013      	ands	r3, r2
 8004240:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	031b      	lsls	r3, r3, #12
 8004246:	693a      	ldr	r2, [r7, #16]
 8004248:	4313      	orrs	r3, r2
 800424a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800424c:	697b      	ldr	r3, [r7, #20]
 800424e:	22a0      	movs	r2, #160	; 0xa0
 8004250:	4393      	bics	r3, r2
 8004252:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	011b      	lsls	r3, r3, #4
 8004258:	697a      	ldr	r2, [r7, #20]
 800425a:	4313      	orrs	r3, r2
 800425c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	693a      	ldr	r2, [r7, #16]
 8004262:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	697a      	ldr	r2, [r7, #20]
 8004268:	621a      	str	r2, [r3, #32]
}
 800426a:	46c0      	nop			; (mov r8, r8)
 800426c:	46bd      	mov	sp, r7
 800426e:	b006      	add	sp, #24
 8004270:	bd80      	pop	{r7, pc}
 8004272:	46c0      	nop			; (mov r8, r8)
 8004274:	ffff0fff 	.word	0xffff0fff

08004278 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b084      	sub	sp, #16
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
 8004280:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	689b      	ldr	r3, [r3, #8]
 8004286:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	4a08      	ldr	r2, [pc, #32]	; (80042ac <TIM_ITRx_SetConfig+0x34>)
 800428c:	4013      	ands	r3, r2
 800428e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004290:	683a      	ldr	r2, [r7, #0]
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	4313      	orrs	r3, r2
 8004296:	2207      	movs	r2, #7
 8004298:	4313      	orrs	r3, r2
 800429a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	68fa      	ldr	r2, [r7, #12]
 80042a0:	609a      	str	r2, [r3, #8]
}
 80042a2:	46c0      	nop			; (mov r8, r8)
 80042a4:	46bd      	mov	sp, r7
 80042a6:	b004      	add	sp, #16
 80042a8:	bd80      	pop	{r7, pc}
 80042aa:	46c0      	nop			; (mov r8, r8)
 80042ac:	ffcfff8f 	.word	0xffcfff8f

080042b0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b086      	sub	sp, #24
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	60f8      	str	r0, [r7, #12]
 80042b8:	60b9      	str	r1, [r7, #8]
 80042ba:	607a      	str	r2, [r7, #4]
 80042bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	689b      	ldr	r3, [r3, #8]
 80042c2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80042c4:	697b      	ldr	r3, [r7, #20]
 80042c6:	4a09      	ldr	r2, [pc, #36]	; (80042ec <TIM_ETR_SetConfig+0x3c>)
 80042c8:	4013      	ands	r3, r2
 80042ca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	021a      	lsls	r2, r3, #8
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	431a      	orrs	r2, r3
 80042d4:	68bb      	ldr	r3, [r7, #8]
 80042d6:	4313      	orrs	r3, r2
 80042d8:	697a      	ldr	r2, [r7, #20]
 80042da:	4313      	orrs	r3, r2
 80042dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	697a      	ldr	r2, [r7, #20]
 80042e2:	609a      	str	r2, [r3, #8]
}
 80042e4:	46c0      	nop			; (mov r8, r8)
 80042e6:	46bd      	mov	sp, r7
 80042e8:	b006      	add	sp, #24
 80042ea:	bd80      	pop	{r7, pc}
 80042ec:	ffff00ff 	.word	0xffff00ff

080042f0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b086      	sub	sp, #24
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	60f8      	str	r0, [r7, #12]
 80042f8:	60b9      	str	r1, [r7, #8]
 80042fa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80042fc:	68bb      	ldr	r3, [r7, #8]
 80042fe:	221f      	movs	r2, #31
 8004300:	4013      	ands	r3, r2
 8004302:	2201      	movs	r2, #1
 8004304:	409a      	lsls	r2, r3
 8004306:	0013      	movs	r3, r2
 8004308:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	6a1b      	ldr	r3, [r3, #32]
 800430e:	697a      	ldr	r2, [r7, #20]
 8004310:	43d2      	mvns	r2, r2
 8004312:	401a      	ands	r2, r3
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	6a1a      	ldr	r2, [r3, #32]
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	211f      	movs	r1, #31
 8004320:	400b      	ands	r3, r1
 8004322:	6879      	ldr	r1, [r7, #4]
 8004324:	4099      	lsls	r1, r3
 8004326:	000b      	movs	r3, r1
 8004328:	431a      	orrs	r2, r3
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	621a      	str	r2, [r3, #32]
}
 800432e:	46c0      	nop			; (mov r8, r8)
 8004330:	46bd      	mov	sp, r7
 8004332:	b006      	add	sp, #24
 8004334:	bd80      	pop	{r7, pc}
	...

08004338 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b084      	sub	sp, #16
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
 8004340:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	223c      	movs	r2, #60	; 0x3c
 8004346:	5c9b      	ldrb	r3, [r3, r2]
 8004348:	2b01      	cmp	r3, #1
 800434a:	d101      	bne.n	8004350 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800434c:	2302      	movs	r3, #2
 800434e:	e050      	b.n	80043f2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	223c      	movs	r2, #60	; 0x3c
 8004354:	2101      	movs	r1, #1
 8004356:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	223d      	movs	r2, #61	; 0x3d
 800435c:	2102      	movs	r1, #2
 800435e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	685b      	ldr	r3, [r3, #4]
 8004366:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	689b      	ldr	r3, [r3, #8]
 800436e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4a21      	ldr	r2, [pc, #132]	; (80043fc <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d108      	bne.n	800438c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	4a20      	ldr	r2, [pc, #128]	; (8004400 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800437e:	4013      	ands	r3, r2
 8004380:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	685b      	ldr	r3, [r3, #4]
 8004386:	68fa      	ldr	r2, [r7, #12]
 8004388:	4313      	orrs	r3, r2
 800438a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	2270      	movs	r2, #112	; 0x70
 8004390:	4393      	bics	r3, r2
 8004392:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	68fa      	ldr	r2, [r7, #12]
 800439a:	4313      	orrs	r3, r2
 800439c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	68fa      	ldr	r2, [r7, #12]
 80043a4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4a14      	ldr	r2, [pc, #80]	; (80043fc <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d00a      	beq.n	80043c6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681a      	ldr	r2, [r3, #0]
 80043b4:	2380      	movs	r3, #128	; 0x80
 80043b6:	05db      	lsls	r3, r3, #23
 80043b8:	429a      	cmp	r2, r3
 80043ba:	d004      	beq.n	80043c6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a10      	ldr	r2, [pc, #64]	; (8004404 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d10c      	bne.n	80043e0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80043c6:	68bb      	ldr	r3, [r7, #8]
 80043c8:	2280      	movs	r2, #128	; 0x80
 80043ca:	4393      	bics	r3, r2
 80043cc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	689b      	ldr	r3, [r3, #8]
 80043d2:	68ba      	ldr	r2, [r7, #8]
 80043d4:	4313      	orrs	r3, r2
 80043d6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	68ba      	ldr	r2, [r7, #8]
 80043de:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	223d      	movs	r2, #61	; 0x3d
 80043e4:	2101      	movs	r1, #1
 80043e6:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	223c      	movs	r2, #60	; 0x3c
 80043ec:	2100      	movs	r1, #0
 80043ee:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80043f0:	2300      	movs	r3, #0
}
 80043f2:	0018      	movs	r0, r3
 80043f4:	46bd      	mov	sp, r7
 80043f6:	b004      	add	sp, #16
 80043f8:	bd80      	pop	{r7, pc}
 80043fa:	46c0      	nop			; (mov r8, r8)
 80043fc:	40012c00 	.word	0x40012c00
 8004400:	ff0fffff 	.word	0xff0fffff
 8004404:	40000400 	.word	0x40000400

08004408 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b084      	sub	sp, #16
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
 8004410:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004412:	2300      	movs	r3, #0
 8004414:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	223c      	movs	r2, #60	; 0x3c
 800441a:	5c9b      	ldrb	r3, [r3, r2]
 800441c:	2b01      	cmp	r3, #1
 800441e:	d101      	bne.n	8004424 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004420:	2302      	movs	r3, #2
 8004422:	e06f      	b.n	8004504 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	223c      	movs	r2, #60	; 0x3c
 8004428:	2101      	movs	r1, #1
 800442a:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	22ff      	movs	r2, #255	; 0xff
 8004430:	4393      	bics	r3, r2
 8004432:	001a      	movs	r2, r3
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	68db      	ldr	r3, [r3, #12]
 8004438:	4313      	orrs	r3, r2
 800443a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	4a33      	ldr	r2, [pc, #204]	; (800450c <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 8004440:	401a      	ands	r2, r3
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	689b      	ldr	r3, [r3, #8]
 8004446:	4313      	orrs	r3, r2
 8004448:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	4a30      	ldr	r2, [pc, #192]	; (8004510 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 800444e:	401a      	ands	r2, r3
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	4313      	orrs	r3, r2
 8004456:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	4a2e      	ldr	r2, [pc, #184]	; (8004514 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>)
 800445c:	401a      	ands	r2, r3
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4313      	orrs	r3, r2
 8004464:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	4a2b      	ldr	r2, [pc, #172]	; (8004518 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 800446a:	401a      	ands	r2, r3
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	691b      	ldr	r3, [r3, #16]
 8004470:	4313      	orrs	r3, r2
 8004472:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	4a29      	ldr	r2, [pc, #164]	; (800451c <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8004478:	401a      	ands	r2, r3
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	695b      	ldr	r3, [r3, #20]
 800447e:	4313      	orrs	r3, r2
 8004480:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	4a26      	ldr	r2, [pc, #152]	; (8004520 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8004486:	401a      	ands	r2, r3
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800448c:	4313      	orrs	r3, r2
 800448e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	4a24      	ldr	r2, [pc, #144]	; (8004524 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8004494:	401a      	ands	r2, r3
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	699b      	ldr	r3, [r3, #24]
 800449a:	041b      	lsls	r3, r3, #16
 800449c:	4313      	orrs	r3, r2
 800449e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	4a21      	ldr	r2, [pc, #132]	; (8004528 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 80044a4:	401a      	ands	r2, r3
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	69db      	ldr	r3, [r3, #28]
 80044aa:	4313      	orrs	r3, r2
 80044ac:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4a1e      	ldr	r2, [pc, #120]	; (800452c <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d11c      	bne.n	80044f2 <HAL_TIMEx_ConfigBreakDeadTime+0xea>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	4a1d      	ldr	r2, [pc, #116]	; (8004530 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 80044bc:	401a      	ands	r2, r3
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044c2:	051b      	lsls	r3, r3, #20
 80044c4:	4313      	orrs	r3, r2
 80044c6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	4a1a      	ldr	r2, [pc, #104]	; (8004534 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 80044cc:	401a      	ands	r2, r3
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	6a1b      	ldr	r3, [r3, #32]
 80044d2:	4313      	orrs	r3, r2
 80044d4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	4a17      	ldr	r2, [pc, #92]	; (8004538 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 80044da:	401a      	ands	r2, r3
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e0:	4313      	orrs	r3, r2
 80044e2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	4a15      	ldr	r2, [pc, #84]	; (800453c <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 80044e8:	401a      	ands	r2, r3
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044ee:	4313      	orrs	r3, r2
 80044f0:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	68fa      	ldr	r2, [r7, #12]
 80044f8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	223c      	movs	r2, #60	; 0x3c
 80044fe:	2100      	movs	r1, #0
 8004500:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004502:	2300      	movs	r3, #0
}
 8004504:	0018      	movs	r0, r3
 8004506:	46bd      	mov	sp, r7
 8004508:	b004      	add	sp, #16
 800450a:	bd80      	pop	{r7, pc}
 800450c:	fffffcff 	.word	0xfffffcff
 8004510:	fffffbff 	.word	0xfffffbff
 8004514:	fffff7ff 	.word	0xfffff7ff
 8004518:	ffffefff 	.word	0xffffefff
 800451c:	ffffdfff 	.word	0xffffdfff
 8004520:	ffffbfff 	.word	0xffffbfff
 8004524:	fff0ffff 	.word	0xfff0ffff
 8004528:	efffffff 	.word	0xefffffff
 800452c:	40012c00 	.word	0x40012c00
 8004530:	ff0fffff 	.word	0xff0fffff
 8004534:	feffffff 	.word	0xfeffffff
 8004538:	fdffffff 	.word	0xfdffffff
 800453c:	dfffffff 	.word	0xdfffffff

08004540 <memset>:
 8004540:	0003      	movs	r3, r0
 8004542:	1882      	adds	r2, r0, r2
 8004544:	4293      	cmp	r3, r2
 8004546:	d100      	bne.n	800454a <memset+0xa>
 8004548:	4770      	bx	lr
 800454a:	7019      	strb	r1, [r3, #0]
 800454c:	3301      	adds	r3, #1
 800454e:	e7f9      	b.n	8004544 <memset+0x4>

08004550 <__libc_init_array>:
 8004550:	b570      	push	{r4, r5, r6, lr}
 8004552:	2600      	movs	r6, #0
 8004554:	4c0c      	ldr	r4, [pc, #48]	; (8004588 <__libc_init_array+0x38>)
 8004556:	4d0d      	ldr	r5, [pc, #52]	; (800458c <__libc_init_array+0x3c>)
 8004558:	1b64      	subs	r4, r4, r5
 800455a:	10a4      	asrs	r4, r4, #2
 800455c:	42a6      	cmp	r6, r4
 800455e:	d109      	bne.n	8004574 <__libc_init_array+0x24>
 8004560:	2600      	movs	r6, #0
 8004562:	f000 f819 	bl	8004598 <_init>
 8004566:	4c0a      	ldr	r4, [pc, #40]	; (8004590 <__libc_init_array+0x40>)
 8004568:	4d0a      	ldr	r5, [pc, #40]	; (8004594 <__libc_init_array+0x44>)
 800456a:	1b64      	subs	r4, r4, r5
 800456c:	10a4      	asrs	r4, r4, #2
 800456e:	42a6      	cmp	r6, r4
 8004570:	d105      	bne.n	800457e <__libc_init_array+0x2e>
 8004572:	bd70      	pop	{r4, r5, r6, pc}
 8004574:	00b3      	lsls	r3, r6, #2
 8004576:	58eb      	ldr	r3, [r5, r3]
 8004578:	4798      	blx	r3
 800457a:	3601      	adds	r6, #1
 800457c:	e7ee      	b.n	800455c <__libc_init_array+0xc>
 800457e:	00b3      	lsls	r3, r6, #2
 8004580:	58eb      	ldr	r3, [r5, r3]
 8004582:	4798      	blx	r3
 8004584:	3601      	adds	r6, #1
 8004586:	e7f2      	b.n	800456e <__libc_init_array+0x1e>
 8004588:	080046ec 	.word	0x080046ec
 800458c:	080046ec 	.word	0x080046ec
 8004590:	080046f0 	.word	0x080046f0
 8004594:	080046ec 	.word	0x080046ec

08004598 <_init>:
 8004598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800459a:	46c0      	nop			; (mov r8, r8)
 800459c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800459e:	bc08      	pop	{r3}
 80045a0:	469e      	mov	lr, r3
 80045a2:	4770      	bx	lr

080045a4 <_fini>:
 80045a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045a6:	46c0      	nop			; (mov r8, r8)
 80045a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045aa:	bc08      	pop	{r3}
 80045ac:	469e      	mov	lr, r3
 80045ae:	4770      	bx	lr
